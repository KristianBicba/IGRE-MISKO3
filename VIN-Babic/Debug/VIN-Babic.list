
VIN-Babic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000100b8  080088d0  080088d0  000188d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018988  08018988  000300e4  2**0
                  CONTENTS
  4 .ARM          00000000  08018988  08018988  000300e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018988  08018988  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018988  08018988  00028988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801898c  0801898c  0002898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08018990  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001caec  200000e8  08018a74  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001cbd4  08018a74  0003cbd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cfb0  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000710e  00000000  00000000  0006d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00035be2  00000000  00000000  000741d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  000a9db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000080c0  00000000  00000000  000ab940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032848  00000000  00000000  000b3a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b1da  00000000  00000000  000e6248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00131e17  00000000  00000000  00121422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00253239  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006240  00000000  00000000  0025328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e8 	.word	0x200000e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080088b8 	.word	0x080088b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ec 	.word	0x200000ec
 8000214:	080088b8 	.word	0x080088b8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000be0:	b510      	push	{r4, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be4:	2238      	movs	r2, #56	; 0x38
 8000be6:	2100      	movs	r1, #0
 8000be8:	a806      	add	r0, sp, #24
 8000bea:	f006 f997 	bl	8006f1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bee:	2000      	movs	r0, #0
 8000bf0:	e9cd 0000 	strd	r0, r0, [sp]
 8000bf4:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8000bf8:	9004      	str	r0, [sp, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bfa:	f003 f9bb 	bl	8003f74 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c02:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	2240      	movs	r2, #64	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c06:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c0a:	2255      	movs	r2, #85	; 0x55
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c0e:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000c14:	2206      	movs	r2, #6
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c16:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000c1a:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c20:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f003 fa2d 	bl	8004080 <HAL_RCC_OscConfig>
 8000c26:	b108      	cbz	r0, 8000c2c <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c2a:	e7fe      	b.n	8000c2a <SystemClock_Config+0x4a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000c58 <SystemClock_Config+0x78>
 8000c30:	ed8d 7b00 	vstr	d7, [sp]
 8000c34:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000c60 <SystemClock_Config+0x80>
 8000c38:	4603      	mov	r3, r0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	ed8d 7b02 	vstr	d7, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c44:	f003 fca0 	bl	8004588 <HAL_RCC_ClockConfig>
 8000c48:	b108      	cbz	r0, 8000c4e <SystemClock_Config+0x6e>
 8000c4a:	b672      	cpsid	i
	while (1)
 8000c4c:	e7fe      	b.n	8000c4c <SystemClock_Config+0x6c>
}
 8000c4e:	b014      	add	sp, #80	; 0x50
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	bf00      	nop
 8000c54:	f3af 8000 	nop.w
 8000c58:	0000000f 	.word	0x0000000f
 8000c5c:	00000003 	.word	0x00000003
	...

08000c68 <main>:
{
 8000c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c6c:	ed2d 8b10 	vpush	{d8-d15}
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	2400      	movs	r4, #0
{
 8000c72:	b0c1      	sub	sp, #260	; 0x104
	HAL_Init();
 8000c74:	f002 f87a 	bl	8002d6c <HAL_Init>
	SystemClock_Config();
 8000c78:	f7ff ffb2 	bl	8000be0 <SystemClock_Config>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
 8000c80:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c84:	4da6      	ldr	r5, [pc, #664]	; (8000f20 <main+0x2b8>)
 8000c86:	942f      	str	r4, [sp, #188]	; 0xbc
 8000c88:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c8a:	4ea6      	ldr	r6, [pc, #664]	; (8000f24 <main+0x2bc>)
 8000c8c:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8000f30 <main+0x2c8>
 8000c90:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8000f34 <main+0x2cc>
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64eb      	str	r3, [r5, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c9a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	9315      	str	r3, [sp, #84]	; 0x54
  (void)tmpreg;
 8000ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ca4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	9316      	str	r3, [sp, #88]	; 0x58
  (void)tmpreg;
 8000cb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cbe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	9317      	str	r3, [sp, #92]	; 0x5c
  (void)tmpreg;
 8000cc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cc8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cd0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	9318      	str	r3, [sp, #96]	; 0x60
  (void)tmpreg;
 8000cd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cda:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	9319      	str	r3, [sp, #100]	; 0x64
  (void)tmpreg;
 8000cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cec:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf2:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cf4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfa:	931a      	str	r3, [sp, #104]	; 0x68
  (void)tmpreg;
 8000cfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	; (8000f28 <main+0x2c0>)
 8000d00:	2701      	movs	r7, #1
 8000d02:	2208      	movs	r2, #8
 8000d04:	f04f 0904 	mov.w	r9, #4
 8000d08:	2102      	movs	r1, #2
 8000d0a:	f04f 0b20 	mov.w	fp, #32
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
 8000d14:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 8000d18:	f8c8 b028 	str.w	fp, [r8, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	62b7      	str	r7, [r6, #40]	; 0x28
 8000d20:	62b1      	str	r1, [r6, #40]	; 0x28
 8000d22:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8000d26:	62b2      	str	r2, [r6, #40]	; 0x28
 8000d28:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 8000d2c:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
 8000d30:	6299      	str	r1, [r3, #40]	; 0x28
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	a92a      	add	r1, sp, #168	; 0xa8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000d38:	922a      	str	r2, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d3a:	972e      	str	r7, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f004 fa56 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000d40:	ed9f 7b5f 	vldr	d7, [pc, #380]	; 8000ec0 <main+0x258>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	a92a      	add	r1, sp, #168	; 0xa8
 8000d46:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000d48:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d4c:	972e      	str	r7, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f004 fa4d 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d52:	ed9f 7b5d 	vldr	d7, [pc, #372]	; 8000ec8 <main+0x260>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d56:	ed9f 8b5e 	vldr	d8, [pc, #376]	; 8000ed0 <main+0x268>
 8000d5a:	ed9f bb5f 	vldr	d11, [pc, #380]	; 8000ed8 <main+0x270>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	a92a      	add	r1, sp, #168	; 0xa8
 8000d60:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d62:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d66:	972e      	str	r7, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f004 fa40 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6c:	a92a      	add	r1, sp, #168	; 0xa8
 8000d6e:	4640      	mov	r0, r8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d70:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
 8000d74:	ed8d bb2a 	vstr	d11, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d78:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d7a:	f004 fa37 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d7e:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8000ee0 <main+0x278>
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d82:	a92a      	add	r1, sp, #168	; 0xa8
 8000d84:	4640      	mov	r0, r8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d86:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8000d8a:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8e:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d90:	f004 fa2c 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d94:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8000ee8 <main+0x280>
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d98:	a92a      	add	r1, sp, #168	; 0xa8
 8000d9a:	4640      	mov	r0, r8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d9c:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8000da0:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da4:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da6:	f004 fa21 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000daa:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8000ef0 <main+0x288>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000dae:	ed9f 9b52 	vldr	d9, [pc, #328]	; 8000ef8 <main+0x290>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000db2:	ed9f ab53 	vldr	d10, [pc, #332]	; 8000f00 <main+0x298>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	a92a      	add	r1, sp, #168	; 0xa8
 8000db8:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000dba:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8000dbe:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc2:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f004 fa12 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	a92a      	add	r1, sp, #168	; 0xa8
 8000dca:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000dcc:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
 8000dd0:	ed8d 9b2a 	vstr	d9, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd4:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f004 fa09 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	a92a      	add	r1, sp, #168	; 0xa8
 8000ddc:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000dde:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8000de2:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de6:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f004 fa00 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	4630      	mov	r0, r6
 8000dee:	a92a      	add	r1, sp, #168	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000df0:	972e      	str	r7, [sp, #184]	; 0xb8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000df2:	ed8d bb2a 	vstr	d11, [sp, #168]	; 0xa8
 8000df6:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	f004 f9f7 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfe:	a92a      	add	r1, sp, #168	; 0xa8
 8000e00:	4640      	mov	r0, r8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000e02:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8000e06:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0a:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0c:	f004 f9ee 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e10:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 8000f08 <main+0x2a0>
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	a92a      	add	r1, sp, #168	; 0xa8
 8000e16:	4845      	ldr	r0, [pc, #276]	; (8000f2c <main+0x2c4>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e18:	972e      	str	r7, [sp, #184]	; 0xb8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e1a:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1e:	f004 f9e5 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e22:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8000f10 <main+0x2a8>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e26:	ed9f ab3c 	vldr	d10, [pc, #240]	; 8000f18 <main+0x2b0>
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2a:	a92a      	add	r1, sp, #168	; 0xa8
 8000e2c:	483f      	ldr	r0, [pc, #252]	; (8000f2c <main+0x2c4>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e2e:	972e      	str	r7, [sp, #184]	; 0xb8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e30:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e34:	f004 f9da 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e38:	a92a      	add	r1, sp, #168	; 0xa8
 8000e3a:	483c      	ldr	r0, [pc, #240]	; (8000f2c <main+0x2c4>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e3c:	972e      	str	r7, [sp, #184]	; 0xb8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e3e:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000e42:	f44f 7680 	mov.w	r6, #256	; 0x100
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f004 f9d1 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4a:	972e      	str	r7, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4c:	a92a      	add	r1, sp, #168	; 0xa8
 8000e4e:	4837      	ldr	r0, [pc, #220]	; (8000f2c <main+0x2c4>)
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000e50:	2700      	movs	r7, #0
 8000e52:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e56:	f004 f9c9 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5a:	a92a      	add	r1, sp, #168	; 0xa8
 8000e5c:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000e5e:	ed8d bb2a 	vstr	d11, [sp, #168]	; 0xa8
 8000e62:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e66:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f004 f9c0 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	a92a      	add	r1, sp, #168	; 0xa8
 8000e6e:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e70:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e74:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f004 f9b9 	bl	80051ec <LL_GPIO_Init>
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <main+0x2c0>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7c:	942e      	str	r4, [sp, #184]	; 0xb8
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7e:	4618      	mov	r0, r3
 8000e80:	a92a      	add	r1, sp, #168	; 0xa8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e82:	ed8d 9b2a 	vstr	d9, [sp, #168]	; 0xa8
 8000e86:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8a:	f004 f9af 	bl	80051ec <LL_GPIO_Init>
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e8e:	465a      	mov	r2, fp
 8000e90:	4621      	mov	r1, r4
 8000e92:	a822      	add	r0, sp, #136	; 0x88
 8000e94:	f006 f842 	bl	8006f1c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	a82b      	add	r0, sp, #172	; 0xac
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	2250      	movs	r2, #80	; 0x50
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000ea2:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8000ea6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eaa:	f006 f837 	bl	8006f1c <memset>
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eae:	a82a      	add	r0, sp, #168	; 0xa8
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb0:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb4:	f003 fc7a 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d03d      	beq.n	8000f38 <main+0x2d0>
 8000ebc:	b672      	cpsid	i
	while (1)
 8000ebe:	e7fe      	b.n	8000ebe <main+0x256>
 8000ec0:	00004000 	.word	0x00004000
 8000ec4:	00000000 	.word	0x00000000
 8000ec8:	00008000 	.word	0x00008000
	...
 8000ed8:	00000008 	.word	0x00000008
 8000edc:	00000001 	.word	0x00000001
 8000ee0:	00000010 	.word	0x00000010
 8000ee4:	00000001 	.word	0x00000001
 8000ee8:	00000020 	.word	0x00000020
 8000eec:	00000001 	.word	0x00000001
 8000ef0:	00000001 	.word	0x00000001
 8000ef4:	00000001 	.word	0x00000001
 8000ef8:	00000002 	.word	0x00000002
 8000efc:	00000001 	.word	0x00000001
 8000f00:	00000004 	.word	0x00000004
 8000f04:	00000001 	.word	0x00000001
 8000f08:	00000001 	.word	0x00000001
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	00000002 	.word	0x00000002
 8000f14:	00000000 	.word	0x00000000
 8000f18:	00000040 	.word	0x00000040
 8000f1c:	00000000 	.word	0x00000000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48001400 	.word	0x48001400
 8000f34:	48000c00 	.word	0x48000c00
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f38:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3e:	65ab      	str	r3, [r5, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f40:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	9313      	str	r3, [sp, #76]	; 0x4c
  (void)tmpreg;
 8000f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f4a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f52:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	9314      	str	r3, [sp, #80]	; 0x50
  (void)tmpreg;
 8000f5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000f5c:	4604      	mov	r4, r0
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000f60:	2600      	movs	r6, #0
 8000f62:	2707      	movs	r7, #7
 8000f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f68:	2302      	movs	r3, #2
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	48b9      	ldr	r0, [pc, #740]	; (8001250 <main+0x5e8>)
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000f6c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000f70:	ed8d 8b1e 	vstr	d8, [sp, #120]	; 0x78
 8000f74:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f004 f938 	bl	80051ec <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	2302      	movs	r3, #2
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	a91c      	add	r1, sp, #112	; 0x70
 8000f84:	48b2      	ldr	r0, [pc, #712]	; (8001250 <main+0x5e8>)
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f86:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000f8a:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8000f8e:	ed8d 8b1e 	vstr	d8, [sp, #120]	; 0x78
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f004 f92b 	bl	80051ec <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f96:	4baf      	ldr	r3, [pc, #700]	; (8001254 <main+0x5ec>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	4baf      	ldr	r3, [pc, #700]	; (8001258 <main+0x5f0>)
 8000f9c:	f883 4327 	strb.w	r4, [r3, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	605a      	str	r2, [r3, #4]
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000faa:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	LL_USART_Init(USART3, &USART_InitStruct);
 8000fae:	48ab      	ldr	r0, [pc, #684]	; (800125c <main+0x5f4>)
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	230c      	movs	r3, #12
	LL_USART_Init(USART3, &USART_InitStruct);
 8000fb4:	a922      	add	r1, sp, #136	; 0x88
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000fb6:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8000fba:	ed8d 8b24 	vstr	d8, [sp, #144]	; 0x90
 8000fbe:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
	LL_USART_Init(USART3, &USART_InitStruct);
 8000fc2:	f004 fdfd 	bl	8005bc0 <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000fc6:	4aa6      	ldr	r2, [pc, #664]	; (8001260 <main+0x5f8>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fc8:	e852 3f00 	ldrex	r3, [r2]
 8000fcc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fd0:	e842 3100 	strex	r1, r3, [r2]
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	d1f7      	bne.n	8000fc8 <main+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fd8:	e852 3f00 	ldrex	r3, [r2]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000fdc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fe0:	e842 3400 	strex	r4, r3, [r2]
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d1f7      	bne.n	8000fd8 <main+0x370>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000fe8:	4b9c      	ldr	r3, [pc, #624]	; (800125c <main+0x5f4>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000ff0:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ff8:	609a      	str	r2, [r3, #8]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001000:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001008:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f042 0201 	orr.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	0297      	lsls	r7, r2, #10
 8001016:	d5fc      	bpl.n	8001012 <main+0x3aa>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	0256      	lsls	r6, r2, #9
 800101c:	d5f9      	bpl.n	8001012 <main+0x3aa>
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800101e:	2300      	movs	r3, #0
 8001020:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8001024:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001028:	4a8e      	ldr	r2, [pc, #568]	; (8001264 <main+0x5fc>)
 800102a:	932e      	str	r3, [sp, #184]	; 0xb8
 800102c:	6d91      	ldr	r1, [r2, #88]	; 0x58
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102e:	4889      	ldr	r0, [pc, #548]	; (8001254 <main+0x5ec>)
 8001030:	f041 0110 	orr.w	r1, r1, #16
 8001034:	6591      	str	r1, [r2, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001036:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001038:	f002 0210 	and.w	r2, r2, #16
 800103c:	9212      	str	r2, [sp, #72]	; 0x48
  (void)tmpreg;
 800103e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001040:	68c2      	ldr	r2, [r0, #12]
 8001042:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001046:	f1c2 0107 	rsb	r1, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	1d10      	adds	r0, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	2904      	cmp	r1, #4
 800104e:	bf28      	it	cs
 8001050:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	2806      	cmp	r0, #6
 8001054:	bf98      	it	ls
 8001056:	461a      	movls	r2, r3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	fa03 f301 	lsl.w	r3, r3, r1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001060:	bf88      	it	hi
 8001062:	3a03      	subhi	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	43db      	mvns	r3, r3
 8001066:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	4a7b      	ldr	r2, [pc, #492]	; (8001258 <main+0x5f0>)
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f882 3336 	strb.w	r3, [r2, #822]	; 0x336
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001076:	6053      	str	r3, [r2, #4]
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001078:	4e7b      	ldr	r6, [pc, #492]	; (8001268 <main+0x600>)
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800107a:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8001278 <main+0x610>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800107e:	4f79      	ldr	r7, [pc, #484]	; (8001264 <main+0x5fc>)
	TIM_InitStruct.Prescaler = 144;
 8001080:	2390      	movs	r3, #144	; 0x90
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001082:	2500      	movs	r5, #0
	TIM_InitStruct.Prescaler = 144;
 8001084:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001088:	a92a      	add	r1, sp, #168	; 0xa8
	TIM_InitStruct.Autoreload = 49999;
 800108a:	f24c 334f 	movw	r3, #49999	; 0xc34f
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 800108e:	4630      	mov	r0, r6
	TIM_InitStruct.Autoreload = 49999;
 8001090:	932c      	str	r3, [sp, #176]	; 0xb0
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001092:	952b      	str	r5, [sp, #172]	; 0xac
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001094:	f004 fb6a 	bl	800576c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001098:	6833      	ldr	r3, [r6, #0]
 800109a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800109e:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80010a0:	6873      	ldr	r3, [r6, #4]
 80010a2:	ea03 030a 	and.w	r3, r3, sl
 80010a6:	6073      	str	r3, [r6, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80010a8:	68b3      	ldr	r3, [r6, #8]
 80010aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010ae:	60b3      	str	r3, [r6, #8]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010b0:	2220      	movs	r2, #32
 80010b2:	4629      	mov	r1, r5
 80010b4:	a82a      	add	r0, sp, #168	; 0xa8
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010b6:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
 80010ba:	e9cd 551e 	strd	r5, r5, [sp, #120]	; 0x78
 80010be:	9520      	str	r5, [sp, #128]	; 0x80
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010c0:	f005 ff2c 	bl	8006f1c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 80010c8:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
 80010cc:	e9cd 5526 	strd	r5, r5, [sp, #152]	; 0x98
 80010d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	9310      	str	r3, [sp, #64]	; 0x40
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80010e0:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
  (void)tmpreg;
 80010e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	TIM_InitStruct.Prescaler = 1440;
 80010e6:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80010ea:	a91c      	add	r1, sp, #112	; 0x70
	TIM_InitStruct.Prescaler = 1440;
 80010ec:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80010f0:	4630      	mov	r0, r6
	TIM_InitStruct.Autoreload = 99;
 80010f2:	2363      	movs	r3, #99	; 0x63
 80010f4:	931e      	str	r3, [sp, #120]	; 0x78
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80010f6:	f004 fb39 	bl	800576c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010fa:	6833      	ldr	r3, [r6, #0]
 80010fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001100:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001102:	68b3      	ldr	r3, [r6, #8]
 8001104:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001108:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800110c:	f023 0307 	bic.w	r3, r3, #7
 8001110:	60b3      	str	r3, [r6, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001112:	f8db 3818 	ldr.w	r3, [fp, #2072]	; 0x818
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001116:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 8001240 <main+0x5d8>
 800111a:	ed9f 8b4b 	vldr	d8, [pc, #300]	; 8001248 <main+0x5e0>
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	f8cb 3818 	str.w	r3, [fp, #2072]	; 0x818
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001126:	2101      	movs	r1, #1
 8001128:	aa2a      	add	r2, sp, #168	; 0xa8
 800112a:	4630      	mov	r0, r6
	Timing.AddressSetupTime = 1;
 800112c:	4688      	mov	r8, r1
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800112e:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8001132:	ed8d 8b2c 	vstr	d8, [sp, #176]	; 0xb0
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001136:	952e      	str	r5, [sp, #184]	; 0xb8
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001138:	f004 fb7e 	bl	8005838 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800113c:	f8db 3818 	ldr.w	r3, [fp, #2072]	; 0x818
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	4843      	ldr	r0, [pc, #268]	; (8001250 <main+0x5e8>)
 8001142:	f023 0304 	bic.w	r3, r3, #4
 8001146:	f8cb 3818 	str.w	r3, [fp, #2072]	; 0x818
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800114a:	6873      	ldr	r3, [r6, #4]
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800114c:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800127c <main+0x614>
 8001150:	ea03 030a 	and.w	r3, r3, sl
 8001154:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001156:	68b3      	ldr	r3, [r6, #8]
 8001158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800115c:	60b3      	str	r3, [r6, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800115e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	9311      	str	r3, [sp, #68]	; 0x44
  (void)tmpreg;
 800116e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	2302      	movs	r3, #2
 8001174:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	a922      	add	r1, sp, #136	; 0x88
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800117a:	2200      	movs	r2, #0
 800117c:	2302      	movs	r3, #2
 800117e:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8001182:	ed8d 8b24 	vstr	d8, [sp, #144]	; 0x90
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f004 f831 	bl	80051ec <LL_GPIO_Init>
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800118a:	4838      	ldr	r0, [pc, #224]	; (800126c <main+0x604>)
	FMC_NORSRAM_TimingTypeDef Timing = {0};
 800118c:	9531      	str	r5, [sp, #196]	; 0xc4
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800118e:	2310      	movs	r3, #16
 8001190:	6143      	str	r3, [r0, #20]
	Timing.CLKDivision = 16;
 8001192:	932f      	str	r3, [sp, #188]	; 0xbc
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001194:	f04f 4a20 	mov.w	sl, #2684354560	; 0xa0000000
	Timing.AddressHoldTime = 15;
 8001198:	230f      	movs	r3, #15
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800119a:	f44f 5980 	mov.w	r9, #4096	; 0x1000
	Timing.AddressHoldTime = 15;
 800119e:	932b      	str	r3, [sp, #172]	; 0xac
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 80011a0:	e9c0 ab00 	strd	sl, fp, [r0]
	Timing.DataLatency = 17;
 80011a4:	2311      	movs	r3, #17
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011a6:	462a      	mov	r2, r5
 80011a8:	a92a      	add	r1, sp, #168	; 0xa8
	Timing.DataHoldTime = 1;
 80011aa:	e9cd 882c 	strd	r8, r8, [sp, #176]	; 0xb0
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80011ae:	e9c0 5502 	strd	r5, r5, [r0, #8]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80011b2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80011b6:	e9c0 5908 	strd	r5, r9, [r0, #32]
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80011ba:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80011be:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80011c2:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80011c6:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
	Timing.AddressSetupTime = 1;
 80011ca:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
	Timing.BusTurnAroundDuration = 1;
 80011ce:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80011d2:	6105      	str	r5, [r0, #16]
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 80011d4:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
	Timing.DataLatency = 17;
 80011d8:	9330      	str	r3, [sp, #192]	; 0xc0
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011da:	f003 fced 	bl	8004bb8 <HAL_SRAM_Init>
 80011de:	bb50      	cbnz	r0, 8001236 <main+0x5ce>
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 80011e2:	4a23      	ldr	r2, [pc, #140]	; (8001270 <main+0x608>)
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80011ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	930e      	str	r3, [sp, #56]	; 0x38
 80011f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80011fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	930f      	str	r3, [sp, #60]	; 0x3c
 8001204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <main+0x60c>)
	hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8001208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800120c:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 800120e:	2240      	movs	r2, #64	; 0x40
	hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8001210:	e9c3 0007 	strd	r0, r0, [r3, #28]
	hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8001214:	e9c3 1202 	strd	r1, r2, [r3, #8]
	hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8001218:	6058      	str	r0, [r3, #4]
	hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
 800121a:	6118      	str	r0, [r3, #16]
	hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	f44f 6680 	mov.w	r6, #1024	; 0x400
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8001224:	4618      	mov	r0, r3
	hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001226:	e9c3 2605 	strd	r2, r6, [r3, #20]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800122a:	f002 fc6d 	bl	8003b08 <HAL_DMA_Init>
 800122e:	4605      	mov	r5, r0
 8001230:	b330      	cbz	r0, 8001280 <main+0x618>
  __ASM volatile ("cpsid i" : : : "memory");
 8001232:	b672      	cpsid	i
	while (1)
 8001234:	e7fe      	b.n	8001234 <main+0x5cc>
 8001236:	b672      	cpsid	i
 8001238:	e7fe      	b.n	8001238 <main+0x5d0>
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	00000060 	.word	0x00000060
	...
 8001250:	48000400 	.word	0x48000400
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	e000e100 	.word	0xe000e100
 800125c:	40004800 	.word	0x40004800
 8001260:	40004808 	.word	0x40004808
 8001264:	40021000 	.word	0x40021000
 8001268:	40001000 	.word	0x40001000
 800126c:	200002c0 	.word	0x200002c0
 8001270:	4002001c 	.word	0x4002001c
 8001274:	200001f8 	.word	0x200001f8
 8001278:	fdffff8f 	.word	0xfdffff8f
 800127c:	a0000104 	.word	0xa0000104
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001280:	4602      	mov	r2, r0
 8001282:	4601      	mov	r1, r0
 8001284:	200b      	movs	r0, #11
 8001286:	f002 fbd9 	bl	8003a3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800128a:	200b      	movs	r0, #11
 800128c:	f002 fc14 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001290:	462a      	mov	r2, r5
 8001292:	4629      	mov	r1, r5
 8001294:	200c      	movs	r0, #12
 8001296:	f002 fbd1 	bl	8003a3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800129a:	200c      	movs	r0, #12
 800129c:	f002 fc0c 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
	hspi1.Instance = SPI1;
 80012a0:	484d      	ldr	r0, [pc, #308]	; (80013d8 <main+0x770>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a2:	f8df c154 	ldr.w	ip, [pc, #340]	; 80013f8 <main+0x790>
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a6:	6085      	str	r5, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012ac:	e9c0 c300 	strd	ip, r3, [r0]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012b4:	60c3      	str	r3, [r0, #12]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012b6:	f44f 7a00 	mov.w	sl, #512	; 0x200
 80012ba:	2328      	movs	r3, #40	; 0x28
 80012bc:	e9c0 a306 	strd	sl, r3, [r0, #24]
	hspi1.Init.CRCPolynomial = 7;
 80012c0:	2307      	movs	r3, #7
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c2:	e9c0 5504 	strd	r5, r5, [r0, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c6:	e9c0 5508 	strd	r5, r5, [r0, #32]
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012ca:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ce:	6285      	str	r5, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80012d0:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d2:	f003 fbf3 	bl	8004abc <HAL_SPI_Init>
 80012d6:	b938      	cbnz	r0, 80012e8 <main+0x680>
	hcordic.Instance = CORDIC;
 80012d8:	4840      	ldr	r0, [pc, #256]	; (80013dc <main+0x774>)
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <main+0x778>)
 80012dc:	6003      	str	r3, [r0, #0]
	if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80012de:	f002 fad3 	bl	8003888 <HAL_CORDIC_Init>
 80012e2:	b118      	cbz	r0, 80012ec <main+0x684>
 80012e4:	b672      	cpsid	i
	while (1)
 80012e6:	e7fe      	b.n	80012e6 <main+0x67e>
 80012e8:	b672      	cpsid	i
 80012ea:	e7fe      	b.n	80012ea <main+0x682>
	htim1.Instance = TIM1;
 80012ec:	4d3d      	ldr	r5, [pc, #244]	; (80013e4 <main+0x77c>)
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <main+0x780>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	9024      	str	r0, [sp, #144]	; 0x90
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
 80012f6:	e9cd 002c 	strd	r0, r0, [sp, #176]	; 0xb0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fa:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	e9c5 0001 	strd	r0, r0, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 8001302:	e9c5 0004 	strd	r0, r0, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	61a8      	str	r0, [r5, #24]
	htim1.Instance = TIM1;
 8001308:	602b      	str	r3, [r5, #0]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130a:	4628      	mov	r0, r5
	htim1.Init.Period = 9999;
 800130c:	f242 730f 	movw	r3, #9999	; 0x270f
 8001310:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001312:	f003 fc7f 	bl	8004c14 <HAL_TIM_Base_Init>
 8001316:	b108      	cbz	r0, 800131c <main+0x6b4>
 8001318:	b672      	cpsid	i
	while (1)
 800131a:	e7fe      	b.n	800131a <main+0x6b2>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131c:	a92a      	add	r1, sp, #168	; 0xa8
 800131e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001324:	f003 fd4c 	bl	8004dc0 <HAL_TIM_ConfigClockSource>
 8001328:	b108      	cbz	r0, 800132e <main+0x6c6>
 800132a:	b672      	cpsid	i
	while (1)
 800132c:	e7fe      	b.n	800132c <main+0x6c4>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	9024      	str	r0, [sp, #144]	; 0x90
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001330:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001332:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001334:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001336:	a922      	add	r1, sp, #136	; 0x88
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001338:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133c:	f003 fe24 	bl	8004f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4605      	mov	r5, r0
 8001342:	b108      	cbz	r0, 8001348 <main+0x6e0>
 8001344:	b672      	cpsid	i
	while (1)
 8001346:	e7fe      	b.n	8001346 <main+0x6de>
	ADC_ChannelConfTypeDef sConfig = {0};
 8001348:	2220      	movs	r2, #32
 800134a:	4601      	mov	r1, r0
 800134c:	a82a      	add	r0, sp, #168	; 0xa8
 800134e:	f005 fde5 	bl	8006f1c <memset>
	hadc4.Instance = ADC4;
 8001352:	4f26      	ldr	r7, [pc, #152]	; (80013ec <main+0x784>)
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <main+0x788>)
	hadc4.Init.LowPowerAutoWait = DISABLE;
 8001356:	83bd      	strh	r5, [r7, #28]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001358:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800135c:	e9c7 2300 	strd	r2, r3, [r7]
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001360:	2304      	movs	r3, #4
 8001362:	61bb      	str	r3, [r7, #24]
	hadc4.Init.NbrOfConversion = 2;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001368:	4638      	mov	r0, r7
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800136a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	e9c7 5502 	strd	r5, r5, [r7, #8]
	hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001372:	e9c7 5804 	strd	r5, r8, [r7, #16]
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001376:	633e      	str	r6, [r7, #48]	; 0x30
	hadc4.Init.DMAContinuousRequests = ENABLE;
 8001378:	f887 8038 	strb.w	r8, [r7, #56]	; 0x38
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 800137c:	f887 5024 	strb.w	r5, [r7, #36]	; 0x24
	hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001380:	63fd      	str	r5, [r7, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 8001382:	f887 5040 	strb.w	r5, [r7, #64]	; 0x40
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001388:	f001 fd24 	bl	8002dd4 <HAL_ADC_Init>
 800138c:	b108      	cbz	r0, 8001392 <main+0x72a>
 800138e:	b672      	cpsid	i
	while (1)
 8001390:	e7fe      	b.n	8001390 <main+0x728>
	sConfig.Channel = ADC_CHANNEL_4;
 8001392:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <main+0x78c>)
 8001394:	2306      	movs	r3, #6
 8001396:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 800139a:	2207      	movs	r2, #7
 800139c:	237f      	movs	r3, #127	; 0x7f
 800139e:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013a2:	a92a      	add	r1, sp, #168	; 0xa8
	sConfig.Channel = ADC_CHANNEL_4;
 80013a4:	2204      	movs	r2, #4
 80013a6:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013a8:	4638      	mov	r0, r7
	sConfig.Channel = ADC_CHANNEL_4;
 80013aa:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013ae:	f001 fe87 	bl	80030c0 <HAL_ADC_ConfigChannel>
 80013b2:	b108      	cbz	r0, 80013b8 <main+0x750>
 80013b4:	b672      	cpsid	i
	while (1)
 80013b6:	e7fe      	b.n	80013b6 <main+0x74e>
	sConfig.Channel = ADC_CHANNEL_5;
 80013b8:	a305      	add	r3, pc, #20	; (adr r3, 80013d0 <main+0x768>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013be:	4638      	mov	r0, r7
 80013c0:	a92a      	add	r1, sp, #168	; 0xa8
	sConfig.Channel = ADC_CHANNEL_5;
 80013c2:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013c6:	f001 fe7b 	bl	80030c0 <HAL_ADC_ConfigChannel>
 80013ca:	b1b8      	cbz	r0, 80013fc <main+0x794>
 80013cc:	b672      	cpsid	i
	while (1)
 80013ce:	e7fe      	b.n	80013ce <main+0x766>
 80013d0:	14f00020 	.word	0x14f00020
 80013d4:	0000000c 	.word	0x0000000c
 80013d8:	20000258 	.word	0x20000258
 80013dc:	20000170 	.word	0x20000170
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	20000318 	.word	0x20000318
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	20000104 	.word	0x20000104
 80013f0:	50000500 	.word	0x50000500
 80013f4:	10c00010 	.word	0x10c00010
 80013f8:	40013000 	.word	0x40013000
	LED_init();
 80013fc:	f004 fc66 	bl	8005ccc <LED_init>
	KBD_init();
 8001400:	f004 fdd4 	bl	8005fac <KBD_init>
	SCI_init();
 8001404:	f004 fcb2 	bl	8005d6c <SCI_init>
	PSERV_init();
 8001408:	f005 f988 	bl	800671c <PSERV_init>
	PSERV_enable();
 800140c:	f005 f992 	bl	8006734 <PSERV_enable>
	JOY_init(&hadc4, &htim1);
 8001410:	49df      	ldr	r1, [pc, #892]	; (8001790 <main+0xb28>)
 8001412:	48e0      	ldr	r0, [pc, #896]	; (8001794 <main+0xb2c>)
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 8001414:	4de0      	ldr	r5, [pc, #896]	; (8001798 <main+0xb30>)
 8001416:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800179c <main+0xb34>
	sp[0].damadgedTime = 0; sp[0].damadgedTimeMax = 300000;
 800141a:	f8df a3ac 	ldr.w	sl, [pc, #940]	; 80017c8 <main+0xb60>
	JOY_init(&hadc4, &htim1);
 800141e:	f004 fd5b 	bl	8005ed8 <JOY_init>
	LCD_Init();
 8001422:	f004 ff81 	bl	8006328 <LCD_Init>
	LCD_uGUI_init();
 8001426:	f004 ffb3 	bl	8006390 <LCD_uGUI_init>
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 800142a:	4bdd      	ldr	r3, [pc, #884]	; (80017a0 <main+0xb38>)
 800142c:	681f      	ldr	r7, [r3, #0]
 800142e:	2600      	movs	r6, #0
 8001430:	4638      	mov	r0, r7
 8001432:	e9c5 6600 	strd	r6, r6, [r5]
 8001436:	f7ff f841 	bl	80004bc <__aeabi_i2d>
 800143a:	4bda      	ldr	r3, [pc, #872]	; (80017a4 <main+0xb3c>)
 800143c:	2200      	movs	r2, #0
 800143e:	4680      	mov	r8, r0
 8001440:	4689      	mov	r9, r1
 8001442:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001446:	f7ff f8a3 	bl	8000590 <__aeabi_dmul>
 800144a:	f7ff fb79 	bl	8000b40 <__aeabi_d2f>
 800144e:	ee07 7a90 	vmov	s15, r7
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	f04f 0b03 	mov.w	fp, #3
 800145a:	edc5 7a03 	vstr	s15, [r5, #12]
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 800145e:	4bd2      	ldr	r3, [pc, #840]	; (80017a8 <main+0xb40>)
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 8001460:	60a8      	str	r0, [r5, #8]
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 8001462:	2200      	movs	r2, #0
	sp[0].damadgedTime = 0; sp[0].damadgedTimeMax = 300000;
 8001464:	e9c5 b607 	strd	fp, r6, [r5, #28]
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 8001468:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 800146c:	ed85 8a05 	vstr	s16, [r5, #20]
 8001470:	ed85 8a06 	vstr	s16, [r5, #24]
	sp[0].damadgedTime = 0; sp[0].damadgedTimeMax = 300000;
 8001474:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 8001478:	4640      	mov	r0, r8
 800147a:	4649      	mov	r1, r9
 800147c:	f7ff f888 	bl	8000590 <__aeabi_dmul>
 8001480:	f7ff fb5e 	bl	8000b40 <__aeabi_d2f>
 8001484:	4bc9      	ldr	r3, [pc, #804]	; (80017ac <main+0xb44>)
 8001486:	6368      	str	r0, [r5, #52]	; 0x34
 8001488:	2200      	movs	r2, #0
 800148a:	4640      	mov	r0, r8
 800148c:	4649      	mov	r1, r9
 800148e:	f7ff f87f 	bl	8000590 <__aeabi_dmul>
 8001492:	f7ff fb55 	bl	8000b40 <__aeabi_d2f>
 8001496:	f8c5 b048 	str.w	fp, [r5, #72]	; 0x48
 800149a:	63a8      	str	r0, [r5, #56]	; 0x38
	sp[1].damadgedTime = 0; sp[1].damadgedTimeMax = 300000;
 800149c:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
	UG_FillFrame(0, 0, 40, s_height, C_BLACK);
 80014a0:	23f0      	movs	r3, #240	; 0xf0
 80014a2:	9600      	str	r6, [sp, #0]
 80014a4:	2228      	movs	r2, #40	; 0x28
 80014a6:	4631      	mov	r1, r6
 80014a8:	4630      	mov	r0, r6
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 80014aa:	ed85 8a10 	vstr	s16, [r5, #64]	; 0x40
 80014ae:	ed85 8a11 	vstr	s16, [r5, #68]	; 0x44
	sp[1].damadgedTime = 0; sp[1].damadgedTimeMax = 300000;
 80014b2:	64ee      	str	r6, [r5, #76]	; 0x4c
	UG_FillFrame(0, 0, 40, s_height, C_BLACK);
 80014b4:	f005 faa4 	bl	8006a00 <UG_FillFrame>
	UG_FillFrame(280, 0, 40, s_height+50, C_BLACK);
 80014b8:	9600      	str	r6, [sp, #0]
 80014ba:	f44f 7391 	mov.w	r3, #290	; 0x122
 80014be:	2228      	movs	r2, #40	; 0x28
 80014c0:	4631      	mov	r1, r6
 80014c2:	f44f 708c 	mov.w	r0, #280	; 0x118
 80014c6:	f005 fa9b 	bl	8006a00 <UG_FillFrame>
		UG_PutChar('F', 10, c*15, C_RED, C_BLACK);
 80014ca:	4622      	mov	r2, r4
 80014cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014d0:	210a      	movs	r1, #10
 80014d2:	2046      	movs	r0, #70	; 0x46
 80014d4:	9600      	str	r6, [sp, #0]
 80014d6:	f005 fcc9 	bl	8006e6c <UG_PutChar>
		UG_PutChar('R', 20, c*15, C_RED, C_BLACK);
 80014da:	4622      	mov	r2, r4
 80014dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e0:	2114      	movs	r1, #20
 80014e2:	2052      	movs	r0, #82	; 0x52
 80014e4:	9600      	str	r6, [sp, #0]
 80014e6:	f005 fcc1 	bl	8006e6c <UG_PutChar>
		UG_PutChar('I', 30, c*15, C_RED, C_BLACK);
 80014ea:	4622      	mov	r2, r4
 80014ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014f0:	211e      	movs	r1, #30
 80014f2:	2049      	movs	r0, #73	; 0x49
 80014f4:	9600      	str	r6, [sp, #0]
 80014f6:	f005 fcb9 	bl	8006e6c <UG_PutChar>
		UG_PutChar('F', 280+10, c*15, C_RED, C_BLACK);
 80014fa:	4622      	mov	r2, r4
 80014fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001500:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001504:	2046      	movs	r0, #70	; 0x46
 8001506:	9600      	str	r6, [sp, #0]
 8001508:	f005 fcb0 	bl	8006e6c <UG_PutChar>
		UG_PutChar('E', 280+20, c*15, C_RED, C_BLACK);
 800150c:	4622      	mov	r2, r4
 800150e:	9600      	str	r6, [sp, #0]
	for(int c = 0;c < 20;c++)
 8001510:	340f      	adds	r4, #15
		UG_PutChar('E', 280+20, c*15, C_RED, C_BLACK);
 8001512:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001516:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800151a:	2045      	movs	r0, #69	; 0x45
 800151c:	f005 fca6 	bl	8006e6c <UG_PutChar>
	for(int c = 0;c < 20;c++)
 8001520:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8001524:	d1d1      	bne.n	80014ca <main+0x862>
	TIMUT_stopwatch_set_time_mark(&sw);
 8001526:	a822      	add	r0, sp, #136	; 0x88
 8001528:	f005 fa10 	bl	800694c <TIMUT_stopwatch_set_time_mark>
			else if (angle > 2 * PI) angle = 0;
 800152c:	ed9f db90 	vldr	d13, [pc, #576]	; 8001770 <main+0xb08>
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 8001530:	ed9f fb91 	vldr	d15, [pc, #580]	; 8001778 <main+0xb10>
 8001534:	f8df a294 	ldr.w	sl, [pc, #660]	; 80017cc <main+0xb64>
			if (angle < 0) angle = 2 * PI;
 8001538:	eddf ca9d 	vldr	s25, [pc, #628]	; 80017b0 <main+0xb48>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 800153c:	eddf 8a9d 	vldr	s17, [pc, #628]	; 80017b4 <main+0xb4c>
				float lineOff = 50 - lineH / 2;
 8001540:	ed9f ca9d 	vldr	s24, [pc, #628]	; 80017b8 <main+0xb50>
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001544:	f8df b288 	ldr.w	fp, [pc, #648]	; 80017d0 <main+0xb68>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8001548:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
		if(TIMUT_stopwatch_has_X_ms_passed(&sw, 50))
 800154c:	2132      	movs	r1, #50	; 0x32
 800154e:	a822      	add	r0, sp, #136	; 0x88
 8001550:	f005 fa02 	bl	8006958 <TIMUT_stopwatch_has_X_ms_passed>
 8001554:	2800      	cmp	r0, #0
 8001556:	d0f9      	beq.n	800154c <main+0x8e4>
			KBD_scan();
 8001558:	f004 fd60 	bl	800601c <KBD_scan>
			if(JOY_get_axis_position(Y) < 40)
 800155c:	2001      	movs	r0, #1
 800155e:	f004 fcf1 	bl	8005f44 <JOY_get_axis_position>
 8001562:	2827      	cmp	r0, #39	; 0x27
				if(JOY_get_axis_position(X) < 40) angle += 0.1;
 8001564:	f04f 0000 	mov.w	r0, #0
			if(JOY_get_axis_position(Y) < 40)
 8001568:	f201 81ba 	bhi.w	80028e0 <main+0x1c78>
				if(JOY_get_axis_position(X) < 40) angle += 0.1;
 800156c:	f004 fcea 	bl	8005f44 <JOY_get_axis_position>
 8001570:	2827      	cmp	r0, #39	; 0x27
 8001572:	d80c      	bhi.n	800158e <main+0x926>
 8001574:	f8da 0000 	ldr.w	r0, [sl]
 8001578:	f7fe ffb2 	bl	80004e0 <__aeabi_f2d>
 800157c:	a380      	add	r3, pc, #512	; (adr r3, 8001780 <main+0xb18>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe fe4f 	bl	8000224 <__adddf3>
 8001586:	f7ff fadb 	bl	8000b40 <__aeabi_d2f>
 800158a:	f8ca 0000 	str.w	r0, [sl]
				if(JOY_get_axis_position(X) > 60) angle -= 0.1;
 800158e:	2000      	movs	r0, #0
 8001590:	f004 fcd8 	bl	8005f44 <JOY_get_axis_position>
 8001594:	283c      	cmp	r0, #60	; 0x3c
 8001596:	d90c      	bls.n	80015b2 <main+0x94a>
 8001598:	f8da 0000 	ldr.w	r0, [sl]
 800159c:	f7fe ffa0 	bl	80004e0 <__aeabi_f2d>
 80015a0:	a377      	add	r3, pc, #476	; (adr r3, 8001780 <main+0xb18>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7fe fe3b 	bl	8000220 <__aeabi_dsub>
 80015aa:	f7ff fac9 	bl	8000b40 <__aeabi_d2f>
 80015ae:	f8ca 0000 	str.w	r0, [sl]
			if (angle < 0) angle = 2 * PI;
 80015b2:	edda 7a00 	vldr	s15, [sl]
 80015b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	f101 8189 	bmi.w	80028d4 <main+0x1c6c>
			else if (angle > 2 * PI) angle = 0;
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f7fe ff8b 	bl	80004e0 <__aeabi_f2d>
 80015ca:	ec53 2b1d 	vmov	r2, r3, d13
 80015ce:	f7ff fa6f 	bl	8000ab0 <__aeabi_dcmpgt>
 80015d2:	b108      	cbz	r0, 80015d8 <main+0x970>
 80015d4:	edca ca00 	vstr	s25, [sl]
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80015d8:	f8da 0000 	ldr.w	r0, [sl]
 80015dc:	f7fe ff80 	bl	80004e0 <__aeabi_f2d>
 80015e0:	eeb0 1a4d 	vmov.f32	s2, s26
 80015e4:	eef0 1a6d 	vmov.f32	s3, s27
 80015e8:	ec41 0b10 	vmov	d0, r0, r1
 80015ec:	f006 fa6a 	bl	8007ac4 <fmod>
 80015f0:	a365      	add	r3, pc, #404	; (adr r3, 8001788 <main+0xb20>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	ec51 0b10 	vmov	r0, r1, d0
 80015fa:	f7fe ffc9 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80015fe:	f7ff fa9f 	bl	8000b40 <__aeabi_d2f>
 8001602:	ee00 0a10 	vmov	s0, r0
 8001606:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	bf88      	it	hi
 8001610:	eeb0 0a68 	vmovhi.f32	s0, s17
 8001614:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	bfb8      	it	lt
 800161e:	eeb0 0a48 	vmovlt.f32	s0, s16
 8001622:	201f      	movs	r0, #31
 8001624:	f005 fe00 	bl	8007228 <scalbnf>
 8001628:	f006 f9fc 	bl	8007a24 <roundf>
 800162c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001630:	a92a      	add	r1, sp, #168	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8001632:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 800163a:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 8001640:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 8001644:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 8001648:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 800164c:	f002 f936 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 8001650:	2300      	movs	r3, #0
 8001652:	aa1c      	add	r2, sp, #112	; 0x70
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	a91b      	add	r1, sp, #108	; 0x6c
 8001658:	2301      	movs	r3, #1
 800165a:	4658      	mov	r0, fp
 800165c:	f002 f954 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 8001660:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001662:	f7fe ff2b 	bl	80004bc <__aeabi_i2d>
 8001666:	ec41 0b10 	vmov	d0, r0, r1
 800166a:	f06f 001e 	mvn.w	r0, #30
 800166e:	f005 fc5d 	bl	8006f2c <ldexp>
 8001672:	ec51 0b10 	vmov	r0, r1, d0
 8001676:	f7ff fa63 	bl	8000b40 <__aeabi_d2f>
			else fCheckX = fCheck;
 800167a:	ee07 0a90 	vmov	s15, r0
 800167e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001686:	f8da 0000 	ldr.w	r0, [sl]
			else fCheckX = fCheck;
 800168a:	bf4c      	ite	mi
 800168c:	f06f 0504 	mvnmi.w	r5, #4
 8001690:	2505      	movpl	r5, #5
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001692:	f7fe ff25 	bl	80004e0 <__aeabi_f2d>
 8001696:	eeb0 1a4d 	vmov.f32	s2, s26
 800169a:	eef0 1a6d 	vmov.f32	s3, s27
 800169e:	ec41 0b10 	vmov	d0, r0, r1
 80016a2:	f006 fa0f 	bl	8007ac4 <fmod>
 80016a6:	a338      	add	r3, pc, #224	; (adr r3, 8001788 <main+0xb20>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	ec51 0b10 	vmov	r0, r1, d0
 80016b0:	f7fe ff6e 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80016b4:	f7ff fa44 	bl	8000b40 <__aeabi_d2f>
 80016b8:	ee00 0a10 	vmov	s0, r0
 80016bc:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	bf88      	it	hi
 80016c6:	eeb0 0a68 	vmovhi.f32	s0, s17
 80016ca:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	bfb8      	it	lt
 80016d4:	eeb0 0a48 	vmovlt.f32	s0, s16
 80016d8:	201f      	movs	r0, #31
 80016da:	f005 fda5 	bl	8007228 <scalbnf>
 80016de:	f006 f9a1 	bl	8007a24 <roundf>
 80016e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80016e6:	2400      	movs	r4, #0
 80016e8:	2301      	movs	r3, #1
 80016ea:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80016ee:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80016f6:	a92a      	add	r1, sp, #168	; 0xa8
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80016f8:	2360      	movs	r3, #96	; 0x60
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80016fa:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80016fc:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80016fe:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 8001702:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001706:	f002 f8d9 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 800170a:	2300      	movs	r3, #0
 800170c:	aa1c      	add	r2, sp, #112	; 0x70
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	a91b      	add	r1, sp, #108	; 0x6c
 8001712:	2301      	movs	r3, #1
 8001714:	4658      	mov	r0, fp
 8001716:	f002 f8f7 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 800171a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800171c:	f7fe fece 	bl	80004bc <__aeabi_i2d>
 8001720:	ec41 0b10 	vmov	d0, r0, r1
 8001724:	f06f 001e 	mvn.w	r0, #30
 8001728:	f005 fc00 	bl	8006f2c <ldexp>
 800172c:	ec51 0b10 	vmov	r0, r1, d0
 8001730:	f7ff fa06 	bl	8000b40 <__aeabi_d2f>
			else fCheckY = fCheck;
 8001734:	ee07 0a90 	vmov	s15, r0
 8001738:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if (JOY_get_axis_position(Y) > 60) {
 8001740:	f04f 0001 	mov.w	r0, #1
			else fCheckY = fCheck;
 8001744:	bf4c      	ite	mi
 8001746:	f06f 0404 	mvnmi.w	r4, #4
 800174a:	2405      	movpl	r4, #5
			if (JOY_get_axis_position(Y) > 60) {
 800174c:	f004 fbfa 	bl	8005f44 <JOY_get_axis_position>
 8001750:	283c      	cmp	r0, #60	; 0x3c
 8001752:	f241 80ba 	bls.w	80028ca <main+0x1c62>
				if(map[(int)py / 10][((int)px + fCheckX) / 10] == 0) px += 3 * cos_cordic(angle);
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <main+0xb54>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <main+0xb58>)
 800175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <main+0xb5c>)
 8001768:	ee17 2a90 	vmov	r2, s15
 800176c:	e032      	b.n	80017d4 <main+0xb6c>
 800176e:	bf00      	nop
 8001770:	f01b866e 	.word	0xf01b866e
 8001774:	401921f9 	.word	0x401921f9
	...
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fb99999 	.word	0x3fb99999
 8001788:	8e7adaf5 	.word	0x8e7adaf5
 800178c:	3fc45f31 	.word	0x3fc45f31
 8001790:	20000318 	.word	0x20000318
 8001794:	20000104 	.word	0x20000104
 8001798:	2001cb68 	.word	0x2001cb68
 800179c:	43000000 	.word	0x43000000
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	3ff80000 	.word	0x3ff80000
 80017a8:	40040000 	.word	0x40040000
 80017ac:	401e0000 	.word	0x401e0000
 80017b0:	00000000 	.word	0x00000000
 80017b4:	3f7fffff 	.word	0x3f7fffff
 80017b8:	42480000 	.word	0x42480000
 80017bc:	2000007c 	.word	0x2000007c
 80017c0:	20000078 	.word	0x20000078
 80017c4:	20000014 	.word	0x20000014
 80017c8:	000493e0 	.word	0x000493e0
 80017cc:	20000010 	.word	0x20000010
 80017d0:	20000170 	.word	0x20000170
 80017d4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80017d8:	210a      	movs	r1, #10
 80017da:	fb92 f2f1 	sdiv	r2, r2, r1
 80017de:	fb01 3202 	mla	r2, r1, r2, r3
 80017e2:	ee17 3a90 	vmov	r3, s15
 80017e6:	442b      	add	r3, r5
 80017e8:	fb93 f3f1 	sdiv	r3, r3, r1
 80017ec:	5cd6      	ldrb	r6, [r2, r3]
 80017ee:	2e00      	cmp	r6, #0
 80017f0:	f001 800e 	beq.w	8002810 <main+0x1ba8>
				if (map[((int)py + fCheckY) / 10][(int)px/ 10] == 0) py += 3 * sin_cordic(angle);
 80017f4:	4bdc      	ldr	r3, [pc, #880]	; (8001b68 <main+0xf00>)
 80017f6:	4add      	ldr	r2, [pc, #884]	; (8001b6c <main+0xf04>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	4bdc      	ldr	r3, [pc, #880]	; (8001b70 <main+0xf08>)
 80017fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	ee17 3a90 	vmov	r3, s15
 800180a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800180e:	210a      	movs	r1, #10
 8001810:	4423      	add	r3, r4
 8001812:	fb93 f3f1 	sdiv	r3, r3, r1
 8001816:	fb01 2303 	mla	r3, r1, r3, r2
 800181a:	ee17 2a90 	vmov	r2, s15
 800181e:	fb92 f2f1 	sdiv	r2, r2, r1
 8001822:	5c9e      	ldrb	r6, [r3, r2]
 8001824:	2e00      	cmp	r6, #0
 8001826:	f000 8778 	beq.w	800271a <main+0x1ab2>
			if (JOY_get_axis_position(Y) < 40) {
 800182a:	2001      	movs	r0, #1
 800182c:	f004 fb8a 	bl	8005f44 <JOY_get_axis_position>
 8001830:	2827      	cmp	r0, #39	; 0x27
 8001832:	f200 876d 	bhi.w	8002710 <main+0x1aa8>
				if (map[(int)py / 10][((int)px - fCheckX) / 10] == 0) px += -3 * cos_cordic(angle);
 8001836:	4bcc      	ldr	r3, [pc, #816]	; (8001b68 <main+0xf00>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	4bcc      	ldr	r3, [pc, #816]	; (8001b70 <main+0xf08>)
 800183e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	4bc9      	ldr	r3, [pc, #804]	; (8001b6c <main+0xf04>)
 8001848:	ee17 2a90 	vmov	r2, s15
 800184c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001850:	210a      	movs	r1, #10
 8001852:	fb92 f2f1 	sdiv	r2, r2, r1
 8001856:	fb01 3202 	mla	r2, r1, r2, r3
 800185a:	ee17 3a90 	vmov	r3, s15
 800185e:	1b5b      	subs	r3, r3, r5
 8001860:	fb93 f3f1 	sdiv	r3, r3, r1
 8001864:	5cd5      	ldrb	r5, [r2, r3]
 8001866:	2d00      	cmp	r5, #0
 8001868:	f000 86f5 	beq.w	8002656 <main+0x19ee>
				if (map[((int)py - fCheckY) / 10][(int)px / 10] == 0) py += -3 * sin_cordic(angle);
 800186c:	4bbe      	ldr	r3, [pc, #760]	; (8001b68 <main+0xf00>)
 800186e:	4abf      	ldr	r2, [pc, #764]	; (8001b6c <main+0xf04>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	4bbe      	ldr	r3, [pc, #760]	; (8001b70 <main+0xf08>)
 8001876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187a:	ed93 7a00 	vldr	s14, [r3]
 800187e:	ee17 3a90 	vmov	r3, s15
 8001882:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001886:	210a      	movs	r1, #10
 8001888:	1b1b      	subs	r3, r3, r4
 800188a:	fb93 f3f1 	sdiv	r3, r3, r1
 800188e:	fb01 2303 	mla	r3, r1, r3, r2
 8001892:	ee17 2a90 	vmov	r2, s15
 8001896:	fb92 f2f1 	sdiv	r2, r2, r1
 800189a:	5c9c      	ldrb	r4, [r3, r2]
 800189c:	2c00      	cmp	r4, #0
 800189e:	f000 867b 	beq.w	8002598 <main+0x1930>
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80018a2:	f8da 0000 	ldr.w	r0, [sl]
 80018a6:	f7fe fe1b 	bl	80004e0 <__aeabi_f2d>
 80018aa:	eeb0 1a4d 	vmov.f32	s2, s26
 80018ae:	eef0 1a6d 	vmov.f32	s3, s27
 80018b2:	ec41 0b10 	vmov	d0, r0, r1
 80018b6:	f006 f905 	bl	8007ac4 <fmod>
 80018ba:	a3a3      	add	r3, pc, #652	; (adr r3, 8001b48 <main+0xee0>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	ec51 0b10 	vmov	r0, r1, d0
 80018c4:	f7fe fe64 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80018c8:	f7ff f93a 	bl	8000b40 <__aeabi_d2f>
 80018cc:	ee00 0a10 	vmov	s0, r0
 80018d0:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	bf88      	it	hi
 80018da:	eeb0 0a68 	vmovhi.f32	s0, s17
 80018de:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	bfb8      	it	lt
 80018e8:	eeb0 0a48 	vmovlt.f32	s0, s16
 80018ec:	201f      	movs	r0, #31
 80018ee:	f005 fc9b 	bl	8007228 <scalbnf>
 80018f2:	f006 f897 	bl	8007a24 <roundf>
 80018f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80018fa:	a92a      	add	r1, sp, #168	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80018fc:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001904:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8001906:	2360      	movs	r3, #96	; 0x60
 8001908:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 800190a:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 800190e:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 8001912:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001916:	f001 ffd1 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 800191a:	2300      	movs	r3, #0
 800191c:	aa1c      	add	r2, sp, #112	; 0x70
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	a91b      	add	r1, sp, #108	; 0x6c
 8001922:	2301      	movs	r3, #1
 8001924:	4658      	mov	r0, fp
 8001926:	f001 ffef 	bl	8003908 <HAL_CORDIC_CalculateZO>
			float rokaPosX = px + roka * cos_cordic(angle);
 800192a:	4b91      	ldr	r3, [pc, #580]	; (8001b70 <main+0xf08>)
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 800192c:	f8da 0000 	ldr.w	r0, [sl]
			float rokaPosX = px + roka * cos_cordic(angle);
 8001930:	ed93 9a00 	vldr	s18, [r3]
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001934:	f7fe fdd4 	bl	80004e0 <__aeabi_f2d>
 8001938:	eeb0 1a4d 	vmov.f32	s2, s26
 800193c:	eef0 1a6d 	vmov.f32	s3, s27
 8001940:	ec41 0b10 	vmov	d0, r0, r1
 8001944:	f006 f8be 	bl	8007ac4 <fmod>
 8001948:	a37f      	add	r3, pc, #508	; (adr r3, 8001b48 <main+0xee0>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	ec51 0b10 	vmov	r0, r1, d0
 8001952:	f7fe fe1d 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8001956:	f7ff f8f3 	bl	8000b40 <__aeabi_d2f>
 800195a:	ee00 0a10 	vmov	s0, r0
 800195e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	bf88      	it	hi
 8001968:	eeb0 0a68 	vmovhi.f32	s0, s17
 800196c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	bfb8      	it	lt
 8001976:	eeb0 0a48 	vmovlt.f32	s0, s16
 800197a:	201f      	movs	r0, #31
 800197c:	f005 fc54 	bl	8007228 <scalbnf>
 8001980:	f006 f850 	bl	8007a24 <roundf>
 8001984:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 8001988:	2301      	movs	r3, #1
 800198a:	2400      	movs	r4, #0
 800198c:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8001990:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001998:	a92a      	add	r1, sp, #168	; 0xa8
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 800199a:	2360      	movs	r3, #96	; 0x60
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 800199c:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 800199e:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80019a0:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 80019a4:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	return q31_to_f32(out);
 80019a8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80019aa:	f001 ff87 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	aa1c      	add	r2, sp, #112	; 0x70
 80019b4:	2301      	movs	r3, #1
 80019b6:	a91b      	add	r1, sp, #108	; 0x6c
 80019b8:	4658      	mov	r0, fp
 80019ba:	f001 ffa5 	bl	8003908 <HAL_CORDIC_CalculateZO>
			float rokaPosY = py + roka * sin_cordic(angle);
 80019be:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <main+0xf00>)
	return q31_to_f32(out);
 80019c0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
			float rokaPosY = py + roka * sin_cordic(angle);
 80019c2:	edd3 9a00 	vldr	s19, [r3]
			if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 80019c6:	2000      	movs	r0, #0
 80019c8:	f004 fbb0 	bl	800612c <KBD_get_button_state>
 80019cc:	4605      	mov	r5, r0
 80019ce:	bbc8      	cbnz	r0, 8001a44 <main+0xddc>
	float out = ldexp((int32_t) x, -31);
 80019d0:	4630      	mov	r0, r6
 80019d2:	f7fe fd73 	bl	80004bc <__aeabi_i2d>
 80019d6:	ec41 0b10 	vmov	d0, r0, r1
 80019da:	f06f 001e 	mvn.w	r0, #30
 80019de:	f005 faa5 	bl	8006f2c <ldexp>
 80019e2:	ec51 0b10 	vmov	r0, r1, d0
 80019e6:	f7ff f8ab 	bl	8000b40 <__aeabi_d2f>
			float rokaPosY = py + roka * sin_cordic(angle);
 80019ea:	ee07 0a90 	vmov	s15, r0
 80019ee:	eeb1 aa08 	vmov.f32	s20, #24	; 0x40c00000  6.0
 80019f2:	eee7 9a8a 	vfma.f32	s19, s15, s20
			if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <main+0xf0c>)
 80019f8:	681e      	ldr	r6, [r3, #0]
 80019fa:	eefd 7ae9 	vcvt.s32.f32	s15, s19
	float out = ldexp((int32_t) x, -31);
 80019fe:	4620      	mov	r0, r4
			if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 8001a00:	ee17 3a90 	vmov	r3, s15
 8001a04:	fb93 f4f6 	sdiv	r4, r3, r6
	float out = ldexp((int32_t) x, -31);
 8001a08:	f7fe fd58 	bl	80004bc <__aeabi_i2d>
 8001a0c:	ec41 0b10 	vmov	d0, r0, r1
 8001a10:	f06f 001e 	mvn.w	r0, #30
 8001a14:	f005 fa8a 	bl	8006f2c <ldexp>
 8001a18:	ec51 0b10 	vmov	r0, r1, d0
 8001a1c:	f7ff f890 	bl	8000b40 <__aeabi_d2f>
			float rokaPosX = px + roka * cos_cordic(angle);
 8001a20:	ee07 0a90 	vmov	s15, r0
 8001a24:	eea7 9a8a 	vfma.f32	s18, s15, s20
			if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <main+0xf04>)
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8001a30:	fb02 3304 	mla	r3, r2, r4, r3
 8001a34:	ee17 2a90 	vmov	r2, s15
 8001a38:	fb92 f2f6 	sdiv	r2, r2, r6
 8001a3c:	5c99      	ldrb	r1, [r3, r2]
 8001a3e:	2903      	cmp	r1, #3
 8001a40:	bf08      	it	eq
 8001a42:	549d      	strbeq	r5, [r3, r2]
			else fCheckY = fCheck;
 8001a44:	eefb 7a0e 	vmov.f32	s15, #190	; 0xc1f00000 -30.0
 8001a48:	233c      	movs	r3, #60	; 0x3c
 8001a4a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001a4e:	930d      	str	r3, [sp, #52]	; 0x34
				float newAngle = z * DEGREE + angle;
 8001a50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001a52:	f7fe fd45 	bl	80004e0 <__aeabi_f2d>
 8001a56:	a33e      	add	r3, pc, #248	; (adr r3, 8001b50 <main+0xee8>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fd98 	bl	8000590 <__aeabi_dmul>
 8001a60:	4604      	mov	r4, r0
 8001a62:	460d      	mov	r5, r1
 8001a64:	f8da 0000 	ldr.w	r0, [sl]
 8001a68:	f7fe fd3a 	bl	80004e0 <__aeabi_f2d>
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	462b      	mov	r3, r5
 8001a70:	f7fe fbd8 	bl	8000224 <__adddf3>
 8001a74:	f7ff f864 	bl	8000b40 <__aeabi_d2f>
 8001a78:	ee0a 0a10 	vmov	s20, r0
				if (newAngle < 0) newAngle += 2 * PI;
 8001a7c:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	f100 8575 	bmi.w	8002572 <main+0x190a>
				else if (newAngle > 2 * PI) newAngle -= 2 * PI;
 8001a88:	f7fe fd2a 	bl	80004e0 <__aeabi_f2d>
 8001a8c:	ec53 2b1d 	vmov	r2, r3, d13
 8001a90:	4606      	mov	r6, r0
 8001a92:	460f      	mov	r7, r1
 8001a94:	f7ff f80c 	bl	8000ab0 <__aeabi_dcmpgt>
 8001a98:	b148      	cbz	r0, 8001aae <main+0xe46>
 8001a9a:	ec53 2b1d 	vmov	r2, r3, d13
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	4639      	mov	r1, r7
 8001aa2:	f7fe fbbd 	bl	8000220 <__aeabi_dsub>
 8001aa6:	f7ff f84b 	bl	8000b40 <__aeabi_d2f>
 8001aaa:	ee0a 0a10 	vmov	s20, r0
				float aTan = 1 / tanf(newAngle);
 8001aae:	eeb0 0a4a 	vmov.f32	s0, s20
 8001ab2:	f005 ffdb 	bl	8007a6c <tanf>
 8001ab6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
				if (newAngle >= PI) { //GLEDA GOR
 8001aba:	ee1a 0a10 	vmov	r0, s20
				float aTan = 1 / tanf(newAngle);
 8001abe:	ee87 9a80 	vdiv.f32	s18, s15, s0
 8001ac2:	eef0 9a40 	vmov.f32	s19, s0
				if (newAngle >= PI) { //GLEDA GOR
 8001ac6:	f7fe fd0b 	bl	80004e0 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ad2:	a321      	add	r3, pc, #132	; (adr r3, 8001b58 <main+0xef0>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe ffe0 	bl	8000a9c <__aeabi_dcmpge>
					rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <main+0xf00>)
				if (newAngle >= PI) { //GLEDA GOR
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	f000 8528 	beq.w	8002534 <main+0x18cc>
					rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 8001ae4:	edd3 aa00 	vldr	s21, [r3]
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <main+0xf0c>)
 8001aea:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8001aee:	681e      	ldr	r6, [r3, #0]
 8001af0:	ee17 0a90 	vmov	r0, s15
 8001af4:	fb90 f3f6 	sdiv	r3, r0, r6
 8001af8:	fb06 0313 	mls	r3, r6, r3, r0
 8001afc:	1ac0      	subs	r0, r0, r3
 8001afe:	f7fe fcdd 	bl	80004bc <__aeabi_i2d>
 8001b02:	a317      	add	r3, pc, #92	; (adr r3, 8001b60 <main+0xef8>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fb8a 	bl	8000220 <__aeabi_dsub>
 8001b0c:	f7ff f818 	bl	8000b40 <__aeabi_d2f>
					rvx = (py - rvy) * -aTan + px;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <main+0xf08>)
					rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 8001b12:	ee0e 0a10 	vmov	s28, r0
					dy = -Blocksize;
 8001b16:	4276      	negs	r6, r6
					rvx = (py - rvy) * -aTan + px;
 8001b18:	ee7e aa6a 	vsub.f32	s21, s28, s21
 8001b1c:	edd3 ea00 	vldr	s29, [r3]
					dy = -Blocksize;
 8001b20:	ee07 6a90 	vmov	s15, r6
					rvx = (py - rvy) * -aTan + px;
 8001b24:	eeea ea89 	vfma.f32	s29, s21, s18
					dy = -Blocksize;
 8001b28:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
					dx = dy * aTan;
 8001b2c:	ee69 6a06 	vmul.f32	s13, s18, s12
					wx = rvx / Blocksize;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <main+0xf0c>)
 8001b32:	681e      	ldr	r6, [r3, #0]
 8001b34:	ee07 6a90 	vmov	s15, r6
 8001b38:	eef8 aae7 	vcvt.f32.s32	s21, s15
 8001b3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b40:	eec7 baaa 	vdiv.f32	s23, s15, s21
 8001b44:	220f      	movs	r2, #15
 8001b46:	e017      	b.n	8001b78 <main+0xf10>
 8001b48:	8e7adaf5 	.word	0x8e7adaf5
 8001b4c:	3fc45f31 	.word	0x3fc45f31
 8001b50:	7707c94d 	.word	0x7707c94d
 8001b54:	3f91df46 	.word	0x3f91df46
 8001b58:	f01b866e 	.word	0xf01b866e
 8001b5c:	400921f9 	.word	0x400921f9
 8001b60:	eb1c432d 	.word	0xeb1c432d
 8001b64:	3f1a36e2 	.word	0x3f1a36e2
 8001b68:	2000007c 	.word	0x2000007c
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	20000078 	.word	0x20000078
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	ee6b 7aae 	vmul.f32	s15, s23, s29
					wy = rvy / Blocksize;
 8001b7c:	ee2b 7a8e 	vmul.f32	s14, s23, s28
					wx = rvx / Blocksize;
 8001b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b84:	ee17 3a90 	vmov	r3, s15
					if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[(int)wy][(int)wx] != 0) {
 8001b88:	2b09      	cmp	r3, #9
					wy = rvy / Blocksize;
 8001b8a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
					if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[(int)wy][(int)wx] != 0) {
 8001b8e:	f200 821a 	bhi.w	8001fc6 <main+0x135e>
 8001b92:	ee17 0a90 	vmov	r0, s15
 8001b96:	49ca      	ldr	r1, [pc, #808]	; (8001ec0 <main+0x1258>)
 8001b98:	270a      	movs	r7, #10
 8001b9a:	2809      	cmp	r0, #9
 8001b9c:	fb07 1100 	mla	r1, r7, r0, r1
 8001ba0:	f200 8211 	bhi.w	8001fc6 <main+0x135e>
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 820d 	beq.w	8001fc6 <main+0x135e>
						vmt = map[(int)wy][(int)wx];
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb4:	edcd 7a04 	vstr	s15, [sp, #16]
				d1 = sqrt((px - rvx) * (px - rvx) + (py - rvy) * (py - rvy));
 8001bb8:	4bc2      	ldr	r3, [pc, #776]	; (8001ec4 <main+0x125c>)
 8001bba:	ed93 9a00 	vldr	s18, [r3]
 8001bbe:	4bc2      	ldr	r3, [pc, #776]	; (8001ec8 <main+0x1260>)
 8001bc0:	ee79 7a4e 	vsub.f32	s15, s18, s28
 8001bc4:	ed93 ba00 	vldr	s22, [r3]
 8001bc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bcc:	ee3b 7a6e 	vsub.f32	s14, s22, s29
 8001bd0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fc82 	bl	80004e0 <__aeabi_f2d>
 8001bdc:	ec41 0b10 	vmov	d0, r0, r1
 8001be0:	f005 ff9e 	bl	8007b20 <sqrt>
 8001be4:	ec51 0b10 	vmov	r0, r1, d0
 8001be8:	f7fe ffaa 	bl	8000b40 <__aeabi_d2f>
				if (newAngle >= ((3 * PI) / 2) || newAngle <= PI / 2) { //GLEDA DESNO
 8001bec:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
				d1 = sqrt((px - rvx) * (px - rvx) + (py - rvy) * (py - rvy));
 8001bf0:	9006      	str	r0, [sp, #24]
				if (newAngle >= ((3 * PI) / 2) || newAngle <= PI / 2) { //GLEDA DESNO
 8001bf2:	a3a9      	add	r3, pc, #676	; (adr r3, 8001e98 <main+0x1230>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	4638      	mov	r0, r7
 8001bfa:	4641      	mov	r1, r8
 8001bfc:	f7fe ff4e 	bl	8000a9c <__aeabi_dcmpge>
 8001c00:	2800      	cmp	r0, #0
 8001c02:	f040 8456 	bne.w	80024b2 <main+0x184a>
 8001c06:	a3a6      	add	r3, pc, #664	; (adr r3, 8001ea0 <main+0x1238>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	4638      	mov	r0, r7
 8001c0e:	4641      	mov	r1, r8
 8001c10:	f7fe ff3a 	bl	8000a88 <__aeabi_dcmple>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	f040 844c 	bne.w	80024b2 <main+0x184a>
					rhx = (int)px - ((int)px % Blocksize) - 0.0001;
 8001c1a:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8001c1e:	ee17 0a90 	vmov	r0, s15
 8001c22:	fb90 f3f6 	sdiv	r3, r0, r6
 8001c26:	fb06 0313 	mls	r3, r6, r3, r0
 8001c2a:	1ac0      	subs	r0, r0, r3
 8001c2c:	f7fe fc46 	bl	80004bc <__aeabi_i2d>
 8001c30:	a39d      	add	r3, pc, #628	; (adr r3, 8001ea8 <main+0x1240>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe faf3 	bl	8000220 <__aeabi_dsub>
 8001c3a:	f7fe ff81 	bl	8000b40 <__aeabi_d2f>
 8001c3e:	ee07 0a90 	vmov	s15, r0
					dx = -Blocksize;
 8001c42:	4273      	negs	r3, r6
 8001c44:	ee0a 3a90 	vmov	s21, r3
					rhy = (px - rhx) * -nTan + py;
 8001c48:	ee37 7acb 	vsub.f32	s14, s15, s22
 8001c4c:	eef0 6a49 	vmov.f32	s13, s18
					dx = -Blocksize;
 8001c50:	eef8 aaea 	vcvt.f32.s32	s21, s21
					rhy = (px - rhx) * -nTan + py;
 8001c54:	eee9 6a87 	vfma.f32	s13, s19, s14
					dy = dx * nTan;
 8001c58:	ee69 4aaa 	vmul.f32	s9, s19, s21
				while (dof < 15) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 8001c5c:	230f      	movs	r3, #15
					wx = rhx / Blocksize;
 8001c5e:	ee2b 7aa7 	vmul.f32	s14, s23, s15
					wy = rhy / Blocksize;
 8001c62:	ee2b 5aa6 	vmul.f32	s10, s23, s13
					wx = rhx / Blocksize;
 8001c66:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					wy = rhy / Blocksize;
 8001c6a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
					wx = rhx / Blocksize;
 8001c6e:	ee17 1a10 	vmov	r1, s14
					if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[wy][wx] != 0) {
 8001c72:	2909      	cmp	r1, #9
 8001c74:	f200 819d 	bhi.w	8001fb2 <main+0x134a>
 8001c78:	ee15 0a10 	vmov	r0, s10
 8001c7c:	4a90      	ldr	r2, [pc, #576]	; (8001ec0 <main+0x1258>)
 8001c7e:	270a      	movs	r7, #10
 8001c80:	2809      	cmp	r0, #9
 8001c82:	fb07 2200 	mla	r2, r7, r0, r2
 8001c86:	f200 8194 	bhi.w	8001fb2 <main+0x134a>
 8001c8a:	5c52      	ldrb	r2, [r2, r1]
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	f000 8190 	beq.w	8001fb2 <main+0x134a>
						hmt = map[wy][wx];
 8001c92:	ee07 2a10 	vmov	s14, r2
 8001c96:	eef8 ba47 	vcvt.f32.u32	s23, s14
				d2 = sqrt((px - rhx) * (px - rhx) + (py - rhy) * (py - rhy));
 8001c9a:	ee39 9a66 	vsub.f32	s18, s18, s13
 8001c9e:	ee3b 6a67 	vsub.f32	s12, s22, s15
 8001ca2:	ee29 9a09 	vmul.f32	s18, s18, s18
 8001ca6:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8001caa:	eea6 9a06 	vfma.f32	s18, s12, s12
 8001cae:	edcd 7a08 	vstr	s15, [sp, #32]
 8001cb2:	ee19 0a10 	vmov	r0, s18
 8001cb6:	f7fe fc13 	bl	80004e0 <__aeabi_f2d>
 8001cba:	ec41 0b10 	vmov	d0, r0, r1
 8001cbe:	f005 ff2f 	bl	8007b20 <sqrt>
 8001cc2:	ec51 0b10 	vmov	r0, r1, d0
 8001cc6:	f7fe ff3b 	bl	8000b40 <__aeabi_d2f>
				if (d1 > d2) {
 8001cca:	ed9d 7a06 	vldr	s14, [sp, #24]
 8001cce:	eddd 7a08 	vldr	s15, [sp, #32]
 8001cd2:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
				d2 = sqrt((px - rhx) * (px - rhx) + (py - rhy) * (py - rhy));
 8001cd6:	ee09 0a90 	vmov	s19, r0
				if (d1 > d2) {
 8001cda:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	f300 8452 	bgt.w	800258a <main+0x1922>
 8001ce6:	eddd ba04 	vldr	s23, [sp, #16]
 8001cea:	eef0 6a4e 	vmov.f32	s13, s28
 8001cee:	eef0 7a6e 	vmov.f32	s15, s29
					d = d1;
 8001cf2:	eef0 9a47 	vmov.f32	s19, s14
				float shade = 1;
 8001cf6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
				float lineH = (Blocksize * 100) / (d * cos_cordic(z * DEGREE)); //POPRAVI FISHEYE
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	edcd 6a06 	vstr	s13, [sp, #24]
 8001d02:	edcd 7a04 	vstr	s15, [sp, #16]
 8001d06:	f7fe ff1b 	bl	8000b40 <__aeabi_d2f>
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001d0a:	f7fe fbe9 	bl	80004e0 <__aeabi_f2d>
 8001d0e:	eeb0 1a4d 	vmov.f32	s2, s26
 8001d12:	eef0 1a6d 	vmov.f32	s3, s27
 8001d16:	ec41 0b10 	vmov	d0, r0, r1
 8001d1a:	f005 fed3 	bl	8007ac4 <fmod>
 8001d1e:	a364      	add	r3, pc, #400	; (adr r3, 8001eb0 <main+0x1248>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	ec51 0b10 	vmov	r0, r1, d0
 8001d28:	f7fe fc32 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8001d2c:	f7fe ff08 	bl	8000b40 <__aeabi_d2f>
 8001d30:	ee00 0a10 	vmov	s0, r0
 8001d34:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	bf88      	it	hi
 8001d3e:	eeb0 0a68 	vmovhi.f32	s0, s17
 8001d42:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	bfb8      	it	lt
 8001d4c:	eeb0 0a48 	vmovlt.f32	s0, s16
 8001d50:	201f      	movs	r0, #31
 8001d52:	f005 fa69 	bl	8007228 <scalbnf>
 8001d56:	f005 fe65 	bl	8007a24 <roundf>
 8001d5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001d5e:	a92a      	add	r1, sp, #168	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8001d60:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001d68:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8001d6a:	2360      	movs	r3, #96	; 0x60
 8001d6c:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 8001d6e:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 8001d72:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 8001d76:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8001d7a:	f001 fd9f 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	aa1c      	add	r2, sp, #112	; 0x70
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	a91b      	add	r1, sp, #108	; 0x6c
 8001d86:	2301      	movs	r3, #1
 8001d88:	4658      	mov	r0, fp
 8001d8a:	f001 fdbd 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 8001d8e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001d90:	f7fe fb94 	bl	80004bc <__aeabi_i2d>
 8001d94:	ec41 0b10 	vmov	d0, r0, r1
 8001d98:	f06f 001e 	mvn.w	r0, #30
 8001d9c:	f005 f8c6 	bl	8006f2c <ldexp>
				float lineH = (Blocksize * 100) / (d * cos_cordic(z * DEGREE)); //POPRAVI FISHEYE
 8001da0:	2364      	movs	r3, #100	; 0x64
 8001da2:	fb03 f606 	mul.w	r6, r3, r6
 8001da6:	ee07 6a90 	vmov	s15, r6
	float out = ldexp((int32_t) x, -31);
 8001daa:	ec51 0b10 	vmov	r0, r1, d0
				float lineH = (Blocksize * 100) / (d * cos_cordic(z * DEGREE)); //POPRAVI FISHEYE
 8001dae:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
	float out = ldexp((int32_t) x, -31);
 8001db2:	f7fe fec5 	bl	8000b40 <__aeabi_d2f>
				float lineH = (Blocksize * 100) / (d * cos_cordic(z * DEGREE)); //POPRAVI FISHEYE
 8001db6:	ee07 0a90 	vmov	s15, r0
 8001dba:	ee67 9aa9 	vmul.f32	s19, s15, s19
				if (lineH > height) {
 8001dbe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001ecc <main+0x1264>
				float ty_step = 32.0f / (float)lineH; //ZATO DA SE TEKSTURA ENAKOMERNO PORAZDELI
 8001dc2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001ed0 <main+0x1268>
				if (lineH > height) {
 8001dc6:	eddd 6a06 	vldr	s13, [sp, #24]
				float lineH = (Blocksize * 100) / (d * cos_cordic(z * DEGREE)); //POPRAVI FISHEYE
 8001dca:	eec9 aa29 	vdiv.f32	s21, s18, s19
				if (lineH > height) {
 8001dce:	eef4 aac7 	vcmpe.f32	s21, s14
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				float ty_step = 32.0f / (float)lineH; //ZATO DA SE TEKSTURA ENAKOMERNO PORAZDELI
 8001dd6:	eec7 eaaa 	vdiv.f32	s29, s15, s21
				if (lineH > height) {
 8001dda:	eddd 7a04 	vldr	s15, [sp, #16]
 8001dde:	f340 83a6 	ble.w	800252e <main+0x18c6>
					ty_offset = (lineH - height) / 2.0f;
 8001de2:	ee7a 9ac7 	vsub.f32	s19, s21, s14
 8001de6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dea:	ee69 9a87 	vmul.f32	s19, s19, s14
					lineH = height;
 8001dee:	eddf aa37 	vldr	s21, [pc, #220]	; 8001ecc <main+0x1264>
				float scale = (float)Blocksize / 32.0f;
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <main+0x126c>)
 8001df4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8001ed8 <main+0x1270>
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	9304      	str	r3, [sp, #16]
 8001dfc:	ee07 3a10 	vmov	s14, r3
 8001e00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				float lineOff = 50 - lineH / 2;
 8001e04:	eeb0 ea4c 	vmov.f32	s28, s24
				float scale = (float)Blocksize / 32.0f;
 8001e08:	ee27 7a06 	vmul.f32	s14, s14, s12
				float lineOff = 50 - lineH / 2;
 8001e0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e10:	eeaa eac6 	vfms.f32	s28, s21, s12
				if (shade == 1) {
 8001e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e18:	eeb4 ba46 	vcmp.f32	s22, s12
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				float ty = ty_offset * ty_step; //+ (hmt - 1) * 32;
 8001e20:	ee69 9aae 	vmul.f32	s19, s19, s29
				if (shade == 1) {
 8001e24:	f040 835b 	bne.w	80024de <main+0x1876>
					tx = (int)(rx / scale) % 32;
 8001e28:	eec7 6a87 	vdiv.f32	s13, s15, s14
					if (newAngle < 2 * PI) tx = 31 - tx;
 8001e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
					tx = (int)(rx / scale) % 32;
 8001e30:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	425a      	negs	r2, r3
 8001e3a:	f002 021f 	and.w	r2, r2, #31
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	bf58      	it	pl
 8001e44:	4253      	negpl	r3, r2
 8001e46:	ee07 3a90 	vmov	s15, r3
					if (newAngle < 2 * PI) tx = 31 - tx;
 8001e4a:	ec53 2b1d 	vmov	r2, r3, d13
					tx = (int)(rx / scale) % 32;
 8001e4e:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
					if (newAngle < 2 * PI) tx = 31 - tx;
 8001e52:	f7fe fe0f 	bl	8000a74 <__aeabi_dcmplt>
 8001e56:	b118      	cbz	r0, 8001e60 <main+0x11f8>
					if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 8001e58:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
 8001e5c:	ee37 9ac9 	vsub.f32	s18, s15, s18
					int wallx = (int)((float)(z+30)*width/60);
 8001e60:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8001e64:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001edc <main+0x1274>
 8001e70:	ee67 7a87 	vmul.f32	s15, s15, s14
				for (int j = 0;j < lineH;j++) {
 8001e74:	f04f 0800 	mov.w	r8, #0
					wallx *= s_scale;
 8001e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7c:	ee17 0a90 	vmov	r0, s15
 8001e80:	f7fe fb1c 	bl	80004bc <__aeabi_i2d>
 8001e84:	a30c      	add	r3, pc, #48	; (adr r3, 8001eb8 <main+0x1250>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fb81 	bl	8000590 <__aeabi_dmul>
 8001e8e:	f7fe fe2f 	bl	8000af0 <__aeabi_d2iz>
 8001e92:	900c      	str	r0, [sp, #48]	; 0x30
 8001e94:	4605      	mov	r5, r0
				for (int j = 0;j < lineH;j++) {
 8001e96:	e04b      	b.n	8001f30 <main+0x12c8>
 8001e98:	7414a4d2 	.word	0x7414a4d2
 8001e9c:	4012d97b 	.word	0x4012d97b
 8001ea0:	f01b866e 	.word	0xf01b866e
 8001ea4:	3ff921f9 	.word	0x3ff921f9
 8001ea8:	eb1c432d 	.word	0xeb1c432d
 8001eac:	3f1a36e2 	.word	0x3f1a36e2
 8001eb0:	8e7adaf5 	.word	0x8e7adaf5
 8001eb4:	3fc45f31 	.word	0x3fc45f31
 8001eb8:	33333333 	.word	0x33333333
 8001ebc:	40033333 	.word	0x40033333
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	2000007c 	.word	0x2000007c
 8001ec8:	20000078 	.word	0x20000078
 8001ecc:	42c80000 	.word	0x42c80000
 8001ed0:	42000000 	.word	0x42000000
 8001ed4:	2000000c 	.word	0x2000000c
 8001ed8:	3d000000 	.word	0x3d000000
 8001edc:	3fd55556 	.word	0x3fd55556
					switch ((int)hmt)
 8001ee0:	2a01      	cmp	r2, #1
 8001ee2:	d07a      	beq.n	8001fda <main+0x1372>
 8001ee4:	2400      	movs	r4, #0
 8001ee6:	4627      	mov	r7, r4
 8001ee8:	46a1      	mov	r9, r4
					int wally = lineOff + j;
 8001eea:	ee37 7a0e 	vadd.f32	s14, s14, s28
					ty += ty_step;
 8001eee:	ee79 9aae 	vadd.f32	s19, s19, s29
					wally *= s_scale;
 8001ef2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
				for (int j = 0;j < lineH;j++) {
 8001ef6:	f108 0801 	add.w	r8, r8, #1
					wally *= s_scale;
 8001efa:	ee17 0a90 	vmov	r0, s15
 8001efe:	f7fe fadd 	bl	80004bc <__aeabi_i2d>
 8001f02:	a346      	add	r3, pc, #280	; (adr r3, 800201c <main+0x13b4>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb42 	bl	8000590 <__aeabi_dmul>
					narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8001f0c:	463a      	mov	r2, r7
					wally *= s_scale;
 8001f0e:	4606      	mov	r6, r0
 8001f10:	460f      	mov	r7, r1
					narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8001f12:	4648      	mov	r0, r9
 8001f14:	4621      	mov	r1, r4
 8001f16:	f004 fc75 	bl	8006804 <create_rgb>
					wally *= s_scale;
 8001f1a:	4639      	mov	r1, r7
					narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8001f1c:	b282      	uxth	r2, r0
					wally *= s_scale;
 8001f1e:	4630      	mov	r0, r6
					narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8001f20:	9204      	str	r2, [sp, #16]
					wally *= s_scale;
 8001f22:	f7fe fde5 	bl	8000af0 <__aeabi_d2iz>
					narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8001f26:	9a04      	ldr	r2, [sp, #16]
					wally *= s_scale;
 8001f28:	4601      	mov	r1, r0
					narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f004 fc36 	bl	800679c <narisi_velik_kvadrat_stene>
				for (int j = 0;j < lineH;j++) {
 8001f30:	ee07 8a90 	vmov	s15, r8
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					int pixel = ((int)ty * 32 + (int)tx) * 3;
 8001f38:	eefd 7ae9 	vcvt.s32.f32	s15, s19
				for (int j = 0;j < lineH;j++) {
 8001f3c:	eeb4 7aea 	vcmpe.f32	s14, s21
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d55b      	bpl.n	8001ffe <main+0x1396>
					int pixel = ((int)ty * 32 + (int)tx) * 3;
 8001f46:	eefd 6ac9 	vcvt.s32.f32	s13, s18
 8001f4a:	ee17 2a90 	vmov	r2, s15
 8001f4e:	ee16 3a90 	vmov	r3, s13
					switch ((int)hmt)
 8001f52:	eefd 7aeb 	vcvt.s32.f32	s15, s23
					int pixel = ((int)ty * 32 + (int)tx) * 3;
 8001f56:	eb03 1342 	add.w	r3, r3, r2, lsl #5
					switch ((int)hmt)
 8001f5a:	ee17 2a90 	vmov	r2, s15
 8001f5e:	2a02      	cmp	r2, #2
					int pixel = ((int)ty * 32 + (int)tx) * 3;
 8001f60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					switch ((int)hmt)
 8001f64:	d03b      	beq.n	8001fde <main+0x1376>
 8001f66:	2a03      	cmp	r2, #3
 8001f68:	d1ba      	bne.n	8001ee0 <main+0x1278>
						green = t_wood[pixel + 1] * shade;
 8001f6a:	4929      	ldr	r1, [pc, #164]	; (8002010 <main+0x13a8>)
 8001f6c:	18ca      	adds	r2, r1, r3
						red = t_wood[pixel + 0] * shade;
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	ee06 3a10 	vmov	s12, r3
						green = t_wood[pixel + 1] * shade;
 8001f74:	7853      	ldrb	r3, [r2, #1]
						red = t_wood[pixel + 0] * shade;
 8001f76:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
						green = t_wood[pixel + 1] * shade;
 8001f7a:	ee06 3a90 	vmov	s13, r3
						red = t_wood[pixel + 0] * shade;
 8001f7e:	ee26 6a0b 	vmul.f32	s12, s12, s22
						green = t_wood[pixel + 1] * shade;
 8001f82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
						blue = t_wood[pixel + 2] * shade;
 8001f86:	7893      	ldrb	r3, [r2, #2]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						green = t_wood[pixel + 1] * shade;
 8001f90:	ee66 6a8b 	vmul.f32	s13, s13, s22
						blue = t_wood[pixel + 2] * shade;
 8001f94:	ee67 7a8b 	vmul.f32	s15, s15, s22
						red = t_wood[pixel + 0] * shade;
 8001f98:	eebd 6ac6 	vcvt.s32.f32	s12, s12
						green = t_wood[pixel + 1] * shade;
 8001f9c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
						blue = t_wood[pixel + 2] * shade;
 8001fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						red = t_wood[pixel + 0] * shade;
 8001fa4:	ee16 9a10 	vmov	r9, s12
						green = t_wood[pixel + 1] * shade;
 8001fa8:	ee16 4a90 	vmov	r4, s13
						blue = t_wood[pixel + 2] * shade;
 8001fac:	ee17 7a90 	vmov	r7, s15
						break;
 8001fb0:	e79b      	b.n	8001eea <main+0x1282>
				while (dof < 15) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 8001fb2:	3b01      	subs	r3, #1
						rhx += dx;
 8001fb4:	ee77 7aaa 	vadd.f32	s15, s15, s21
						rhy += dy;
 8001fb8:	ee76 6aa4 	vadd.f32	s13, s13, s9
				while (dof < 15) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 8001fbc:	f47f ae4f 	bne.w	8001c5e <main+0xff6>
 8001fc0:	eef0 ba6c 	vmov.f32	s23, s25
 8001fc4:	e669      	b.n	8001c9a <main+0x1032>
				while (dof < 15) { //PREVER ALI SE KAM ZALETI V 15 KORAKIH
 8001fc6:	3a01      	subs	r2, #1
						rvx += dx;
 8001fc8:	ee7e eaa6 	vadd.f32	s29, s29, s13
						rvy += dy;
 8001fcc:	ee3e ea06 	vadd.f32	s28, s28, s12
				while (dof < 15) { //PREVER ALI SE KAM ZALETI V 15 KORAKIH
 8001fd0:	f47f add2 	bne.w	8001b78 <main+0xf10>
 8001fd4:	edcd ca04 	vstr	s25, [sp, #16]
 8001fd8:	e5ee      	b.n	8001bb8 <main+0xf50>
						green = t_brickWall[pixel + 1] * shade;
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <main+0x13ac>)
 8001fdc:	e7c6      	b.n	8001f6c <main+0x1304>
						red = t_wall[pixel + 0] * shade;
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <main+0x13b0>)
 8001fe0:	5cd1      	ldrb	r1, [r2, r3]
						green = t_wall[pixel + 1] * shade;
 8001fe2:	4413      	add	r3, r2
						red = t_wall[pixel + 0] * shade;
 8001fe4:	ee06 1a10 	vmov	s12, r1
						green = t_wall[pixel + 1] * shade;
 8001fe8:	785a      	ldrb	r2, [r3, #1]
						blue = t_wall[pixel + 2] * shade;
 8001fea:	789b      	ldrb	r3, [r3, #2]
						red = t_wall[pixel + 0] * shade;
 8001fec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
						green = t_wall[pixel + 1] * shade;
 8001ff0:	ee06 2a90 	vmov	s13, r2
						red = t_wall[pixel + 0] * shade;
 8001ff4:	ee26 6a0b 	vmul.f32	s12, s12, s22
						green = t_wall[pixel + 1] * shade;
 8001ff8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001ffc:	e7c4      	b.n	8001f88 <main+0x1320>
				for (int y = lineOff + lineH;y < height;y++) {
 8001ffe:	ee7a aa8e 	vadd.f32	s21, s21, s28
 8002002:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8002006:	ee17 9a90 	vmov	r9, s15
 800200a:	e20d      	b.n	8002428 <main+0x17c0>
 800200c:	f3af 8000 	nop.w
 8002010:	0800acd0 	.word	0x0800acd0
 8002014:	080088d0 	.word	0x080088d0
 8002018:	0800a0d0 	.word	0x0800a0d0
 800201c:	33333333 	.word	0x33333333
 8002020:	40033333 	.word	0x40033333
					else if (floorAngle > 2 * PI) floorAngle -= 2 * PI;
 8002024:	f7fe fa5c 	bl	80004e0 <__aeabi_f2d>
 8002028:	ec53 2b1d 	vmov	r2, r3, d13
 800202c:	4604      	mov	r4, r0
 800202e:	460d      	mov	r5, r1
 8002030:	f7fe fd3e 	bl	8000ab0 <__aeabi_dcmpgt>
 8002034:	b148      	cbz	r0, 800204a <main+0x13e2>
 8002036:	ec53 2b1d 	vmov	r2, r3, d13
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe f8ef 	bl	8000220 <__aeabi_dsub>
 8002042:	f7fe fd7d 	bl	8000b40 <__aeabi_d2f>
 8002046:	ee09 0a90 	vmov	s19, r0
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 800204a:	4be1      	ldr	r3, [pc, #900]	; (80023d0 <main+0x1768>)
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f7fe fa47 	bl	80004e0 <__aeabi_f2d>
 8002052:	a3d5      	add	r3, pc, #852	; (adr r3, 80023a8 <main+0x1740>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fa9a 	bl	8000590 <__aeabi_dmul>
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 800205c:	eeb0 1a4d 	vmov.f32	s2, s26
 8002060:	eef0 1a6d 	vmov.f32	s3, s27
 8002064:	ed9d 0b02 	vldr	d0, [sp, #8]
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 8002068:	ec41 0b1b 	vmov	d11, r0, r1
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 800206c:	f005 fd2a 	bl	8007ac4 <fmod>
 8002070:	a3cf      	add	r3, pc, #828	; (adr r3, 80023b0 <main+0x1748>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	ec51 0b10 	vmov	r0, r1, d0
 800207a:	f7fe fa89 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 800207e:	f7fe fd5f 	bl	8000b40 <__aeabi_d2f>
 8002082:	ee00 0a10 	vmov	s0, r0
 8002086:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	bf88      	it	hi
 8002090:	eeb0 0a68 	vmovhi.f32	s0, s17
 8002094:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209c:	bfb8      	it	lt
 800209e:	eeb0 0a48 	vmovlt.f32	s0, s16
 80020a2:	201f      	movs	r0, #31
 80020a4:	f005 f8c0 	bl	8007228 <scalbnf>
 80020a8:	f005 fcbc 	bl	8007a24 <roundf>
 80020ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80020b0:	2360      	movs	r3, #96	; 0x60
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80020b2:	ee17 6a90 	vmov	r6, s15
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80020b6:	a92a      	add	r1, sp, #168	; 0xa8
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80020b8:	0076      	lsls	r6, r6, #1
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80020ba:	4658      	mov	r0, fp
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80020bc:	961b      	str	r6, [sp, #108]	; 0x6c
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80020be:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 80020c0:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 80020c4:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 80020c8:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80020cc:	f001 fbf6 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 80020d0:	2300      	movs	r3, #0
 80020d2:	aa1c      	add	r2, sp, #112	; 0x70
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	a91b      	add	r1, sp, #108	; 0x6c
 80020d8:	2301      	movs	r3, #1
 80020da:	4658      	mov	r0, fp
 80020dc:	f001 fc14 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 80020e0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80020e2:	f7fe f9eb 	bl	80004bc <__aeabi_i2d>
 80020e6:	ec41 0b10 	vmov	d0, r0, r1
 80020ea:	f06f 001e 	mvn.w	r0, #30
 80020ee:	f004 ff1d 	bl	8006f2c <ldexp>
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 80020f2:	ee19 0a10 	vmov	r0, s18
	float out = ldexp((int32_t) x, -31);
 80020f6:	ed8d 0b08 	vstr	d0, [sp, #32]
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 80020fa:	f7fe f9f1 	bl	80004e0 <__aeabi_f2d>
 80020fe:	4604      	mov	r4, r0
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002100:	ee19 0a90 	vmov	r0, s19
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 8002104:	460d      	mov	r5, r1
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002106:	f7fe f9eb 	bl	80004e0 <__aeabi_f2d>
 800210a:	eeb0 1a4d 	vmov.f32	s2, s26
 800210e:	eef0 1a6d 	vmov.f32	s3, s27
 8002112:	ec41 0b10 	vmov	d0, r0, r1
 8002116:	f005 fcd5 	bl	8007ac4 <fmod>
 800211a:	a3a5      	add	r3, pc, #660	; (adr r3, 80023b0 <main+0x1748>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	ec51 0b10 	vmov	r0, r1, d0
 8002124:	f7fe fa34 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8002128:	f7fe fd0a 	bl	8000b40 <__aeabi_d2f>
 800212c:	ee00 0a10 	vmov	s0, r0
 8002130:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	bf88      	it	hi
 800213a:	eeb0 0a68 	vmovhi.f32	s0, s17
 800213e:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	bfb8      	it	lt
 8002148:	eeb0 0a48 	vmovlt.f32	s0, s16
 800214c:	201f      	movs	r0, #31
 800214e:	f005 f86b 	bl	8007228 <scalbnf>
 8002152:	f005 fc67 	bl	8007a24 <roundf>
 8002156:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 800215a:	2360      	movs	r3, #96	; 0x60
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 800215c:	ee17 7a90 	vmov	r7, s15
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002160:	a92a      	add	r1, sp, #168	; 0xa8
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002162:	007f      	lsls	r7, r7, #1
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002164:	4658      	mov	r0, fp
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002166:	971b      	str	r7, [sp, #108]	; 0x6c
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002168:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 800216a:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 800216e:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 8002172:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002176:	f001 fba1 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 800217a:	2300      	movs	r3, #0
 800217c:	aa1c      	add	r2, sp, #112	; 0x70
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	a91b      	add	r1, sp, #108	; 0x6c
 8002182:	2301      	movs	r3, #1
 8002184:	4658      	mov	r0, fp
 8002186:	f001 fbbf 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 800218a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800218c:	f7fe f996 	bl	80004bc <__aeabi_i2d>
 8002190:	ec41 0b10 	vmov	d0, r0, r1
 8002194:	f06f 001e 	mvn.w	r0, #30
 8002198:	f004 fec8 	bl	8006f2c <ldexp>
					ty = py / 0.3 + sin_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 800219c:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <main+0x176c>)
 800219e:	6818      	ldr	r0, [r3, #0]
	float out = ldexp((int32_t) x, -31);
 80021a0:	ed8d 0b06 	vstr	d0, [sp, #24]
					ty = py / 0.3 + sin_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 80021a4:	f7fe f99c 	bl	80004e0 <__aeabi_f2d>
 80021a8:	a37f      	add	r3, pc, #508	; (adr r3, 80023a8 <main+0x1740>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f9ef 	bl	8000590 <__aeabi_dmul>
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80021b2:	2200      	movs	r2, #0
					ty = py / 0.3 + sin_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 80021b4:	ec41 0b19 	vmov	d9, r0, r1
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80021b8:	2101      	movs	r1, #1
 80021ba:	e9cd 122a 	strd	r1, r2, [sp, #168]	; 0xa8
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80021be:	2360      	movs	r3, #96	; 0x60
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80021c0:	a92a      	add	r1, sp, #168	; 0xa8
 80021c2:	4658      	mov	r0, fp
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80021c4:	961b      	str	r6, [sp, #108]	; 0x6c
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80021c6:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80021c8:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 80021cc:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80021d0:	f001 fb74 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 80021d4:	2300      	movs	r3, #0
 80021d6:	a91c      	add	r1, sp, #112	; 0x70
 80021d8:	460a      	mov	r2, r1
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	a91b      	add	r1, sp, #108	; 0x6c
 80021de:	2301      	movs	r3, #1
 80021e0:	4658      	mov	r0, fp
 80021e2:	f001 fb91 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 80021e6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80021e8:	f7fe f968 	bl	80004bc <__aeabi_i2d>
 80021ec:	ec41 0b10 	vmov	d0, r0, r1
 80021f0:	f06f 001e 	mvn.w	r0, #30
 80021f4:	f004 fe9a 	bl	8006f2c <ldexp>
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80021f8:	2360      	movs	r3, #96	; 0x60
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80021fa:	a92a      	add	r1, sp, #168	; 0xa8
 80021fc:	4658      	mov	r0, fp
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80021fe:	971b      	str	r7, [sp, #108]	; 0x6c
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002200:	9330      	str	r3, [sp, #192]	; 0xc0
	float out = ldexp((int32_t) x, -31);
 8002202:	ec57 6b10 	vmov	r6, r7, d0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 8002206:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 800220a:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 800220e:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002212:	f001 fb53 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 8002216:	2300      	movs	r3, #0
 8002218:	a91c      	add	r1, sp, #112	; 0x70
 800221a:	460a      	mov	r2, r1
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	a91b      	add	r1, sp, #108	; 0x6c
 8002220:	2301      	movs	r3, #1
 8002222:	4658      	mov	r0, fp
 8002224:	f001 fb70 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 8002228:	981c      	ldr	r0, [sp, #112]	; 0x70
 800222a:	f7fe f947 	bl	80004bc <__aeabi_i2d>
 800222e:	ec41 0b10 	vmov	d0, r0, r1
 8002232:	f06f 001e 	mvn.w	r0, #30
 8002236:	f004 fe79 	bl	8006f2c <ldexp>
 800223a:	4639      	mov	r1, r7
 800223c:	4630      	mov	r0, r6
 800223e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8002242:	f7fe fc7d 	bl	8000b40 <__aeabi_d2f>
					ty = py / 0.3 + sin_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 8002246:	f7fe f94b 	bl	80004e0 <__aeabi_f2d>
 800224a:	a35b      	add	r3, pc, #364	; (adr r3, 80023b8 <main+0x1750>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f99e 	bl	8000590 <__aeabi_dmul>
 8002254:	4606      	mov	r6, r0
 8002256:	460f      	mov	r7, r1
	float out = ldexp((int32_t) x, -31);
 8002258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800225c:	f7fe fc70 	bl	8000b40 <__aeabi_d2f>
					ty = py / 0.3 + sin_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 8002260:	f7fe f93e 	bl	80004e0 <__aeabi_f2d>
 8002264:	4622      	mov	r2, r4
 8002266:	462b      	mov	r3, r5
 8002268:	f7fe f992 	bl	8000590 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4630      	mov	r0, r6
 8002272:	4639      	mov	r1, r7
 8002274:	f7fe fab6 	bl	80007e4 <__aeabi_ddiv>
 8002278:	ec53 2b19 	vmov	r2, r3, d9
 800227c:	f7fd ffd2 	bl	8000224 <__adddf3>
 8002280:	f7fe fc5e 	bl	8000b40 <__aeabi_d2f>
 8002284:	ee07 0a90 	vmov	s15, r0
					int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 8002288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	float out = ldexp((int32_t) x, -31);
 800228c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
					int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 8002290:	ee17 8a90 	vmov	r8, s15
	float out = ldexp((int32_t) x, -31);
 8002294:	f7fe fc54 	bl	8000b40 <__aeabi_d2f>
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 8002298:	f7fe f922 	bl	80004e0 <__aeabi_f2d>
 800229c:	a346      	add	r3, pc, #280	; (adr r3, 80023b8 <main+0x1750>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe f975 	bl	8000590 <__aeabi_dmul>
 80022a6:	4606      	mov	r6, r0
 80022a8:	460f      	mov	r7, r1
	float out = ldexp((int32_t) x, -31);
 80022aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80022ae:	f7fe fc47 	bl	8000b40 <__aeabi_d2f>
					tx = px / 0.3 + cos_cordic(newAngle) * 57.735 * 32 / dy / cos_cordic(floorAngle);
 80022b2:	f7fe f915 	bl	80004e0 <__aeabi_f2d>
 80022b6:	4622      	mov	r2, r4
 80022b8:	462b      	mov	r3, r5
 80022ba:	f7fe f969 	bl	8000590 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4630      	mov	r0, r6
 80022c4:	4639      	mov	r1, r7
 80022c6:	f7fe fa8d 	bl	80007e4 <__aeabi_ddiv>
 80022ca:	ec53 2b1b 	vmov	r2, r3, d11
 80022ce:	f7fd ffa9 	bl	8000224 <__adddf3>
 80022d2:	f7fe fc35 	bl	8000b40 <__aeabi_d2f>
					int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 80022d6:	ee07 0a90 	vmov	s15, r0
 80022da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022de:	f008 081f 	and.w	r8, r8, #31
 80022e2:	ee17 3a90 	vmov	r3, s15
 80022e6:	ea4f 1848 	mov.w	r8, r8, lsl #5
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	4498      	add	r8, r3
 80022f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int blue = t_floor[pixel + 2] * 0.7;
 80022f4:	4c38      	ldr	r4, [pc, #224]	; (80023d8 <main+0x1770>)
 80022f6:	f108 0702 	add.w	r7, r8, #2
					int green = t_floor[pixel + 1] * 0.7;
 80022fa:	f108 0601 	add.w	r6, r8, #1
					int blue = t_floor[pixel + 2] * 0.7;
 80022fe:	5de0      	ldrb	r0, [r4, r7]
 8002300:	f7fe f8dc 	bl	80004bc <__aeabi_i2d>
 8002304:	a32e      	add	r3, pc, #184	; (adr r3, 80023c0 <main+0x1758>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f941 	bl	8000590 <__aeabi_dmul>
 800230e:	f7fe fbef 	bl	8000af0 <__aeabi_d2iz>
 8002312:	4605      	mov	r5, r0
					int green = t_floor[pixel + 1] * 0.7;
 8002314:	5da0      	ldrb	r0, [r4, r6]
 8002316:	f7fe f8d1 	bl	80004bc <__aeabi_i2d>
 800231a:	a329      	add	r3, pc, #164	; (adr r3, 80023c0 <main+0x1758>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f936 	bl	8000590 <__aeabi_dmul>
 8002324:	f7fe fbe4 	bl	8000af0 <__aeabi_d2iz>
					int red = t_floor[pixel + 0] * 0.7;
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <main+0x1770>)
					int green = t_floor[pixel + 1] * 0.7;
 800232a:	4604      	mov	r4, r0
					int red = t_floor[pixel + 0] * 0.7;
 800232c:	f813 0008 	ldrb.w	r0, [r3, r8]
 8002330:	f7fe f8c4 	bl	80004bc <__aeabi_i2d>
 8002334:	a322      	add	r3, pc, #136	; (adr r3, 80023c0 <main+0x1758>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fe f929 	bl	8000590 <__aeabi_dmul>
 800233e:	f7fe fbd7 	bl	8000af0 <__aeabi_d2iz>
					narisi_velik_kvadrat_stene(tlax, tlay, create_rgb(red, green, blue));
 8002342:	462a      	mov	r2, r5
 8002344:	4621      	mov	r1, r4
 8002346:	f004 fa5d 	bl	8006804 <create_rgb>
 800234a:	b284      	uxth	r4, r0
					tlay *= s_scale;
 800234c:	4648      	mov	r0, r9
 800234e:	f7fe f8b5 	bl	80004bc <__aeabi_i2d>
 8002352:	a31d      	add	r3, pc, #116	; (adr r3, 80023c8 <main+0x1760>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f91a 	bl	8000590 <__aeabi_dmul>
 800235c:	f7fe fbc8 	bl	8000af0 <__aeabi_d2iz>
					narisi_velik_kvadrat_stene(tlax, tlay, create_rgb(red, green, blue));
 8002360:	ed9d 9a0c 	vldr	s18, [sp, #48]	; 0x30
 8002364:	4622      	mov	r2, r4
					blue = t_wall[pixel + 2] * 0.7;
 8002366:	4c1d      	ldr	r4, [pc, #116]	; (80023dc <main+0x1774>)
					tlay *= s_scale;
 8002368:	4601      	mov	r1, r0
					narisi_velik_kvadrat_stene(tlax, tlay, create_rgb(red, green, blue));
 800236a:	ee19 0a10 	vmov	r0, s18
 800236e:	f004 fa15 	bl	800679c <narisi_velik_kvadrat_stene>
					blue = t_wall[pixel + 2] * 0.7;
 8002372:	5de0      	ldrb	r0, [r4, r7]
 8002374:	f7fe f8a2 	bl	80004bc <__aeabi_i2d>
 8002378:	a311      	add	r3, pc, #68	; (adr r3, 80023c0 <main+0x1758>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f907 	bl	8000590 <__aeabi_dmul>
 8002382:	f7fe fbb5 	bl	8000af0 <__aeabi_d2iz>
 8002386:	4605      	mov	r5, r0
					green = t_wall[pixel + 1] * 0.7;
 8002388:	5da0      	ldrb	r0, [r4, r6]
 800238a:	f7fe f897 	bl	80004bc <__aeabi_i2d>
 800238e:	a30c      	add	r3, pc, #48	; (adr r3, 80023c0 <main+0x1758>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f8fc 	bl	8000590 <__aeabi_dmul>
 8002398:	f7fe fbaa 	bl	8000af0 <__aeabi_d2iz>
 800239c:	4627      	mov	r7, r4
 800239e:	4604      	mov	r4, r0
 80023a0:	e01e      	b.n	80023e0 <main+0x1778>
 80023a2:	bf00      	nop
 80023a4:	f3af 8000 	nop.w
 80023a8:	aaaaaaab 	.word	0xaaaaaaab
 80023ac:	400aaaaa 	.word	0x400aaaaa
 80023b0:	8e7adaf5 	.word	0x8e7adaf5
 80023b4:	3fc45f31 	.word	0x3fc45f31
 80023b8:	7ae147ae 	.word	0x7ae147ae
 80023bc:	409cde14 	.word	0x409cde14
 80023c0:	66666666 	.word	0x66666666
 80023c4:	3fe66666 	.word	0x3fe66666
 80023c8:	33333333 	.word	0x33333333
 80023cc:	40033333 	.word	0x40033333
 80023d0:	20000078 	.word	0x20000078
 80023d4:	2000007c 	.word	0x2000007c
 80023d8:	080094d0 	.word	0x080094d0
 80023dc:	0800a0d0 	.word	0x0800a0d0
					red = t_wall[pixel + 0] * 0.7;
 80023e0:	f817 0008 	ldrb.w	r0, [r7, r8]
 80023e4:	f7fe f86a 	bl	80004bc <__aeabi_i2d>
 80023e8:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f8ce 	bl	8000590 <__aeabi_dmul>
 80023f4:	f7fe fb7c 	bl	8000af0 <__aeabi_d2iz>
					narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 80023f8:	462a      	mov	r2, r5
 80023fa:	4621      	mov	r1, r4
 80023fc:	f004 fa02 	bl	8006804 <create_rgb>
 8002400:	b284      	uxth	r4, r0
					stropy *= s_scale;
 8002402:	f1c9 0064 	rsb	r0, r9, #100	; 0x64
 8002406:	f7fe f859 	bl	80004bc <__aeabi_i2d>
 800240a:	a3ff      	add	r3, pc, #1020	; (adr r3, 8002808 <main+0x1ba0>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f8be 	bl	8000590 <__aeabi_dmul>
 8002414:	f7fe fb6c 	bl	8000af0 <__aeabi_d2iz>
					narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 8002418:	4622      	mov	r2, r4
					stropy *= s_scale;
 800241a:	4601      	mov	r1, r0
					narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 800241c:	ee19 0a10 	vmov	r0, s18
				for (int y = lineOff + lineH;y < height;y++) {
 8002420:	f109 0901 	add.w	r9, r9, #1
					narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 8002424:	f004 f9ba 	bl	800679c <narisi_velik_kvadrat_stene>
				for (int y = lineOff + lineH;y < height;y++) {
 8002428:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 800242c:	dc1c      	bgt.n	8002468 <main+0x1800>
					float floorAngle = (angle - newAngle);
 800242e:	edda 9a00 	vldr	s19, [sl]
					float dy = y - (height / 2.0f);
 8002432:	ee07 9a90 	vmov	s15, r9
					float floorAngle = (angle - newAngle);
 8002436:	ee79 9aca 	vsub.f32	s19, s19, s20
					float dy = y - (height / 2.0f);
 800243a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
					if (floorAngle < 0) floorAngle += 2 * PI;
 800243e:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					float dy = y - (height / 2.0f);
 8002446:	ee39 9a4c 	vsub.f32	s18, s18, s24
					if (floorAngle < 0) floorAngle += 2 * PI;
 800244a:	ee19 0a90 	vmov	r0, s19
 800244e:	f57f ade9 	bpl.w	8002024 <main+0x13bc>
 8002452:	f7fe f845 	bl	80004e0 <__aeabi_f2d>
 8002456:	ec53 2b1d 	vmov	r2, r3, d13
 800245a:	f7fd fee3 	bl	8000224 <__adddf3>
 800245e:	f7fe fb6f 	bl	8000b40 <__aeabi_d2f>
 8002462:	ee09 0a90 	vmov	s19, r0
 8002466:	e5f0      	b.n	800204a <main+0x13e2>
			for (float z = -30;z < 30;z+=1) { //LOOPEJ OD - 30STOPINJ DO 30 STOPINJ
 8002468:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800246c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800246e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002476:	3b01      	subs	r3, #1
 8002478:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 800247c:	930d      	str	r3, [sp, #52]	; 0x34
 800247e:	f47f aae7 	bne.w	8001a50 <main+0xde8>
			drawGun();
 8002482:	f004 f9c9 	bl	8006818 <drawGun>
			ILI9341_SetDisplayWindow(40, 0, 240, 240);
 8002486:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002488:	23f0      	movs	r3, #240	; 0xf0
 800248a:	4621      	mov	r1, r4
 800248c:	2028      	movs	r0, #40	; 0x28
 800248e:	461a      	mov	r2, r3
 8002490:	f004 f822 	bl	80064d8 <ILI9341_SetDisplayWindow>
			if(ILI9341_SendData(pixels, 57600)) LED_on(LED0);
 8002494:	48d6      	ldr	r0, [pc, #856]	; (80027f0 <main+0x1b88>)
 8002496:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800249a:	f003 ffc7 	bl	800642c <ILI9341_SendData>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d077      	beq.n	8002592 <main+0x192a>
 80024a2:	4620      	mov	r0, r4
 80024a4:	f003 fc3c 	bl	8005d20 <LED_on>
			TIMUT_stopwatch_set_time_mark(&sw);
 80024a8:	a822      	add	r0, sp, #136	; 0x88
 80024aa:	f004 fa4f 	bl	800694c <TIMUT_stopwatch_set_time_mark>
 80024ae:	f7ff b84d 	b.w	800154c <main+0x8e4>
					rhx = (int)px - ((int)px % Blocksize) + Blocksize;
 80024b2:	eefd 7acb 	vcvt.s32.f32	s15, s22
					rhy = (px - rhx) * -nTan + py;
 80024b6:	eef0 6a49 	vmov.f32	s13, s18
					rhx = (int)px - ((int)px % Blocksize) + Blocksize;
 80024ba:	ee17 3a90 	vmov	r3, s15
 80024be:	fb93 f3f6 	sdiv	r3, r3, r6
 80024c2:	fb06 6303 	mla	r3, r6, r3, r6
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					dy = dx * nTan;
 80024ce:	ee69 4aaa 	vmul.f32	s9, s19, s21
					rhy = (px - rhx) * -nTan + py;
 80024d2:	ee37 7acb 	vsub.f32	s14, s15, s22
 80024d6:	eee9 6a87 	vfma.f32	s13, s19, s14
					dy = dx * nTan;
 80024da:	f7ff bbbf 	b.w	8001c5c <main+0xff4>
					tx = (int)(ry / scale) % 32;
 80024de:	eec6 7a87 	vdiv.f32	s15, s13, s14
					if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 80024e2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
					tx = (int)(ry / scale) % 32;
 80024ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ee:	ee17 3a90 	vmov	r3, s15
 80024f2:	425a      	negs	r2, r3
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	bf58      	it	pl
 80024fe:	4253      	negpl	r3, r2
 8002500:	ee07 3a90 	vmov	s15, r3
					if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 8002504:	a3b4      	add	r3, pc, #720	; (adr r3, 80027d8 <main+0x1b70>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
					tx = (int)(ry / scale) % 32;
 800250a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
					if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 800250e:	f7fe facf 	bl	8000ab0 <__aeabi_dcmpgt>
 8002512:	2800      	cmp	r0, #0
 8002514:	f43f aca4 	beq.w	8001e60 <main+0x11f8>
 8002518:	a3b1      	add	r3, pc, #708	; (adr r3, 80027e0 <main+0x1b78>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	4620      	mov	r0, r4
 8002520:	4629      	mov	r1, r5
 8002522:	f7fe faa7 	bl	8000a74 <__aeabi_dcmplt>
 8002526:	2800      	cmp	r0, #0
 8002528:	f43f ac9a 	beq.w	8001e60 <main+0x11f8>
 800252c:	e494      	b.n	8001e58 <main+0x11f0>
				float ty_offset = 0; //ZATO DA SE TEKSTURE LEPO PORAZDELIJO
 800252e:	eef0 9a6c 	vmov.f32	s19, s25
 8002532:	e45e      	b.n	8001df2 <main+0x118a>
					rvy = (int)py - ((int)py % Blocksize) + Blocksize;
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	4bae      	ldr	r3, [pc, #696]	; (80027f4 <main+0x1b8c>)
 800253a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	ee17 3a10 	vmov	r3, s14
 8002544:	fb93 f3f2 	sdiv	r3, r3, r2
 8002548:	fb02 2303 	mla	r3, r2, r3, r2
 800254c:	ee07 3a10 	vmov	s14, r3
					rvx = (py - rvy) * -aTan + px;
 8002550:	4ba9      	ldr	r3, [pc, #676]	; (80027f8 <main+0x1b90>)
					rvy = (int)py - ((int)py % Blocksize) + Blocksize;
 8002552:	eeb8 eac7 	vcvt.f32.s32	s28, s14
					dy = Blocksize;
 8002556:	ee07 2a10 	vmov	s14, r2
					rvx = (py - rvy) * -aTan + px;
 800255a:	edd3 ea00 	vldr	s29, [r3]
 800255e:	ee7e 7a67 	vsub.f32	s15, s28, s15
					dy = Blocksize;
 8002562:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
					rvx = (py - rvy) * -aTan + px;
 8002566:	eee7 ea89 	vfma.f32	s29, s15, s18
					dx = dy * aTan;
 800256a:	ee69 6a06 	vmul.f32	s13, s18, s12
 800256e:	f7ff badf 	b.w	8001b30 <main+0xec8>
				if (newAngle < 0) newAngle += 2 * PI;
 8002572:	f7fd ffb5 	bl	80004e0 <__aeabi_f2d>
 8002576:	ec53 2b1d 	vmov	r2, r3, d13
 800257a:	f7fd fe53 	bl	8000224 <__adddf3>
 800257e:	f7fe fadf 	bl	8000b40 <__aeabi_d2f>
 8002582:	ee0a 0a10 	vmov	s20, r0
 8002586:	f7ff ba92 	b.w	8001aae <main+0xe46>
					shade = 0.5;
 800258a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 800258e:	f7ff bbb4 	b.w	8001cfa <main+0x1092>
			else LED_off(LED0);
 8002592:	f003 fbcf 	bl	8005d34 <LED_off>
 8002596:	e787      	b.n	80024a8 <main+0x1840>
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002598:	f8da 0000 	ldr.w	r0, [sl]
 800259c:	f7fd ffa0 	bl	80004e0 <__aeabi_f2d>
 80025a0:	eeb0 1a4d 	vmov.f32	s2, s26
 80025a4:	eef0 1a6d 	vmov.f32	s3, s27
 80025a8:	ec41 0b10 	vmov	d0, r0, r1
 80025ac:	f005 fa8a 	bl	8007ac4 <fmod>
 80025b0:	a38d      	add	r3, pc, #564	; (adr r3, 80027e8 <main+0x1b80>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	ec51 0b10 	vmov	r0, r1, d0
 80025ba:	f7fd ffe9 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80025be:	f7fe fabf 	bl	8000b40 <__aeabi_d2f>
 80025c2:	ee00 0a10 	vmov	s0, r0
 80025c6:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80025ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ce:	bf88      	it	hi
 80025d0:	eeb0 0a68 	vmovhi.f32	s0, s17
 80025d4:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	bfb8      	it	lt
 80025de:	eeb0 0a48 	vmovlt.f32	s0, s16
 80025e2:	201f      	movs	r0, #31
 80025e4:	f004 fe20 	bl	8007228 <scalbnf>
 80025e8:	f005 fa1c 	bl	8007a24 <roundf>
 80025ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 80025f0:	2201      	movs	r2, #1
 80025f2:	2300      	movs	r3, #0
 80025f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80025f8:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002600:	a92a      	add	r1, sp, #168	; 0xa8
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002602:	2360      	movs	r3, #96	; 0x60
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002604:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002606:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 8002608:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 800260c:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002610:	f001 f954 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 8002614:	2301      	movs	r3, #1
 8002616:	aa1c      	add	r2, sp, #112	; 0x70
 8002618:	a91b      	add	r1, sp, #108	; 0x6c
 800261a:	9400      	str	r4, [sp, #0]
 800261c:	4658      	mov	r0, fp
 800261e:	f001 f973 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 8002622:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002624:	f7fd ff4a 	bl	80004bc <__aeabi_i2d>
 8002628:	ec41 0b10 	vmov	d0, r0, r1
 800262c:	f06f 001e 	mvn.w	r0, #30
 8002630:	f004 fc7c 	bl	8006f2c <ldexp>
 8002634:	ec51 0b10 	vmov	r0, r1, d0
 8002638:	f7fe fa82 	bl	8000b40 <__aeabi_d2f>
				if (map[((int)py - fCheckY) / 10][(int)px / 10] == 0) py += -3 * sin_cordic(angle);
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <main+0x1b94>)
 800263e:	ee06 0a90 	vmov	s13, r0
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800264a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800264e:	edc3 7a00 	vstr	s15, [r3]
 8002652:	f7ff b926 	b.w	80018a2 <main+0xc3a>
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002656:	f8da 0000 	ldr.w	r0, [sl]
 800265a:	f7fd ff41 	bl	80004e0 <__aeabi_f2d>
 800265e:	eeb0 1a4d 	vmov.f32	s2, s26
 8002662:	eef0 1a6d 	vmov.f32	s3, s27
 8002666:	ec41 0b10 	vmov	d0, r0, r1
 800266a:	f005 fa2b 	bl	8007ac4 <fmod>
 800266e:	a35e      	add	r3, pc, #376	; (adr r3, 80027e8 <main+0x1b80>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	ec51 0b10 	vmov	r0, r1, d0
 8002678:	f7fd ff8a 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 800267c:	f7fe fa60 	bl	8000b40 <__aeabi_d2f>
 8002680:	ee00 0a10 	vmov	s0, r0
 8002684:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	bf88      	it	hi
 800268e:	eeb0 0a68 	vmovhi.f32	s0, s17
 8002692:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	bfb8      	it	lt
 800269c:	eeb0 0a48 	vmovlt.f32	s0, s16
 80026a0:	201f      	movs	r0, #31
 80026a2:	f004 fdc1 	bl	8007228 <scalbnf>
 80026a6:	f005 f9bd 	bl	8007a24 <roundf>
 80026aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80026ae:	a92a      	add	r1, sp, #168	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 80026b0:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80026b8:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 80026ba:	2360      	movs	r3, #96	; 0x60
 80026bc:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 80026be:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 80026c2:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 80026c6:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 80026ca:	f001 f8f7 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 80026ce:	2301      	movs	r3, #1
 80026d0:	aa1c      	add	r2, sp, #112	; 0x70
 80026d2:	a91b      	add	r1, sp, #108	; 0x6c
 80026d4:	9500      	str	r5, [sp, #0]
 80026d6:	4658      	mov	r0, fp
 80026d8:	f001 f916 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 80026dc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80026de:	f7fd feed 	bl	80004bc <__aeabi_i2d>
 80026e2:	ec41 0b10 	vmov	d0, r0, r1
 80026e6:	f06f 001e 	mvn.w	r0, #30
 80026ea:	f004 fc1f 	bl	8006f2c <ldexp>
 80026ee:	ec51 0b10 	vmov	r0, r1, d0
 80026f2:	f7fe fa25 	bl	8000b40 <__aeabi_d2f>
				if (map[(int)py / 10][((int)px - fCheckX) / 10] == 0) px += -3 * cos_cordic(angle);
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <main+0x1b90>)
 80026f8:	ee06 0a90 	vmov	s13, r0
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8002704:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002708:	edc3 7a00 	vstr	s15, [r3]
 800270c:	f7ff b8ae 	b.w	800186c <main+0xc04>
			}else LED_off(LED0);
 8002710:	2000      	movs	r0, #0
 8002712:	f003 fb0f 	bl	8005d34 <LED_off>
 8002716:	f7ff b8c4 	b.w	80018a2 <main+0xc3a>
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 800271a:	f8da 0000 	ldr.w	r0, [sl]
 800271e:	f7fd fedf 	bl	80004e0 <__aeabi_f2d>
 8002722:	eeb0 1a4d 	vmov.f32	s2, s26
 8002726:	eef0 1a6d 	vmov.f32	s3, s27
 800272a:	ec41 0b10 	vmov	d0, r0, r1
 800272e:	f005 f9c9 	bl	8007ac4 <fmod>
 8002732:	a32d      	add	r3, pc, #180	; (adr r3, 80027e8 <main+0x1b80>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	ec51 0b10 	vmov	r0, r1, d0
 800273c:	f7fd ff28 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8002740:	f7fe f9fe 	bl	8000b40 <__aeabi_d2f>
 8002744:	ee00 0a10 	vmov	s0, r0
 8002748:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	bf88      	it	hi
 8002752:	eeb0 0a68 	vmovhi.f32	s0, s17
 8002756:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	bfb8      	it	lt
 8002760:	eeb0 0a48 	vmovlt.f32	s0, s16
 8002764:	201f      	movs	r0, #31
 8002766:	f004 fd5f 	bl	8007228 <scalbnf>
 800276a:	f005 f95b 	bl	8007a24 <roundf>
 800276e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 8002772:	2201      	movs	r2, #1
 8002774:	2300      	movs	r3, #0
 8002776:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 800277a:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002782:	a92a      	add	r1, sp, #168	; 0xa8
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002784:	2360      	movs	r3, #96	; 0x60
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002786:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002788:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_SINE;
 800278a:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 800278e:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002792:	f001 f893 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 8002796:	2301      	movs	r3, #1
 8002798:	aa1c      	add	r2, sp, #112	; 0x70
 800279a:	a91b      	add	r1, sp, #108	; 0x6c
 800279c:	9600      	str	r6, [sp, #0]
 800279e:	4658      	mov	r0, fp
 80027a0:	f001 f8b2 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 80027a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80027a6:	f7fd fe89 	bl	80004bc <__aeabi_i2d>
 80027aa:	ec41 0b10 	vmov	d0, r0, r1
 80027ae:	f06f 001e 	mvn.w	r0, #30
 80027b2:	f004 fbbb 	bl	8006f2c <ldexp>
 80027b6:	ec51 0b10 	vmov	r0, r1, d0
 80027ba:	f7fe f9c1 	bl	8000b40 <__aeabi_d2f>
				if (map[((int)py + fCheckY) / 10][(int)px/ 10] == 0) py += 3 * sin_cordic(angle);
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <main+0x1b94>)
 80027c0:	ee06 0a90 	vmov	s13, r0
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80027cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80027d0:	edc3 7a00 	vstr	s15, [r3]
 80027d4:	f7ff b829 	b.w	800182a <main+0xbc2>
 80027d8:	f01b866e 	.word	0xf01b866e
 80027dc:	3ff921f9 	.word	0x3ff921f9
 80027e0:	7414a4d2 	.word	0x7414a4d2
 80027e4:	4012d97b 	.word	0x4012d97b
 80027e8:	8e7adaf5 	.word	0x8e7adaf5
 80027ec:	3fc45f31 	.word	0x3fc45f31
 80027f0:	20000968 	.word	0x20000968
 80027f4:	2000000c 	.word	0x2000000c
 80027f8:	20000078 	.word	0x20000078
 80027fc:	2000007c 	.word	0x2000007c
 8002800:	66666666 	.word	0x66666666
 8002804:	3fe66666 	.word	0x3fe66666
 8002808:	33333333 	.word	0x33333333
 800280c:	40033333 	.word	0x40033333
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 8002810:	f8da 0000 	ldr.w	r0, [sl]
 8002814:	f7fd fe64 	bl	80004e0 <__aeabi_f2d>
 8002818:	eeb0 1a4d 	vmov.f32	s2, s26
 800281c:	eef0 1a6d 	vmov.f32	s3, s27
 8002820:	ec41 0b10 	vmov	d0, r0, r1
 8002824:	f005 f94e 	bl	8007ac4 <fmod>
 8002828:	a345      	add	r3, pc, #276	; (adr r3, 8002940 <main+0x1cd8>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	ec51 0b10 	vmov	r0, r1, d0
 8002832:	f7fd fead 	bl	8000590 <__aeabi_dmul>
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 8002836:	f7fe f983 	bl	8000b40 <__aeabi_d2f>
 800283a:	ee00 0a10 	vmov	s0, r0
 800283e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	bf88      	it	hi
 8002848:	eeb0 0a68 	vmovhi.f32	s0, s17
 800284c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	bfb8      	it	lt
 8002856:	eeb0 0a48 	vmovlt.f32	s0, s16
 800285a:	201f      	movs	r0, #31
 800285c:	f004 fce4 	bl	8007228 <scalbnf>
 8002860:	f005 f8e0 	bl	8007a24 <roundf>
 8002864:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002868:	a92a      	add	r1, sp, #168	; 0xa8
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
 800286a:	ee17 3a90 	vmov	r3, s15
	int32_t inp = f32_to_q31(fmod(a, 2.0f*PI) / (2.0f * PI)) << 1;
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	931b      	str	r3, [sp, #108]	; 0x6c
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002872:	4658      	mov	r0, fp
	sConfig.Precision = CORDIC_PRECISION_6CYCLES;
 8002874:	2360      	movs	r3, #96	; 0x60
 8002876:	9330      	str	r3, [sp, #192]	; 0xc0
	sConfig.Function = CORDIC_FUNCTION_COSINE;
 8002878:	ed8d fb2a 	vstr	d15, [sp, #168]	; 0xa8
 800287c:	ed8d fb2c 	vstr	d15, [sp, #176]	; 0xb0
 8002880:	ed8d fb2e 	vstr	d15, [sp, #184]	; 0xb8
	HAL_CORDIC_Configure(&hcordic, &sConfig);
 8002884:	f001 f81a 	bl	80038bc <HAL_CORDIC_Configure>
	HAL_CORDIC_CalculateZO(&hcordic, &inp, &out, 1, 0);
 8002888:	2301      	movs	r3, #1
 800288a:	aa1c      	add	r2, sp, #112	; 0x70
 800288c:	a91b      	add	r1, sp, #108	; 0x6c
 800288e:	9600      	str	r6, [sp, #0]
 8002890:	4658      	mov	r0, fp
 8002892:	f001 f839 	bl	8003908 <HAL_CORDIC_CalculateZO>
	float out = ldexp((int32_t) x, -31);
 8002896:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002898:	f7fd fe10 	bl	80004bc <__aeabi_i2d>
 800289c:	ec41 0b10 	vmov	d0, r0, r1
 80028a0:	f06f 001e 	mvn.w	r0, #30
 80028a4:	f004 fb42 	bl	8006f2c <ldexp>
 80028a8:	ec51 0b10 	vmov	r0, r1, d0
 80028ac:	f7fe f948 	bl	8000b40 <__aeabi_d2f>
				if(map[(int)py / 10][((int)px + fCheckX) / 10] == 0) px += 3 * cos_cordic(angle);
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <main+0x1cd0>)
 80028b2:	ee06 0a90 	vmov	s13, r0
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80028be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80028c2:	edc3 7a00 	vstr	s15, [r3]
 80028c6:	f7fe bf95 	b.w	80017f4 <main+0xb8c>
			}else LED_off(LED0);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f003 fa32 	bl	8005d34 <LED_off>
 80028d0:	f7fe bfab 	b.w	800182a <main+0xbc2>
			if (angle < 0) angle = 2 * PI;
 80028d4:	eddf 7a19 	vldr	s15, [pc, #100]	; 800293c <main+0x1cd4>
 80028d8:	edca 7a00 	vstr	s15, [sl]
 80028dc:	f7fe be7c 	b.w	80015d8 <main+0x970>
				if(JOY_get_axis_position(X) < 40) angle -= 0.1;
 80028e0:	f003 fb30 	bl	8005f44 <JOY_get_axis_position>
 80028e4:	2827      	cmp	r0, #39	; 0x27
 80028e6:	d80c      	bhi.n	8002902 <main+0x1c9a>
 80028e8:	f8da 0000 	ldr.w	r0, [sl]
 80028ec:	f7fd fdf8 	bl	80004e0 <__aeabi_f2d>
 80028f0:	a30f      	add	r3, pc, #60	; (adr r3, 8002930 <main+0x1cc8>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fd fc93 	bl	8000220 <__aeabi_dsub>
 80028fa:	f7fe f921 	bl	8000b40 <__aeabi_d2f>
 80028fe:	f8ca 0000 	str.w	r0, [sl]
				if(JOY_get_axis_position(X) > 60) angle += 0.1;
 8002902:	2000      	movs	r0, #0
 8002904:	f003 fb1e 	bl	8005f44 <JOY_get_axis_position>
 8002908:	283c      	cmp	r0, #60	; 0x3c
 800290a:	f67e ae52 	bls.w	80015b2 <main+0x94a>
 800290e:	f8da 0000 	ldr.w	r0, [sl]
 8002912:	f7fd fde5 	bl	80004e0 <__aeabi_f2d>
 8002916:	a306      	add	r3, pc, #24	; (adr r3, 8002930 <main+0x1cc8>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fd fc82 	bl	8000224 <__adddf3>
 8002920:	f7fe f90e 	bl	8000b40 <__aeabi_d2f>
 8002924:	f8ca 0000 	str.w	r0, [sl]
 8002928:	f7fe be43 	b.w	80015b2 <main+0x94a>
 800292c:	f3af 8000 	nop.w
 8002930:	9999999a 	.word	0x9999999a
 8002934:	3fb99999 	.word	0x3fb99999
 8002938:	20000078 	.word	0x20000078
 800293c:	40c90fd0 	.word	0x40c90fd0
 8002940:	8e7adaf5 	.word	0x8e7adaf5
 8002944:	3fc45f31 	.word	0x3fc45f31

08002948 <Error_Handler>:
 8002948:	b672      	cpsid	i
	while (1)
 800294a:	e7fe      	b.n	800294a <Error_Handler+0x2>

0800294c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_MspInit+0x30>)
 800294e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	661a      	str	r2, [r3, #96]	; 0x60
 8002956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002958:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	f002 0201 	and.w	r2, r2, #1
 800295e:	9200      	str	r2, [sp, #0]
 8002960:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002968:	659a      	str	r2, [r3, #88]	; 0x58
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002974:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8002976:	f001 bb7b 	b.w	8004070 <HAL_PWREx_DisableUCPDDeadBattery>
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002988:	2254      	movs	r2, #84	; 0x54
 800298a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002990:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002994:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002996:	f004 fac1 	bl	8006f1c <memset>
  if(hadc->Instance==ADC4)
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_ADC_MspInit+0xb8>)
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80029a2:	b01c      	add	sp, #112	; 0x70
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80029a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80029aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ae:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80029b0:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80029b2:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b4:	f001 fefa 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d137      	bne.n	8002a2c <HAL_ADC_MspInit+0xac>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_ADC_MspInit+0xbc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	4820      	ldr	r0, [pc, #128]	; (8002a40 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80029c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc4.Instance = DMA1_Channel1;
 80029c2:	4d20      	ldr	r5, [pc, #128]	; (8002a44 <HAL_ADC_MspInit+0xc4>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80029c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029cc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029d6:	f042 0202 	orr.w	r2, r2, #2
 80029da:	64da      	str	r2, [r3, #76]	; 0x4c
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80029e6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80029ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80029ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	f001 f9c5 	bl	8003d84 <HAL_GPIO_Init>
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <HAL_ADC_MspInit+0xc8>)
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80029fc:	622e      	str	r6, [r5, #32]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80029fe:	2326      	movs	r3, #38	; 0x26
 8002a00:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	2280      	movs	r2, #128	; 0x80
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0a:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8002a0e:	4628      	mov	r0, r5
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a14:	2320      	movs	r3, #32
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a16:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002a1a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8002a1e:	f001 f873 	bl	8003b08 <HAL_DMA_Init>
 8002a22:	b930      	cbnz	r0, 8002a32 <HAL_ADC_MspInit+0xb2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8002a24:	6565      	str	r5, [r4, #84]	; 0x54
 8002a26:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8002a28:	b01c      	add	sp, #112	; 0x70
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002a2c:	f7ff ff8c 	bl	8002948 <Error_Handler>
 8002a30:	e7c4      	b.n	80029bc <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8002a32:	f7ff ff89 	bl	8002948 <Error_Handler>
 8002a36:	e7f5      	b.n	8002a24 <HAL_ADC_MspInit+0xa4>
 8002a38:	50000500 	.word	0x50000500
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	48000400 	.word	0x48000400
 8002a44:	20000198 	.word	0x20000198
 8002a48:	40020008 	.word	0x40020008

08002a4c <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_CORDIC_MspInit+0x2c>)
 8002a4e:	6802      	ldr	r2, [r0, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d000      	beq.n	8002a56 <HAL_CORDIC_MspInit+0xa>
 8002a54:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002a56:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8002a5a:	f042 0208 	orr.w	r2, r2, #8
 8002a5e:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8002a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8002a66:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002a72:	b002      	add	sp, #8
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	00000000 	.word	0x00000000

08002a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a80:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_SPI_MspInit+0x70>)
 8002a84:	6801      	ldr	r1, [r0, #0]
{
 8002a86:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8002a8a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002a90:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002a94:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 8002a96:	d002      	beq.n	8002a9e <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a98:	b009      	add	sp, #36	; 0x24
 8002a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002aa2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002aa6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002ae8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aac:	4811      	ldr	r0, [pc, #68]	; (8002af4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ab2:	661a      	str	r2, [r3, #96]	; 0x60
 8002ab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ace:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ad0:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002ad2:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ad8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ada:	f001 f953 	bl	8003d84 <HAL_GPIO_Init>
}
 8002ade:	b009      	add	sp, #36	; 0x24
 8002ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	0000001c 	.word	0x0000001c
 8002aec:	00000002 	.word	0x00000002
 8002af0:	40013000 	.word	0x40013000
 8002af4:	48001800 	.word	0x48001800

08002af8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_TIM_Base_MspInit+0x28>)
 8002afa:	6802      	ldr	r2, [r0, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d000      	beq.n	8002b02 <HAL_TIM_Base_MspInit+0xa>
 8002b00:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b02:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 8002b06:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b1a:	b002      	add	sp, #8
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00

08002b24 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002b24:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_SRAM_MspInit+0x7c>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002b28:	b088      	sub	sp, #32
  if (FMC_Initialized) {
 8002b2a:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d132      	bne.n	8002b9a <HAL_SRAM_MspInit+0x76>
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b38:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FMC_Initialized = 1;
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	6019      	str	r1, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b40:	6d13      	ldr	r3, [r2, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b42:	4818      	ldr	r0, [pc, #96]	; (8002ba4 <HAL_SRAM_MspInit+0x80>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6513      	str	r3, [r2, #80]	; 0x50
 8002b48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002b4e:	f64f 7280 	movw	r2, #65408	; 0xff80
 8002b52:	2302      	movs	r3, #2
 8002b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b58:	240c      	movs	r4, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b5c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b5e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b62:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002b64:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b66:	f001 f90d 	bl	8003d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002b6a:	2703      	movs	r7, #3
 8002b6c:	f24c 72b3 	movw	r2, #51123	; 0xc7b3
 8002b70:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <HAL_SRAM_MspInit+0x84>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b74:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b76:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b80:	f001 f900 	bl	8003d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b84:	2220      	movs	r2, #32
 8002b86:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b88:	4808      	ldr	r0, [pc, #32]	; (8002bac <HAL_SRAM_MspInit+0x88>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b8a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b8c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002b92:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b96:	f001 f8f5 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002b9a:	b008      	add	sp, #32
 8002b9c:	bdd0      	pop	{r4, r6, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000364 	.word	0x20000364
 8002ba4:	48001000 	.word	0x48001000
 8002ba8:	48000c00 	.word	0x48000c00
 8002bac:	48001800 	.word	0x48001800

08002bb0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <NMI_Handler>
 8002bb2:	bf00      	nop

08002bb4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <HardFault_Handler>
 8002bb6:	bf00      	nop

08002bb8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <MemManage_Handler>
 8002bba:	bf00      	nop

08002bbc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <BusFault_Handler>
 8002bbe:	bf00      	nop

08002bc0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <UsageFault_Handler>
 8002bc2:	bf00      	nop

08002bc4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <DebugMon_Handler>:
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <PendSV_Handler>:
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd0:	f000 b8dc 	b.w	8002d8c <HAL_IncTick>

08002bd4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002bd4:	4801      	ldr	r0, [pc, #4]	; (8002bdc <DMA1_Channel1_IRQHandler+0x8>)
 8002bd6:	f001 b887 	b.w	8003ce8 <HAL_DMA_IRQHandler>
 8002bda:	bf00      	nop
 8002bdc:	20000198 	.word	0x20000198

08002be0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8002be0:	4801      	ldr	r0, [pc, #4]	; (8002be8 <DMA1_Channel2_IRQHandler+0x8>)
 8002be2:	f001 b881 	b.w	8003ce8 <HAL_DMA_IRQHandler>
 8002be6:	bf00      	nop
 8002be8:	200001f8 	.word	0x200001f8

08002bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002bec:	b508      	push	{r3, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <USART3_IRQHandler+0x30>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	0690      	lsls	r0, r2, #26
 8002bf4:	d502      	bpl.n	8002bfc <USART3_IRQHandler+0x10>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	0699      	lsls	r1, r3, #26
 8002bfa:	d40b      	bmi.n	8002c14 <USART3_IRQHandler+0x28>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <USART3_IRQHandler+0x30>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	0612      	lsls	r2, r2, #24
 8002c02:	d506      	bpl.n	8002c12 <USART3_IRQHandler+0x26>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	d503      	bpl.n	8002c12 <USART3_IRQHandler+0x26>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SCI_transmit_char_Callback();
 8002c0e:	f003 b8ff 	b.w	8005e10 <SCI_transmit_char_Callback>
}
 8002c12:	bd08      	pop	{r3, pc}
				SCI_receive_char_Callback();
 8002c14:	f003 f8f0 	bl	8005df8 <SCI_receive_char_Callback>
 8002c18:	e7f0      	b.n	8002bfc <USART3_IRQHandler+0x10>
 8002c1a:	bf00      	nop
 8002c1c:	40004800 	.word	0x40004800

08002c20 <TIM6_DAC_IRQHandler>:
  return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <TIM6_DAC_IRQHandler+0x1c>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	0791      	lsls	r1, r2, #30
 8002c26:	d402      	bmi.n	8002c2e <TIM6_DAC_IRQHandler+0xe>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002c28:	691a      	ldr	r2, [r3, #16]
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(LL_TIM_IsEnabledUpdateEvent(TIM6))
	{
		if(LL_TIM_IsActiveFlag_UPDATE(TIM6))	// postavljena zastavica RXNE?
 8002c2a:	07d2      	lsls	r2, r2, #31
 8002c2c:	d400      	bmi.n	8002c30 <TIM6_DAC_IRQHandler+0x10>
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c2e:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
			PSERV_run_services_Callback();
 8002c36:	f003 bd87 	b.w	8006748 <PSERV_run_services_Callback>
 8002c3a:	bf00      	nop
 8002c3c:	40001000 	.word	0x40001000

08002c40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c42:	1e16      	subs	r6, r2, #0
 8002c44:	dd07      	ble.n	8002c56 <_read+0x16>
 8002c46:	460c      	mov	r4, r1
 8002c48:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002c4a:	f3af 8000 	nop.w
 8002c4e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	42a5      	cmp	r5, r4
 8002c54:	d1f9      	bne.n	8002c4a <_read+0xa>
	}

return len;
}
 8002c56:	4630      	mov	r0, r6
 8002c58:	bd70      	pop	{r4, r5, r6, pc}
 8002c5a:	bf00      	nop

08002c5c <_close>:
}

int _close(int file)
{
	return -1;
}
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c68:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <_lseek>:
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002c70:	2000      	movs	r0, #0
 8002c72:	4770      	bx	lr

08002c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c74:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c76:	4c0c      	ldr	r4, [pc, #48]	; (8002ca8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <_sbrk+0x38>)
 8002c7a:	490d      	ldr	r1, [pc, #52]	; (8002cb0 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002c7c:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c7e:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8002c80:	b12a      	cbz	r2, 8002c8e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c82:	4410      	add	r0, r2
 8002c84:	4288      	cmp	r0, r1
 8002c86:	d807      	bhi.n	8002c98 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002c88:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <_sbrk+0x40>)
 8002c90:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002c92:	4410      	add	r0, r2
 8002c94:	4288      	cmp	r0, r1
 8002c96:	d9f7      	bls.n	8002c88 <_sbrk+0x14>
    errno = ENOMEM;
 8002c98:	f004 f916 	bl	8006ec8 <__errno>
 8002c9c:	230c      	movs	r3, #12
    return (void *)-1;
 8002c9e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8002ca2:	6003      	str	r3, [r0, #0]
}
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	bd10      	pop	{r4, pc}
 8002ca8:	20000368 	.word	0x20000368
 8002cac:	20020000 	.word	0x20020000
 8002cb0:	00000400 	.word	0x00000400
 8002cb4:	2001cbd8 	.word	0x2001cbd8

08002cb8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cb8:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <SystemInit+0x10>)
 8002cba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cd2:	490e      	ldr	r1, [pc, #56]	; (8002d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <LoopForever+0xe>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce8:	4c0b      	ldr	r4, [pc, #44]	; (8002d18 <LoopForever+0x16>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cf6:	f7ff ffdf 	bl	8002cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f004 f8eb 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cfe:	f7fd ffb3 	bl	8000c68 <main>

08002d02 <LoopForever>:

LoopForever:
    b LoopForever
 8002d02:	e7fe      	b.n	8002d02 <LoopForever>
  ldr   r0, =_estack
 8002d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8002d10:	08018990 	.word	0x08018990
  ldr r2, =_sbss
 8002d14:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8002d18:	2001cbd4 	.word	0x2001cbd4

08002d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC1_2_IRQHandler>
	...

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_InitTick+0x40>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b90b      	cbnz	r3, 8002d2c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d2c:	490d      	ldr	r1, [pc, #52]	; (8002d64 <HAL_InitTick+0x44>)
 8002d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d32:	4605      	mov	r5, r0
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	6808      	ldr	r0, [r1, #0]
 8002d3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d3e:	f000 fec9 	bl	8003ad4 <HAL_SYSTICK_Config>
 8002d42:	4604      	mov	r4, r0
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d1ef      	bne.n	8002d28 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d48:	2d0f      	cmp	r5, #15
 8002d4a:	d8ed      	bhi.n	8002d28 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4629      	mov	r1, r5
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f000 fe72 	bl	8003a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_InitTick+0x48>)
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	601d      	str	r5, [r3, #0]
}
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	20000004 	.word	0x20000004
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000008 	.word	0x20000008

08002d6c <HAL_Init>:
{
 8002d6c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f000 fe52 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d74:	200e      	movs	r0, #14
 8002d76:	f7ff ffd3 	bl	8002d20 <HAL_InitTick>
 8002d7a:	b110      	cbz	r0, 8002d82 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002d7c:	2401      	movs	r4, #1
}
 8002d7e:	4620      	mov	r0, r4
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	4604      	mov	r4, r0
    HAL_MspInit();
 8002d84:	f7ff fde2 	bl	800294c <HAL_MspInit>
}
 8002d88:	4620      	mov	r0, r4
 8002d8a:	bd10      	pop	{r4, pc}

08002d8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_IncTick+0x10>)
 8002d8e:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_IncTick+0x14>)
 8002d90:	6813      	ldr	r3, [r2, #0]
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	440b      	add	r3, r1
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000036c 	.word	0x2000036c
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002da4:	4b01      	ldr	r3, [pc, #4]	; (8002dac <HAL_GetTick+0x8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2000036c 	.word	0x2000036c

08002db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff fff6 	bl	8002da4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002dba:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002dbc:	d002      	beq.n	8002dc4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_Delay+0x20>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dc4:	f7ff ffee 	bl	8002da4 <HAL_GetTick>
 8002dc8:	1b43      	subs	r3, r0, r5
 8002dca:	42a3      	cmp	r3, r4
 8002dcc:	d3fa      	bcc.n	8002dc4 <HAL_Delay+0x14>
  {
  }
}
 8002dce:	bd38      	pop	{r3, r4, r5, pc}
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b530      	push	{r4, r5, lr}
 8002dd6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	f000 80d4 	beq.w	8002f8a <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002de2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002de4:	4604      	mov	r4, r0
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	f000 809d 	beq.w	8002f26 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dec:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dee:	6893      	ldr	r3, [r2, #8]
 8002df0:	009d      	lsls	r5, r3, #2
 8002df2:	d505      	bpl.n	8002e00 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002df4:	6893      	ldr	r3, [r2, #8]
 8002df6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002dfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dfe:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e00:	6893      	ldr	r3, [r2, #8]
 8002e02:	00d8      	lsls	r0, r3, #3
 8002e04:	d419      	bmi.n	8002e3a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e06:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <HAL_ADC_Init+0x22c>)
 8002e08:	487e      	ldr	r0, [pc, #504]	; (8003004 <HAL_ADC_Init+0x230>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002e0c:	6891      	ldr	r1, [r2, #8]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	fba0 0303 	umull	r0, r3, r0, r3
 8002e14:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002e26:	6091      	str	r1, [r2, #8]
 8002e28:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e2a:	9b01      	ldr	r3, [sp, #4]
 8002e2c:	b12b      	cbz	r3, 8002e3a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e3a:	6893      	ldr	r3, [r2, #8]
 8002e3c:	00d9      	lsls	r1, r3, #3
 8002e3e:	d464      	bmi.n	8002f0a <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e42:	f043 0310 	orr.w	r3, r3, #16
 8002e46:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e48:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4c:	4303      	orrs	r3, r0
 8002e4e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e50:	6893      	ldr	r3, [r2, #8]
 8002e52:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e58:	d15e      	bne.n	8002f18 <HAL_ADC_Init+0x144>
 8002e5a:	06db      	lsls	r3, r3, #27
 8002e5c:	d45c      	bmi.n	8002f18 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e6a:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6c:	07dd      	lsls	r5, r3, #31
 8002e6e:	d419      	bmi.n	8002ea4 <HAL_ADC_Init+0xd0>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e70:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002e74:	f000 80a1 	beq.w	8002fba <HAL_ADC_Init+0x1e6>
 8002e78:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_ADC_Init+0x234>)
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	f000 80a6 	beq.w	8002fcc <HAL_ADC_Init+0x1f8>
 8002e80:	4962      	ldr	r1, [pc, #392]	; (800300c <HAL_ADC_Init+0x238>)
 8002e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e86:	6889      	ldr	r1, [r1, #8]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	4960      	ldr	r1, [pc, #384]	; (8003010 <HAL_ADC_Init+0x23c>)
 8002e8e:	6889      	ldr	r1, [r1, #8]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	07d9      	lsls	r1, r3, #31
 8002e94:	d406      	bmi.n	8002ea4 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e96:	495f      	ldr	r1, [pc, #380]	; (8003014 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e98:	688b      	ldr	r3, [r1, #8]
 8002e9a:	6865      	ldr	r5, [r4, #4]
 8002e9c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002ea0:	432b      	orrs	r3, r5
 8002ea2:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002ea4:	68e5      	ldr	r5, [r4, #12]
 8002ea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ea8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8002eac:	432b      	orrs	r3, r5
 8002eae:	68a5      	ldr	r5, [r4, #8]
 8002eb0:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb2:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eb4:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8002eb6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ebe:	d05f      	beq.n	8002f80 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ec2:	b121      	cbz	r1, 8002ece <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8002ec4:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ec6:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002eca:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ecc:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ece:	68d5      	ldr	r5, [r2, #12]
 8002ed0:	4951      	ldr	r1, [pc, #324]	; (8003018 <HAL_ADC_Init+0x244>)
 8002ed2:	4029      	ands	r1, r5
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ed8:	6913      	ldr	r3, [r2, #16]
 8002eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002edc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ee4:	6893      	ldr	r3, [r2, #8]
 8002ee6:	075b      	lsls	r3, r3, #29
 8002ee8:	d523      	bpl.n	8002f32 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eea:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eec:	6963      	ldr	r3, [r4, #20]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d04e      	beq.n	8002f90 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ef2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ef4:	f023 030f 	bic.w	r3, r3, #15
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002efa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002efc:	f023 0303 	bic.w	r3, r3, #3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002f06:	b003      	add	sp, #12
 8002f08:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f0a:	6893      	ldr	r3, [r2, #8]
 8002f0c:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f10:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f16:	d0a0      	beq.n	8002e5a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8002f22:	b003      	add	sp, #12
 8002f24:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002f26:	f7ff fd2b 	bl	8002980 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f2a:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002f2c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8002f30:	e75c      	b.n	8002dec <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f32:	6893      	ldr	r3, [r2, #8]
 8002f34:	071d      	lsls	r5, r3, #28
 8002f36:	d4d9      	bmi.n	8002eec <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f38:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f3e:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f40:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f44:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f46:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f4a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f4e:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8002f50:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f52:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f54:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8002f56:	bb19      	cbnz	r1, 8002fa0 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f5e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002f62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f6a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8002f6e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d033      	beq.n	8002fde <HAL_ADC_Init+0x20a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f76:	6913      	ldr	r3, [r2, #16]
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6113      	str	r3, [r2, #16]
 8002f7e:	e7b5      	b.n	8002eec <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f82:	3901      	subs	r1, #1
 8002f84:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002f88:	e79a      	b.n	8002ec0 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 8002f8a:	2001      	movs	r0, #1
}
 8002f8c:	b003      	add	sp, #12
 8002f8e:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f90:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f92:	6a23      	ldr	r3, [r4, #32]
 8002f94:	f021 010f 	bic.w	r1, r1, #15
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	e7ac      	b.n	8002efa <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fa6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002faa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002fb8:	e7d9      	b.n	8002f6e <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fba:	4913      	ldr	r1, [pc, #76]	; (8003008 <HAL_ADC_Init+0x234>)
 8002fbc:	6893      	ldr	r3, [r2, #8]
 8002fbe:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	07d9      	lsls	r1, r3, #31
 8002fc4:	f53f af6e 	bmi.w	8002ea4 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fc8:	4914      	ldr	r1, [pc, #80]	; (800301c <HAL_ADC_Init+0x248>)
 8002fca:	e765      	b.n	8002e98 <HAL_ADC_Init+0xc4>
 8002fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	07db      	lsls	r3, r3, #31
 8002fd8:	f53f af64 	bmi.w	8002ea4 <HAL_ADC_Init+0xd0>
 8002fdc:	e7f4      	b.n	8002fc8 <HAL_ADC_Init+0x1f4>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fde:	6911      	ldr	r1, [r2, #16]
 8002fe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fe2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002fe4:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8002fe8:	f021 0104 	bic.w	r1, r1, #4
 8002fec:	432b      	orrs	r3, r5
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6113      	str	r3, [r2, #16]
 8002ffe:	e775      	b.n	8002eec <HAL_ADC_Init+0x118>
 8003000:	20000000 	.word	0x20000000
 8003004:	053e2d63 	.word	0x053e2d63
 8003008:	50000100 	.word	0x50000100
 800300c:	50000400 	.word	0x50000400
 8003010:	50000600 	.word	0x50000600
 8003014:	50000700 	.word	0x50000700
 8003018:	fff04007 	.word	0xfff04007
 800301c:	50000300 	.word	0x50000300

08003020 <HAL_ADC_ConvCpltCallback>:
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <HAL_ADC_ConvHalfCpltCallback>:
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop

08003028 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003028:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800302a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800302c:	f7ff fffa 	bl	8003024 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003030:	bd08      	pop	{r3, pc}
 8003032:	bf00      	nop

08003034 <HAL_ADC_ErrorCallback>:
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop

08003038 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003038:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800303a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800303c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8003040:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003042:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003044:	d11d      	bne.n	8003082 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003046:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800304e:	680a      	ldr	r2, [r1, #0]
 8003050:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003054:	68ca      	ldr	r2, [r1, #12]
 8003056:	d01b      	beq.n	8003090 <ADC_DMAConvCplt+0x58>
 8003058:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800305c:	d10d      	bne.n	800307a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800305e:	68ca      	ldr	r2, [r1, #12]
 8003060:	0494      	lsls	r4, r2, #18
 8003062:	d40a      	bmi.n	800307a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800306c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800306e:	04d1      	lsls	r1, r2, #19
 8003070:	d403      	bmi.n	800307a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ffd0 	bl	8003020 <HAL_ADC_ConvCpltCallback>
}
 8003080:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003082:	06d2      	lsls	r2, r2, #27
 8003084:	d40a      	bmi.n	800309c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003090:	0790      	lsls	r0, r2, #30
 8003092:	d5e7      	bpl.n	8003064 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ffc3 	bl	8003020 <HAL_ADC_ConvCpltCallback>
 800309a:	e7f1      	b.n	8003080 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ffc9 	bl	8003034 <HAL_ADC_ErrorCallback>
}
 80030a2:	bd10      	pop	{r4, pc}

080030a4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80030a6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ae:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b8:	f7ff ffbc 	bl	8003034 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030bc:	bd08      	pop	{r3, pc}
 80030be:	bf00      	nop

080030c0 <HAL_ADC_ConfigChannel>:
{
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80030c2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80030c6:	b083      	sub	sp, #12
 80030c8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80030ca:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80030d2:	f000 8177 	beq.w	80033c4 <HAL_ADC_ConfigChannel+0x304>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80030d8:	2001      	movs	r0, #1
 80030da:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030de:	6894      	ldr	r4, [r2, #8]
 80030e0:	0765      	lsls	r5, r4, #29
 80030e2:	d45d      	bmi.n	80031a0 <HAL_ADC_ConfigChannel+0xe0>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030e4:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030e6:	0984      	lsrs	r4, r0, #6
 80030e8:	f004 040c 	and.w	r4, r4, #12
  MODIFY_REG(*preg,
 80030ec:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030f0:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80030f4:	6808      	ldr	r0, [r1, #0]
 80030f6:	f854 500e 	ldr.w	r5, [r4, lr]
 80030fa:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80030fe:	261f      	movs	r6, #31
 8003100:	fa00 f00c 	lsl.w	r0, r0, ip
 8003104:	fa06 fc0c 	lsl.w	ip, r6, ip
 8003108:	ea25 0c0c 	bic.w	ip, r5, ip
 800310c:	ea40 000c 	orr.w	r0, r0, ip
 8003110:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003114:	6890      	ldr	r0, [r2, #8]
 8003116:	0744      	lsls	r4, r0, #29
 8003118:	d572      	bpl.n	8003200 <HAL_ADC_ConfigChannel+0x140>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800311a:	6890      	ldr	r0, [r2, #8]
 800311c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800311e:	6894      	ldr	r4, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003120:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003124:	4604      	mov	r4, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003126:	d10c      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003128:	4db2      	ldr	r5, [pc, #712]	; (80033f4 <HAL_ADC_ConfigChannel+0x334>)
 800312a:	68ce      	ldr	r6, [r1, #12]
 800312c:	42ae      	cmp	r6, r5
 800312e:	f000 80f0 	beq.w	8003312 <HAL_ADC_ConfigChannel+0x252>
    CLEAR_BIT(ADCx->DIFSEL,
 8003132:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8003136:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800313a:	ea21 0100 	bic.w	r1, r1, r0
 800313e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003142:	49ad      	ldr	r1, [pc, #692]	; (80033f8 <HAL_ADC_ConfigChannel+0x338>)
 8003144:	420c      	tst	r4, r1
 8003146:	d059      	beq.n	80031fc <HAL_ADC_ConfigChannel+0x13c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003148:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800314c:	f000 8138 	beq.w	80033c0 <HAL_ADC_ConfigChannel+0x300>
 8003150:	4daa      	ldr	r5, [pc, #680]	; (80033fc <HAL_ADC_ConfigChannel+0x33c>)
 8003152:	49ab      	ldr	r1, [pc, #684]	; (8003400 <HAL_ADC_ConfigChannel+0x340>)
 8003154:	48ab      	ldr	r0, [pc, #684]	; (8003404 <HAL_ADC_ConfigChannel+0x344>)
 8003156:	42aa      	cmp	r2, r5
 8003158:	bf18      	it	ne
 800315a:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800315c:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800315e:	49aa      	ldr	r1, [pc, #680]	; (8003408 <HAL_ADC_ConfigChannel+0x348>)
 8003160:	428c      	cmp	r4, r1
 8003162:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8003166:	d024      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0xf2>
 8003168:	49a8      	ldr	r1, [pc, #672]	; (800340c <HAL_ADC_ConfigChannel+0x34c>)
 800316a:	428c      	cmp	r4, r1
 800316c:	d021      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0xf2>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800316e:	49a8      	ldr	r1, [pc, #672]	; (8003410 <HAL_ADC_ConfigChannel+0x350>)
 8003170:	428c      	cmp	r4, r1
 8003172:	f040 8157 	bne.w	8003424 <HAL_ADC_ConfigChannel+0x364>
 8003176:	01c0      	lsls	r0, r0, #7
 8003178:	d440      	bmi.n	80031fc <HAL_ADC_ConfigChannel+0x13c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800317e:	f000 821b 	beq.w	80035b8 <HAL_ADC_ConfigChannel+0x4f8>
 8003182:	4c9e      	ldr	r4, [pc, #632]	; (80033fc <HAL_ADC_ConfigChannel+0x33c>)
 8003184:	499e      	ldr	r1, [pc, #632]	; (8003400 <HAL_ADC_ConfigChannel+0x340>)
 8003186:	489f      	ldr	r0, [pc, #636]	; (8003404 <HAL_ADC_ConfigChannel+0x344>)
 8003188:	42a2      	cmp	r2, r4
 800318a:	bf18      	it	ne
 800318c:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800318e:	688a      	ldr	r2, [r1, #8]
 8003190:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003194:	4315      	orrs	r5, r2
 8003196:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319a:	2000      	movs	r0, #0
 800319c:	608d      	str	r5, [r1, #8]
}
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0xe8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031a2:	f042 0220 	orr.w	r2, r2, #32
 80031a6:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80031ae:	b003      	add	sp, #12
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031b2:	0201      	lsls	r1, r0, #8
 80031b4:	d422      	bmi.n	80031fc <HAL_ADC_ConfigChannel+0x13c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80031ba:	f000 8118 	beq.w	80033ee <HAL_ADC_ConfigChannel+0x32e>
 80031be:	4995      	ldr	r1, [pc, #596]	; (8003414 <HAL_ADC_ConfigChannel+0x354>)
 80031c0:	428a      	cmp	r2, r1
 80031c2:	d11b      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x13c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c4:	488f      	ldr	r0, [pc, #572]	; (8003404 <HAL_ADC_ConfigChannel+0x344>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c6:	4a94      	ldr	r2, [pc, #592]	; (8003418 <HAL_ADC_ConfigChannel+0x358>)
 80031c8:	4c94      	ldr	r4, [pc, #592]	; (800341c <HAL_ADC_ConfigChannel+0x35c>)
 80031ca:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80031cc:	6881      	ldr	r1, [r0, #8]
 80031ce:	0992      	lsrs	r2, r2, #6
 80031d0:	fba4 4202 	umull	r4, r2, r4, r2
 80031d4:	0992      	lsrs	r2, r2, #6
 80031d6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80031da:	3201      	adds	r2, #1
 80031dc:	430d      	orrs	r5, r1
 80031de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 80031e8:	6085      	str	r5, [r0, #8]
 80031ea:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80031ec:	9a01      	ldr	r2, [sp, #4]
 80031ee:	b12a      	cbz	r2, 80031fc <HAL_ADC_ConfigChannel+0x13c>
            wait_loop_index--;
 80031f0:	9a01      	ldr	r2, [sp, #4]
 80031f2:	3a01      	subs	r2, #1
 80031f4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80031f6:	9a01      	ldr	r2, [sp, #4]
 80031f8:	2a00      	cmp	r2, #0
 80031fa:	d1f9      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fc:	2000      	movs	r0, #0
 80031fe:	e7d3      	b.n	80031a8 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003200:	6890      	ldr	r0, [r2, #8]
 8003202:	f010 0008 	ands.w	r0, r0, #8
 8003206:	f040 8082 	bne.w	800330e <HAL_ADC_ConfigChannel+0x24e>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800320a:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800320c:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800320e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003212:	f000 8122 	beq.w	800345a <HAL_ADC_ConfigChannel+0x39a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003216:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 800321a:	f102 0714 	add.w	r7, r2, #20
 800321e:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8003222:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003226:	f85c 5007 	ldr.w	r5, [ip, r7]
 800322a:	f04f 0e07 	mov.w	lr, #7
 800322e:	40b4      	lsls	r4, r6
 8003230:	fa0e f606 	lsl.w	r6, lr, r6
 8003234:	ea25 0506 	bic.w	r5, r5, r6
 8003238:	432c      	orrs	r4, r5
 800323a:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800323e:	6954      	ldr	r4, [r2, #20]
 8003240:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003244:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003246:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003248:	68d5      	ldr	r5, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800324a:	2f04      	cmp	r7, #4
 800324c:	d02f      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x1ee>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800324e:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003252:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 8003256:	f854 e027 	ldr.w	lr, [r4, r7, lsl #2]
 800325a:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8003420 <HAL_ADC_ConfigChannel+0x360>
 800325e:	006e      	lsls	r6, r5, #1
 8003260:	680d      	ldr	r5, [r1, #0]
 8003262:	ea0e 0c0c 	and.w	ip, lr, ip
 8003266:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800326a:	ea45 0c0c 	orr.w	ip, r5, ip
 800326e:	694d      	ldr	r5, [r1, #20]
 8003270:	40b5      	lsls	r5, r6
 8003272:	ea45 050c 	orr.w	r5, r5, ip
 8003276:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800327a:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800327e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003280:	698e      	ldr	r6, [r1, #24]
 8003282:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8003286:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800328a:	4335      	orrs	r5, r6
 800328c:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003290:	7f0d      	ldrb	r5, [r1, #28]
 8003292:	690e      	ldr	r6, [r1, #16]
 8003294:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 8003296:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 800329a:	bf08      	it	eq
 800329c:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 80032a0:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80032a4:	4328      	orrs	r0, r5
 80032a6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80032aa:	6808      	ldr	r0, [r1, #0]
}
 80032ac:	e737      	b.n	800311e <HAL_ADC_ConfigChannel+0x5e>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ae:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032b0:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80032b2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80032b4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032b8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032bc:	2d00      	cmp	r5, #0
 80032be:	f040 80e0 	bne.w	8003482 <HAL_ADC_ConfigChannel+0x3c2>
 80032c2:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032c6:	42ac      	cmp	r4, r5
 80032c8:	f000 813e 	beq.w	8003548 <HAL_ADC_ConfigChannel+0x488>
 80032cc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80032ce:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d0:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032d4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80032d8:	f102 0764 	add.w	r7, r2, #100	; 0x64
 80032dc:	42ae      	cmp	r6, r5
 80032de:	f000 8159 	beq.w	8003594 <HAL_ADC_ConfigChannel+0x4d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032e2:	68a6      	ldr	r6, [r4, #8]
 80032e4:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ea:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80032ee:	42ae      	cmp	r6, r5
 80032f0:	f000 813e 	beq.w	8003570 <HAL_ADC_ConfigChannel+0x4b0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032f4:	68e6      	ldr	r6, [r4, #12]
 80032f6:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032f8:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032fc:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8003300:	42a5      	cmp	r5, r4
 8003302:	f47f af0c 	bne.w	800311e <HAL_ADC_ConfigChannel+0x5e>
  MODIFY_REG(*preg,
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800330c:	6038      	str	r0, [r7, #0]
 800330e:	6808      	ldr	r0, [r1, #0]
}
 8003310:	e705      	b.n	800311e <HAL_ADC_ConfigChannel+0x5e>
    SET_BIT(ADCx->DIFSEL,
 8003312:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003316:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800331a:	432c      	orrs	r4, r5
 800331c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003320:	2d00      	cmp	r5, #0
 8003322:	d052      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x30a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003328:	2c00      	cmp	r4, #0
 800332a:	f000 80e9 	beq.w	8003500 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 800332e:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003332:	3401      	adds	r4, #1
 8003334:	f004 041f 	and.w	r4, r4, #31
 8003338:	2c09      	cmp	r4, #9
 800333a:	f240 80e1 	bls.w	8003500 <HAL_ADC_ConfigChannel+0x440>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003342:	2c00      	cmp	r4, #0
 8003344:	f000 813e 	beq.w	80035c4 <HAL_ADC_ConfigChannel+0x504>
  return __builtin_clz(value);
 8003348:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800334c:	3401      	adds	r4, #1
 800334e:	06a4      	lsls	r4, r4, #26
 8003350:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003358:	2d00      	cmp	r5, #0
 800335a:	f000 8131 	beq.w	80035c0 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 800335e:	fab5 f585 	clz	r5, r5
 8003362:	3501      	adds	r5, #1
 8003364:	f005 051f 	and.w	r5, r5, #31
 8003368:	2601      	movs	r6, #1
 800336a:	fa06 f505 	lsl.w	r5, r6, r5
 800336e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003374:	2800      	cmp	r0, #0
 8003376:	f000 8121 	beq.w	80035bc <HAL_ADC_ConfigChannel+0x4fc>
  return __builtin_clz(value);
 800337a:	fab0 f080 	clz	r0, r0
 800337e:	3001      	adds	r0, #1
 8003380:	f000 051f 	and.w	r5, r0, #31
 8003384:	f06f 061d 	mvn.w	r6, #29
 8003388:	2003      	movs	r0, #3
 800338a:	fb10 6005 	smlabb	r0, r0, r5, r6
 800338e:	0500      	lsls	r0, r0, #20
 8003390:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003394:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003396:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8003398:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800339a:	f006 0604 	and.w	r6, r6, #4
 800339e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 80033a2:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80033a6:	fa04 f700 	lsl.w	r7, r4, r0
 80033aa:	f04f 0c07 	mov.w	ip, #7
 80033ae:	5974      	ldr	r4, [r6, r5]
 80033b0:	fa0c f000 	lsl.w	r0, ip, r0
 80033b4:	ea24 0000 	bic.w	r0, r4, r0
 80033b8:	4338      	orrs	r0, r7
 80033ba:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033bc:	680c      	ldr	r4, [r1, #0]
}
 80033be:	e6c0      	b.n	8003142 <HAL_ADC_ConfigChannel+0x82>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c0:	490f      	ldr	r1, [pc, #60]	; (8003400 <HAL_ADC_ConfigChannel+0x340>)
 80033c2:	e6cb      	b.n	800315c <HAL_ADC_ConfigChannel+0x9c>
  __HAL_LOCK(hadc);
 80033c4:	2002      	movs	r0, #2
}
 80033c6:	b003      	add	sp, #12
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ca:	0e80      	lsrs	r0, r0, #26
 80033cc:	1c44      	adds	r4, r0, #1
 80033ce:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d2:	2e09      	cmp	r6, #9
 80033d4:	f200 8086 	bhi.w	80034e4 <HAL_ADC_ConfigChannel+0x424>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d8:	06a5      	lsls	r5, r4, #26
 80033da:	2001      	movs	r0, #1
 80033dc:	40b0      	lsls	r0, r6
 80033de:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80033e2:	4305      	orrs	r5, r0
 80033e4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80033e8:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ea:	4328      	orrs	r0, r5
 80033ec:	e7d3      	b.n	8003396 <HAL_ADC_ConfigChannel+0x2d6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ee:	4804      	ldr	r0, [pc, #16]	; (8003400 <HAL_ADC_ConfigChannel+0x340>)
 80033f0:	e6e9      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x106>
 80033f2:	bf00      	nop
 80033f4:	407f0000 	.word	0x407f0000
 80033f8:	80080000 	.word	0x80080000
 80033fc:	50000100 	.word	0x50000100
 8003400:	50000300 	.word	0x50000300
 8003404:	50000700 	.word	0x50000700
 8003408:	c3210000 	.word	0xc3210000
 800340c:	90c00010 	.word	0x90c00010
 8003410:	c7520000 	.word	0xc7520000
 8003414:	50000600 	.word	0x50000600
 8003418:	20000000 	.word	0x20000000
 800341c:	053e2d63 	.word	0x053e2d63
 8003420:	03fff000 	.word	0x03fff000
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003424:	496d      	ldr	r1, [pc, #436]	; (80035dc <HAL_ADC_ConfigChannel+0x51c>)
 8003426:	428c      	cmp	r4, r1
 8003428:	f47f aee8 	bne.w	80031fc <HAL_ADC_ConfigChannel+0x13c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800342c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003430:	f47f aee4 	bne.w	80031fc <HAL_ADC_ConfigChannel+0x13c>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003434:	496a      	ldr	r1, [pc, #424]	; (80035e0 <HAL_ADC_ConfigChannel+0x520>)
 8003436:	428a      	cmp	r2, r1
 8003438:	f43f aee0 	beq.w	80031fc <HAL_ADC_ConfigChannel+0x13c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343c:	4c69      	ldr	r4, [pc, #420]	; (80035e4 <HAL_ADC_ConfigChannel+0x524>)
 800343e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003442:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003446:	bf18      	it	ne
 8003448:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800344a:	688a      	ldr	r2, [r1, #8]
 800344c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003450:	432a      	orrs	r2, r5
 8003452:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003456:	608a      	str	r2, [r1, #8]
}
 8003458:	e6a6      	b.n	80031a8 <HAL_ADC_ConfigChannel+0xe8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800345a:	0df5      	lsrs	r5, r6, #23
 800345c:	f102 0414 	add.w	r4, r2, #20
 8003460:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003464:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003468:	592f      	ldr	r7, [r5, r4]
 800346a:	f04f 0c07 	mov.w	ip, #7
 800346e:	fa0c f606 	lsl.w	r6, ip, r6
 8003472:	ea27 0606 	bic.w	r6, r7, r6
 8003476:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003478:	6954      	ldr	r4, [r2, #20]
 800347a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800347e:	6154      	str	r4, [r2, #20]
}
 8003480:	e6e1      	b.n	8003246 <HAL_ADC_ConfigChannel+0x186>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003486:	b11d      	cbz	r5, 8003490 <HAL_ADC_ConfigChannel+0x3d0>
  return __builtin_clz(value);
 8003488:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800348c:	42ac      	cmp	r4, r5
 800348e:	d05b      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x488>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003490:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8003492:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003494:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003498:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800349c:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80034a4:	b11d      	cbz	r5, 80034ae <HAL_ADC_ConfigChannel+0x3ee>
  return __builtin_clz(value);
 80034a6:	fab5 f585 	clz	r5, r5
 80034aa:	42ae      	cmp	r6, r5
 80034ac:	d072      	beq.n	8003594 <HAL_ADC_ConfigChannel+0x4d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034ae:	68a5      	ldr	r5, [r4, #8]
 80034b0:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b2:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034b6:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80034be:	b11d      	cbz	r5, 80034c8 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 80034c0:	fab5 f585 	clz	r5, r5
 80034c4:	42ae      	cmp	r6, r5
 80034c6:	d053      	beq.n	8003570 <HAL_ADC_ConfigChannel+0x4b0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034c8:	68e5      	ldr	r5, [r4, #12]
 80034ca:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034cc:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034d0:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80034d8:	2d00      	cmp	r5, #0
 80034da:	f43f ae20 	beq.w	800311e <HAL_ADC_ConfigChannel+0x5e>
  return __builtin_clz(value);
 80034de:	fab5 f585 	clz	r5, r5
 80034e2:	e70d      	b.n	8003300 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80034e8:	06a4      	lsls	r4, r4, #26
 80034ea:	381e      	subs	r0, #30
 80034ec:	2501      	movs	r5, #1
 80034ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80034f2:	0500      	lsls	r0, r0, #20
 80034f4:	fa05 f606 	lsl.w	r6, r5, r6
 80034f8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80034fc:	4334      	orrs	r4, r6
 80034fe:	e749      	b.n	8003394 <HAL_ADC_ConfigChannel+0x2d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003504:	2d00      	cmp	r5, #0
 8003506:	d065      	beq.n	80035d4 <HAL_ADC_ConfigChannel+0x514>
  return __builtin_clz(value);
 8003508:	fab5 f585 	clz	r5, r5
 800350c:	3501      	adds	r5, #1
 800350e:	06ad      	lsls	r5, r5, #26
 8003510:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003518:	2c00      	cmp	r4, #0
 800351a:	d059      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 800351c:	fab4 f484 	clz	r4, r4
 8003520:	3401      	adds	r4, #1
 8003522:	f004 041f 	and.w	r4, r4, #31
 8003526:	2601      	movs	r6, #1
 8003528:	fa06 f404 	lsl.w	r4, r6, r4
 800352c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003532:	2800      	cmp	r0, #0
 8003534:	d049      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8003536:	fab0 f480 	clz	r4, r0
 800353a:	3401      	adds	r4, #1
 800353c:	f004 041f 	and.w	r4, r4, #31
 8003540:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003544:	0520      	lsls	r0, r4, #20
 8003546:	e750      	b.n	80033ea <HAL_ADC_ConfigChannel+0x32a>
  MODIFY_REG(*preg,
 8003548:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800354a:	4614      	mov	r4, r2
 800354c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003550:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003554:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003556:	6808      	ldr	r0, [r1, #0]
 8003558:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800355a:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355e:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003562:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003566:	2d00      	cmp	r5, #0
 8003568:	d19a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x3e0>
 800356a:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800356e:	e6b5      	b.n	80032dc <HAL_ADC_ConfigChannel+0x21c>
  MODIFY_REG(*preg,
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003576:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003578:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800357a:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800357c:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003580:	68e4      	ldr	r4, [r4, #12]
 8003582:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003586:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800358a:	2d00      	cmp	r5, #0
 800358c:	d1a2      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x414>
 800358e:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003592:	e6b5      	b.n	8003300 <HAL_ADC_ConfigChannel+0x240>
  MODIFY_REG(*preg,
 8003594:	6838      	ldr	r0, [r7, #0]
 8003596:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800359a:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800359c:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800359e:	6808      	ldr	r0, [r1, #0]
 80035a0:	68a6      	ldr	r6, [r4, #8]
 80035a2:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035a6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035aa:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ae:	2d00      	cmp	r5, #0
 80035b0:	d183      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x3fa>
 80035b2:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80035b6:	e69a      	b.n	80032ee <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b8:	490b      	ldr	r1, [pc, #44]	; (80035e8 <HAL_ADC_ConfigChannel+0x528>)
 80035ba:	e5e8      	b.n	800318e <HAL_ADC_ConfigChannel+0xce>
 80035bc:	480b      	ldr	r0, [pc, #44]	; (80035ec <HAL_ADC_ConfigChannel+0x52c>)
 80035be:	e6e9      	b.n	8003394 <HAL_ADC_ConfigChannel+0x2d4>
 80035c0:	2502      	movs	r5, #2
 80035c2:	e6d4      	b.n	800336e <HAL_ADC_ConfigChannel+0x2ae>
 80035c4:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80035c8:	e6c4      	b.n	8003354 <HAL_ADC_ConfigChannel+0x294>
 80035ca:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80035ce:	e70c      	b.n	80033ea <HAL_ADC_ConfigChannel+0x32a>
 80035d0:	2402      	movs	r4, #2
 80035d2:	e7ab      	b.n	800352c <HAL_ADC_ConfigChannel+0x46c>
 80035d4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80035d8:	e79c      	b.n	8003514 <HAL_ADC_ConfigChannel+0x454>
 80035da:	bf00      	nop
 80035dc:	cb840000 	.word	0xcb840000
 80035e0:	50000100 	.word	0x50000100
 80035e4:	50000700 	.word	0x50000700
 80035e8:	50000300 	.word	0x50000300
 80035ec:	fe500000 	.word	0xfe500000

080035f0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	07d2      	lsls	r2, r2, #31
 80035f6:	d501      	bpl.n	80035fc <ADC_Enable+0xc>
  return HAL_OK;
 80035f8:	2000      	movs	r0, #0
}
 80035fa:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <ADC_Enable+0x70>)
 8003600:	4211      	tst	r1, r2
{
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003606:	d008      	beq.n	800361a <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003608:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800360a:	f043 0310 	orr.w	r3, r3, #16
 800360e:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003610:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8003612:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003614:	4303      	orrs	r3, r0
 8003616:	6633      	str	r3, [r6, #96]	; 0x60
}
 8003618:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4d11      	ldr	r5, [pc, #68]	; (8003664 <ADC_Enable+0x74>)
 800361e:	402a      	ands	r2, r5
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003626:	f7ff fbbd 	bl	8002da4 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362a:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800362c:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	07d0      	lsls	r0, r2, #31
 8003632:	d413      	bmi.n	800365c <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003634:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003636:	07d1      	lsls	r1, r2, #31
 8003638:	d404      	bmi.n	8003644 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	402a      	ands	r2, r5
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003644:	f7ff fbae 	bl	8002da4 <HAL_GetTick>
 8003648:	1b03      	subs	r3, r0, r4
 800364a:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800364c:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800364e:	d9ee      	bls.n	800362e <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	07d2      	lsls	r2, r2, #31
 8003654:	d5d8      	bpl.n	8003608 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	07d0      	lsls	r0, r2, #31
 800365a:	d5eb      	bpl.n	8003634 <ADC_Enable+0x44>
  return HAL_OK;
 800365c:	2000      	movs	r0, #0
}
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	8000003f 	.word	0x8000003f
 8003664:	7fffffc0 	.word	0x7fffffc0

08003668 <HAL_ADC_Start_DMA>:
{
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366c:	6800      	ldr	r0, [r0, #0]
 800366e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8003672:	460f      	mov	r7, r1
 8003674:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003676:	d062      	beq.n	800373e <HAL_ADC_Start_DMA+0xd6>
 8003678:	4a38      	ldr	r2, [pc, #224]	; (800375c <HAL_ADC_Start_DMA+0xf4>)
 800367a:	4d39      	ldr	r5, [pc, #228]	; (8003760 <HAL_ADC_Start_DMA+0xf8>)
 800367c:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_ADC_Start_DMA+0xfc>)
 800367e:	4290      	cmp	r0, r2
 8003680:	bf18      	it	ne
 8003682:	461d      	movne	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003684:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003686:	6885      	ldr	r5, [r0, #8]
 8003688:	076a      	lsls	r2, r5, #29
 800368a:	d456      	bmi.n	800373a <HAL_ADC_Start_DMA+0xd2>
    __HAL_LOCK(hadc);
 800368c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8003690:	2a01      	cmp	r2, #1
 8003692:	d052      	beq.n	800373a <HAL_ADC_Start_DMA+0xd2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003694:	f003 051f 	and.w	r5, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003698:	4b33      	ldr	r3, [pc, #204]	; (8003768 <HAL_ADC_Start_DMA+0x100>)
    __HAL_LOCK(hadc);
 800369a:	2201      	movs	r2, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800369c:	4298      	cmp	r0, r3
    __HAL_LOCK(hadc);
 800369e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80036a2:	d006      	beq.n	80036b2 <HAL_ADC_Start_DMA+0x4a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036a4:	2d09      	cmp	r5, #9
 80036a6:	d84c      	bhi.n	8003742 <HAL_ADC_Start_DMA+0xda>
 80036a8:	f240 2321 	movw	r3, #545	; 0x221
 80036ac:	40eb      	lsrs	r3, r5
 80036ae:	07db      	lsls	r3, r3, #31
 80036b0:	d547      	bpl.n	8003742 <HAL_ADC_Start_DMA+0xda>
      tmp_hal_status = ADC_Enable(hadc);
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff ff9c 	bl	80035f0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d147      	bne.n	800374c <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 80036bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036be:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80036c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_ADC_Start_DMA+0xf4>)
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d03f      	beq.n	8003754 <HAL_ADC_Start_DMA+0xec>
 80036d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036d8:	4299      	cmp	r1, r3
 80036da:	d03b      	beq.n	8003754 <HAL_ADC_Start_DMA+0xec>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036e2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036e8:	4d20      	ldr	r5, [pc, #128]	; (800376c <HAL_ADC_Start_DMA+0x104>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036ea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ee:	bf1c      	itt	ne
 80036f0:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80036f2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80036f6:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036f8:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036fa:	4d1d      	ldr	r5, [pc, #116]	; (8003770 <HAL_ADC_Start_DMA+0x108>)
 80036fc:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036fe:	4d1d      	ldr	r5, [pc, #116]	; (8003774 <HAL_ADC_Start_DMA+0x10c>)
 8003700:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003702:	251c      	movs	r5, #28
 8003704:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8003706:	2500      	movs	r5, #0
 8003708:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800370c:	684d      	ldr	r5, [r1, #4]
 800370e:	f045 0510 	orr.w	r5, r5, #16
 8003712:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003714:	68cd      	ldr	r5, [r1, #12]
 8003716:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800371a:	4633      	mov	r3, r6
 800371c:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800371e:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003720:	3140      	adds	r1, #64	; 0x40
 8003722:	f000 fa87 	bl	8003c34 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003726:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003728:	6893      	ldr	r3, [r2, #8]
 800372a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800372e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6093      	str	r3, [r2, #8]
}
 8003738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 800373a:	2002      	movs	r0, #2
}
 800373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800373e:	4d08      	ldr	r5, [pc, #32]	; (8003760 <HAL_ADC_Start_DMA+0xf8>)
 8003740:	e7a0      	b.n	8003684 <HAL_ADC_Start_DMA+0x1c>
      __HAL_UNLOCK(hadc);
 8003742:	2300      	movs	r3, #0
 8003744:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8003748:	2001      	movs	r0, #1
}
 800374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 800374c:	2300      	movs	r3, #0
 800374e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8003752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003754:	2d00      	cmp	r5, #0
 8003756:	d1c5      	bne.n	80036e4 <HAL_ADC_Start_DMA+0x7c>
 8003758:	e7c0      	b.n	80036dc <HAL_ADC_Start_DMA+0x74>
 800375a:	bf00      	nop
 800375c:	50000100 	.word	0x50000100
 8003760:	50000300 	.word	0x50000300
 8003764:	50000700 	.word	0x50000700
 8003768:	50000600 	.word	0x50000600
 800376c:	08003039 	.word	0x08003039
 8003770:	08003029 	.word	0x08003029
 8003774:	080030a5 	.word	0x080030a5

08003778 <ADC_Disable>:
{
 8003778:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800377a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	0795      	lsls	r5, r2, #30
 8003780:	d502      	bpl.n	8003788 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003782:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003784:	2000      	movs	r0, #0
}
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800378a:	07d4      	lsls	r4, r2, #31
 800378c:	d52b      	bpl.n	80037e6 <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	f002 020d 	and.w	r2, r2, #13
 8003794:	2a01      	cmp	r2, #1
 8003796:	4604      	mov	r4, r0
 8003798:	d008      	beq.n	80037ac <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800379c:	f043 0310 	orr.w	r3, r3, #16
 80037a0:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a6:	4303      	orrs	r3, r0
 80037a8:	6623      	str	r3, [r4, #96]	; 0x60
}
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037b6:	2103      	movs	r1, #3
 80037b8:	f042 0202 	orr.w	r2, r2, #2
 80037bc:	609a      	str	r2, [r3, #8]
 80037be:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80037c0:	f7ff faf0 	bl	8002da4 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80037ca:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037cc:	d50b      	bpl.n	80037e6 <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037ce:	f7ff fae9 	bl	8002da4 <HAL_GetTick>
 80037d2:	1b40      	subs	r0, r0, r5
 80037d4:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037d6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037d8:	d902      	bls.n	80037e0 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	07d2      	lsls	r2, r2, #31
 80037de:	d4dc      	bmi.n	800379a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	07db      	lsls	r3, r3, #31
 80037e4:	d4f3      	bmi.n	80037ce <ADC_Disable+0x56>
  return HAL_OK;
 80037e6:	2000      	movs	r0, #0
}
 80037e8:	bd38      	pop	{r3, r4, r5, pc}
 80037ea:	bf00      	nop

080037ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037ec:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ee:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80037f2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80037f4:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80037f6:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80037f8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80037fa:	d040      	beq.n	800387e <HAL_ADCEx_Calibration_Start+0x92>
 80037fc:	2301      	movs	r3, #1
 80037fe:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003802:	4604      	mov	r4, r0
 8003804:	460d      	mov	r5, r1
 8003806:	f7ff ffb7 	bl	8003778 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800380a:	b9f0      	cbnz	r0, 800384a <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800380c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800380e:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003810:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003814:	f022 0202 	bic.w	r2, r2, #2
 8003818:	f042 0202 	orr.w	r2, r2, #2
 800381c:	65e2      	str	r2, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 800381e:	68b3      	ldr	r3, [r6, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_ADCEx_Calibration_Start+0x98>)
 8003822:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003826:	f005 4180 	and.w	r1, r5, #1073741824	; 0x40000000
 800382a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800382e:	430b      	orrs	r3, r1
 8003830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003834:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003836:	68b3      	ldr	r3, [r6, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	db0f      	blt.n	800385c <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003848:	e003      	b.n	8003852 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800384c:	f043 0310 	orr.w	r3, r3, #16
 8003850:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003852:	2300      	movs	r3, #0
 8003854:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003858:	b002      	add	sp, #8
 800385a:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index++;
 800385c:	9b01      	ldr	r3, [sp, #4]
 800385e:	3301      	adds	r3, #1
 8003860:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003862:	9b01      	ldr	r3, [sp, #4]
 8003864:	4293      	cmp	r3, r2
 8003866:	d9e6      	bls.n	8003836 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8003868:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800386a:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800386e:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003870:	f043 0310 	orr.w	r3, r3, #16
 8003874:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 8003876:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        return HAL_ERROR;
 800387a:	2001      	movs	r0, #1
 800387c:	e7ec      	b.n	8003858 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 800387e:	2002      	movs	r0, #2
}
 8003880:	b002      	add	sp, #8
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	0004de01 	.word	0x0004de01

08003888 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003888:	b1b0      	cbz	r0, 80038b8 <HAL_CORDIC_Init+0x30>
{
 800388a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800388c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003890:	4604      	mov	r4, r0
 8003892:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003896:	b153      	cbz	r3, 80038ae <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003898:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800389a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800389c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800389e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 80038a2:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 80038a6:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80038aa:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80038ac:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80038ae:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80038b2:	f7ff f8cb 	bl	8002a4c <HAL_CORDIC_MspInit>
 80038b6:	e7ef      	b.n	8003898 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80038b8:	2001      	movs	r0, #1
}
 80038ba:	4770      	bx	lr

080038bc <HAL_CORDIC_Configure>:
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80038bc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80038c0:	2a01      	cmp	r2, #1
{
 80038c2:	4603      	mov	r3, r0
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80038c4:	d005      	beq.n	80038d2 <HAL_CORDIC_Configure+0x16>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80038c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80038c8:	f042 0202 	orr.w	r2, r2, #2

    /* Return error status */
    status = HAL_ERROR;
 80038cc:	2001      	movs	r0, #1
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Return function status */
  return status;
}
 80038d0:	4770      	bx	lr
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80038d2:	6988      	ldr	r0, [r1, #24]
 80038d4:	680a      	ldr	r2, [r1, #0]
{
 80038d6:	b410      	push	{r4}
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80038d8:	684c      	ldr	r4, [r1, #4]
 80038da:	4302      	orrs	r2, r0
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	ea42 0304 	orr.w	r3, r2, r4
 80038e2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 80038e6:	4323      	orrs	r3, r4
 80038e8:	4313      	orrs	r3, r2
 80038ea:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 80038ee:	6804      	ldr	r4, [r0, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <HAL_CORDIC_Configure+0x48>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	4022      	ands	r2, r4
 80038f8:	4313      	orrs	r3, r2
 80038fa:	6003      	str	r3, [r0, #0]
}
 80038fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2000      	movs	r0, #0
}
 8003902:	4770      	bx	lr
 8003904:	ff87f800 	.word	0xff87f800

08003908 <HAL_CORDIC_CalculateZO>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_CalculateZO(CORDIC_HandleTypeDef *hcordic, int32_t *pInBuff, int32_t *pOutBuff,
                                         uint32_t NbCalc, uint32_t Timeout)
{
 8003908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	4607      	mov	r7, r0
  uint32_t index;
  int32_t *p_tmp_in_buff = pInBuff;
  int32_t *p_tmp_out_buff = pOutBuff;

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 800390e:	b191      	cbz	r1, 8003936 <HAL_CORDIC_CalculateZO+0x2e>
 8003910:	4692      	mov	sl, r2
 8003912:	b182      	cbz	r2, 8003936 <HAL_CORDIC_CalculateZO+0x2e>
 8003914:	461e      	mov	r6, r3
 8003916:	b173      	cbz	r3, 8003936 <HAL_CORDIC_CalculateZO+0x2e>
    /* Return error status */
    return HAL_ERROR;
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8003918:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800391c:	2b01      	cmp	r3, #1
 800391e:	fa5f f983 	uxtb.w	r9, r3
 8003922:	d011      	beq.n	8003948 <HAL_CORDIC_CalculateZO+0x40>
    return HAL_OK;
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8003924:	6a43      	ldr	r3, [r0, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8003926:	f04f 0901 	mov.w	r9, #1
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8003930:	4648      	mov	r0, r9
 8003932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    return HAL_ERROR;
 8003938:	f04f 0901 	mov.w	r9, #1
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 800393c:	ea43 0309 	orr.w	r3, r3, r9
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003942:	4648      	mov	r0, r9
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	6243      	str	r3, [r0, #36]	; 0x24
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 800394c:	2302      	movs	r3, #2
 800394e:	460c      	mov	r4, r1
 8003950:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    tickstart = HAL_GetTick();
 8003954:	f7ff fa26 	bl	8002da4 <HAL_GetTick>
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003958:	683d      	ldr	r5, [r7, #0]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	606b      	str	r3, [r5, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 800395e:	682b      	ldr	r3, [r5, #0]
 8003960:	02da      	lsls	r2, r3, #11
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003962:	bf45      	ittet	mi
 8003964:	6863      	ldrmi	r3, [r4, #4]
 8003966:	606b      	strmi	r3, [r5, #4]
  (*ppInBuff)++;
 8003968:	3404      	addpl	r4, #4

    /* Increment input data pointer */
    (*ppInBuff)++;
 800396a:	3408      	addmi	r4, #8
    for (index = (NbCalc - 1U); index > 0U; index--)
 800396c:	3e01      	subs	r6, #1
    tickstart = HAL_GetTick();
 800396e:	4680      	mov	r8, r0
    for (index = (NbCalc - 1U); index > 0U; index--)
 8003970:	d01b      	beq.n	80039aa <HAL_CORDIC_CalculateZO+0xa2>
 8003972:	9b08      	ldr	r3, [sp, #32]
 8003974:	3301      	adds	r3, #1
 8003976:	d12a      	bne.n	80039ce <HAL_CORDIC_CalculateZO+0xc6>
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	606b      	str	r3, [r5, #4]
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	02db      	lsls	r3, r3, #11
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003980:	bf44      	itt	mi
 8003982:	6863      	ldrmi	r3, [r4, #4]
 8003984:	606b      	strmi	r3, [r5, #4]
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003986:	68ab      	ldr	r3, [r5, #8]
 8003988:	f8ca 3000 	str.w	r3, [sl]

  /* Increment output data pointer */
  (*ppOutBuff)++;

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 800398c:	682b      	ldr	r3, [r5, #0]
  (*ppInBuff)++;
 800398e:	bf54      	ite	pl
 8003990:	3404      	addpl	r4, #4
    (*ppInBuff)++;
 8003992:	3408      	addmi	r4, #8
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8003994:	0318      	lsls	r0, r3, #12
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003996:	bf45      	ittet	mi
 8003998:	68ab      	ldrmi	r3, [r5, #8]
 800399a:	f8ca 3004 	strmi.w	r3, [sl, #4]
  (*ppOutBuff)++;
 800399e:	f10a 0a04 	addpl.w	sl, sl, #4

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80039a2:	f10a 0a08 	addmi.w	sl, sl, #8
    for (index = (NbCalc - 1U); index > 0U; index--)
 80039a6:	3e01      	subs	r6, #1
 80039a8:	d1e6      	bne.n	8003978 <HAL_CORDIC_CalculateZO+0x70>
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80039aa:	68ab      	ldr	r3, [r5, #8]
 80039ac:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	031b      	lsls	r3, r3, #12
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80039b4:	bf44      	itt	mi
 80039b6:	68ab      	ldrmi	r3, [r5, #8]
 80039b8:	f8ca 3004 	strmi.w	r3, [sl, #4]
    hcordic->State = HAL_CORDIC_STATE_READY;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    return HAL_OK;
 80039c2:	f04f 0900 	mov.w	r9, #0
 80039c6:	e7bc      	b.n	8003942 <HAL_CORDIC_CalculateZO+0x3a>
    for (index = (NbCalc - 1U); index > 0U; index--)
 80039c8:	3e01      	subs	r6, #1
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80039ca:	683d      	ldr	r5, [r7, #0]
    for (index = (NbCalc - 1U); index > 0U; index--)
 80039cc:	d0ed      	beq.n	80039aa <HAL_CORDIC_CalculateZO+0xa2>
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	606b      	str	r3, [r5, #4]
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	02d9      	lsls	r1, r3, #11
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80039d6:	bf44      	itt	mi
 80039d8:	6863      	ldrmi	r3, [r4, #4]
 80039da:	606b      	strmi	r3, [r5, #4]
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80039dc:	68ab      	ldr	r3, [r5, #8]
 80039de:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80039e2:	682b      	ldr	r3, [r5, #0]
  (*ppInBuff)++;
 80039e4:	bf54      	ite	pl
 80039e6:	3404      	addpl	r4, #4
    (*ppInBuff)++;
 80039e8:	3408      	addmi	r4, #8
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80039ea:	031a      	lsls	r2, r3, #12
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80039ec:	bf45      	ittet	mi
 80039ee:	68ab      	ldrmi	r3, [r5, #8]
 80039f0:	f8ca 3004 	strmi.w	r3, [sl, #4]
  (*ppOutBuff)++;
 80039f4:	f10a 0a04 	addpl.w	sl, sl, #4
    (*ppOutBuff)++;
 80039f8:	f10a 0a08 	addmi.w	sl, sl, #8
        if ((HAL_GetTick() - tickstart) > Timeout)
 80039fc:	f7ff f9d2 	bl	8002da4 <HAL_GetTick>
 8003a00:	9a08      	ldr	r2, [sp, #32]
 8003a02:	eba0 0308 	sub.w	r3, r0, r8
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d9de      	bls.n	80039c8 <HAL_CORDIC_CalculateZO+0xc0>
          hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8003a0a:	2204      	movs	r2, #4
          hcordic->State = HAL_CORDIC_STATE_READY;
 8003a0c:	2301      	movs	r3, #1
          hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8003a0e:	627a      	str	r2, [r7, #36]	; 0x24
          hcordic->State = HAL_CORDIC_STATE_READY;
 8003a10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          return HAL_ERROR;
 8003a14:	e795      	b.n	8003942 <HAL_CORDIC_CalculateZO+0x3a>
 8003a16:	bf00      	nop

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a18:	4907      	ldr	r1, [pc, #28]	; (8003a38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a1a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a1c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a26:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a2a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003a32:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <HAL_NVIC_SetPriority+0x74>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a44:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a46:	f1c3 0e07 	rsb	lr, r3, #7
 8003a4a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a52:	bf28      	it	cs
 8003a54:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a58:	f1bc 0f06 	cmp.w	ip, #6
 8003a5c:	d91b      	bls.n	8003a96 <HAL_NVIC_SetPriority+0x5a>
 8003a5e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 3cff 	mov.w	ip, #4294967295
 8003a64:	fa0c fc03 	lsl.w	ip, ip, r3
 8003a68:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8003a70:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003a74:	ea21 010c 	bic.w	r1, r1, ip
 8003a78:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003a80:	db0c      	blt.n	8003a9c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a82:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a86:	0109      	lsls	r1, r1, #4
 8003a88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a8c:	b2c9      	uxtb	r1, r1
 8003a8e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a96:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a98:	4613      	mov	r3, r2
 8003a9a:	e7e7      	b.n	8003a6c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_NVIC_SetPriority+0x78>)
 8003a9e:	f000 000f 	and.w	r0, r0, #15
 8003aa2:	0109      	lsls	r1, r1, #4
 8003aa4:	4403      	add	r3, r0
 8003aa6:	b2c9      	uxtb	r1, r1
 8003aa8:	7619      	strb	r1, [r3, #24]
 8003aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00
 8003ab4:	e000ecfc 	.word	0xe000ecfc

08003ab8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	db08      	blt.n	8003ace <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <HAL_NVIC_EnableIRQ+0x18>)
 8003abe:	0941      	lsrs	r1, r0, #5
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f000 001f 	and.w	r0, r0, #31
 8003ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8003aca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	3801      	subs	r0, #1
 8003ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003ada:	d210      	bcs.n	8003afe <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003adc:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ade:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	4c08      	ldr	r4, [pc, #32]	; (8003b04 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003aea:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003af0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003af6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	6119      	str	r1, [r3, #16]
 8003afc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003afe:	2001      	movs	r0, #1
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d078      	beq.n	8003bfe <HAL_DMA_Init+0xf6>
{
 8003b0c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_DMA_Init+0xfc>)
 8003b10:	6804      	ldr	r4, [r0, #0]
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d95f      	bls.n	8003bd6 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b16:	4a3c      	ldr	r2, [pc, #240]	; (8003c08 <HAL_DMA_Init+0x100>)
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8003b1a:	493d      	ldr	r1, [pc, #244]	; (8003c10 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b1c:	4422      	add	r2, r4
 8003b1e:	fba3 3202 	umull	r3, r2, r3, r2
 8003b22:	0912      	lsrs	r2, r2, #4
 8003b24:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b26:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b28:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8003b2e:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b30:	69c6      	ldr	r6, [r0, #28]
 8003b32:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8003b38:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	6941      	ldr	r1, [r0, #20]
 8003b3e:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b40:	6981      	ldr	r1, [r0, #24]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b46:	fa5f fc84 	uxtb.w	ip, r4
 8003b4a:	4e30      	ldr	r6, [pc, #192]	; (8003c0c <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 8003b4c:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8003b52:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b56:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b58:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003b5c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b60:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8003b62:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8003b64:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b66:	4e2b      	ldr	r6, [pc, #172]	; (8003c14 <HAL_DMA_Init+0x10c>)
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_DMA_Init+0xfc>)
 8003b6a:	492b      	ldr	r1, [pc, #172]	; (8003c18 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b6c:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b70:	429c      	cmp	r4, r3
 8003b72:	bf98      	it	ls
 8003b74:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b76:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b7a:	4c28      	ldr	r4, [pc, #160]	; (8003c1c <HAL_DMA_Init+0x114>)
 8003b7c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b7e:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b82:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b84:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b88:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b8a:	6484      	str	r4, [r0, #72]	; 0x48
 8003b8c:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b90:	d02a      	beq.n	8003be8 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b92:	6845      	ldr	r5, [r0, #4]
 8003b94:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b96:	3d01      	subs	r5, #1
 8003b98:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b9a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b9e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ba2:	d827      	bhi.n	8003bf4 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ba6:	491f      	ldr	r1, [pc, #124]	; (8003c24 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ba8:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003baa:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bac:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bae:	f004 041f 	and.w	r4, r4, #31
 8003bb2:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bb6:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bb8:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bbc:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bbe:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_DMA_Init+0x120>)
 8003bc2:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc4:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8003bc6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8003bca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8003bce:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8003bd2:	4618      	mov	r0, r3
}
 8003bd4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <HAL_DMA_Init+0x124>)
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8003bda:	4915      	ldr	r1, [pc, #84]	; (8003c30 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bdc:	4422      	add	r2, r4
 8003bde:	fba3 3202 	umull	r3, r2, r3, r2
 8003be2:	0912      	lsrs	r2, r2, #4
 8003be4:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8003be6:	e79e      	b.n	8003b26 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be8:	2400      	movs	r4, #0
 8003bea:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bec:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8003bf4:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bf6:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bfa:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003bfc:	e7e2      	b.n	8003bc4 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8003bfe:	2001      	movs	r0, #1
}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40020407 	.word	0x40020407
 8003c08:	bffdfbf8 	.word	0xbffdfbf8
 8003c0c:	cccccccd 	.word	0xcccccccd
 8003c10:	40020400 	.word	0x40020400
 8003c14:	40020800 	.word	0x40020800
 8003c18:	40020820 	.word	0x40020820
 8003c1c:	40020880 	.word	0x40020880
 8003c20:	1000823f 	.word	0x1000823f
 8003c24:	40020940 	.word	0x40020940
 8003c28:	40020900 	.word	0x40020900
 8003c2c:	bffdfff8 	.word	0xbffdfff8
 8003c30:	40020000 	.word	0x40020000

08003c34 <HAL_DMA_Start_IT>:
{
 8003c34:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8003c36:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003c3a:	2c01      	cmp	r4, #1
 8003c3c:	d051      	beq.n	8003ce2 <HAL_DMA_Start_IT+0xae>
 8003c3e:	2401      	movs	r4, #1
 8003c40:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003c44:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8003c48:	2c01      	cmp	r4, #1
 8003c4a:	d005      	beq.n	8003c58 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8003c52:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8003c54:	2002      	movs	r0, #2
}
 8003c56:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	2402      	movs	r4, #2
 8003c5a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5e:	2400      	movs	r4, #0
 8003c60:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003c62:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c64:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8003c66:	6825      	ldr	r5, [r4, #0]
 8003c68:	f025 0501 	bic.w	r5, r5, #1
 8003c6c:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c6e:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8003c72:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8003c74:	b115      	cbz	r5, 8003c7c <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c76:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8003c7a:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c7c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003c7e:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8003c80:	f006 0c1f 	and.w	ip, r6, #31
 8003c84:	2601      	movs	r6, #1
 8003c86:	fa06 f60c 	lsl.w	r6, r6, ip
 8003c8a:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003c8c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c8e:	6883      	ldr	r3, [r0, #8]
 8003c90:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003c92:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8003c94:	bf0b      	itete	eq
 8003c96:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003c98:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003c9a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003c9c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003c9e:	b1bb      	cbz	r3, 8003cd0 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f043 030e 	orr.w	r3, r3, #14
 8003ca6:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ca8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	03d2      	lsls	r2, r2, #15
 8003cae:	d503      	bpl.n	8003cb8 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003cb8:	b11d      	cbz	r5, 8003cc2 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003cca:	6023      	str	r3, [r4, #0]
}
 8003ccc:	bcf0      	pop	{r4, r5, r6, r7}
 8003cce:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	f043 030a 	orr.w	r3, r3, #10
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	e7e2      	b.n	8003ca8 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8003ce2:	2002      	movs	r0, #2
}
 8003ce4:	bcf0      	pop	{r4, r5, r6, r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_DMA_IRQHandler>:
{
 8003ce8:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cea:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cec:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003cee:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cf0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003cf2:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	420a      	tst	r2, r1
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x36>
 8003d00:	f014 0f04 	tst.w	r4, #4
 8003d04:	d00b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d06:	682b      	ldr	r3, [r5, #0]
 8003d08:	069b      	lsls	r3, r3, #26
 8003d0a:	d403      	bmi.n	8003d14 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	f023 0304 	bic.w	r3, r3, #4
 8003d12:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003d14:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d16:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003d18:	b1cb      	cbz	r3, 8003d4e <HAL_DMA_IRQHandler+0x66>
}
 8003d1a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003d1c:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d1e:	2202      	movs	r2, #2
 8003d20:	409a      	lsls	r2, r3
 8003d22:	420a      	tst	r2, r1
 8003d24:	d015      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8003d26:	f014 0f02 	tst.w	r4, #2
 8003d2a:	d012      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	0699      	lsls	r1, r3, #26
 8003d30:	d406      	bmi.n	8003d40 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	f023 030a 	bic.w	r3, r3, #10
 8003d38:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8003d40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d42:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003d44:	2100      	movs	r1, #0
 8003d46:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e5      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x32>
}
 8003d4e:	bc70      	pop	{r4, r5, r6}
 8003d50:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d52:	2208      	movs	r2, #8
 8003d54:	409a      	lsls	r2, r3
 8003d56:	420a      	tst	r2, r1
 8003d58:	d0f9      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8003d5a:	0722      	lsls	r2, r4, #28
 8003d5c:	d5f7      	bpl.n	8003d4e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d5e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003d60:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d62:	f022 020e 	bic.w	r2, r2, #14
 8003d66:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d68:	2201      	movs	r2, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003d6e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d70:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d72:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003d74:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003d78:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d0e6      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x66>
}
 8003d80:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003d82:	4708      	bx	r1

08003d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d88:	680c      	ldr	r4, [r1, #0]
{
 8003d8a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	f000 8083 	beq.w	8003e98 <HAL_GPIO_Init+0x114>
 8003d92:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8003f70 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8003d9a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d9c:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003da0:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003da2:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8003da6:	ea15 0804 	ands.w	r8, r5, r4
 8003daa:	d06f      	beq.n	8003e8c <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dac:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8003db0:	f007 0203 	and.w	r2, r7, #3
 8003db4:	1e51      	subs	r1, r2, #1
 8003db6:	2901      	cmp	r1, #1
 8003db8:	d971      	bls.n	8003e9e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dba:	2a03      	cmp	r2, #3
 8003dbc:	f040 80b0 	bne.w	8003f20 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dc0:	fa02 f20c 	lsl.w	r2, r2, ip
 8003dc4:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8003dc6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dc8:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dca:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dcc:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003dd0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dd2:	d05b      	beq.n	8003e8c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd4:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8003de0:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8003de4:	f002 0201 	and.w	r2, r2, #1
 8003de8:	9203      	str	r2, [sp, #12]
 8003dea:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003dec:	f023 0203 	bic.w	r2, r3, #3
 8003df0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003df4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003df8:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfc:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dfe:	00ad      	lsls	r5, r5, #2
 8003e00:	260f      	movs	r6, #15
 8003e02:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e06:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e0a:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e0e:	d019      	beq.n	8003e44 <HAL_GPIO_Init+0xc0>
 8003e10:	4e51      	ldr	r6, [pc, #324]	; (8003f58 <HAL_GPIO_Init+0x1d4>)
 8003e12:	42b0      	cmp	r0, r6
 8003e14:	f000 808f 	beq.w	8003f36 <HAL_GPIO_Init+0x1b2>
 8003e18:	4e50      	ldr	r6, [pc, #320]	; (8003f5c <HAL_GPIO_Init+0x1d8>)
 8003e1a:	42b0      	cmp	r0, r6
 8003e1c:	f000 808f 	beq.w	8003f3e <HAL_GPIO_Init+0x1ba>
 8003e20:	4e4f      	ldr	r6, [pc, #316]	; (8003f60 <HAL_GPIO_Init+0x1dc>)
 8003e22:	42b0      	cmp	r0, r6
 8003e24:	f000 8081 	beq.w	8003f2a <HAL_GPIO_Init+0x1a6>
 8003e28:	4e4e      	ldr	r6, [pc, #312]	; (8003f64 <HAL_GPIO_Init+0x1e0>)
 8003e2a:	42b0      	cmp	r0, r6
 8003e2c:	f000 808d 	beq.w	8003f4a <HAL_GPIO_Init+0x1c6>
 8003e30:	4e4d      	ldr	r6, [pc, #308]	; (8003f68 <HAL_GPIO_Init+0x1e4>)
 8003e32:	42b0      	cmp	r0, r6
 8003e34:	bf0c      	ite	eq
 8003e36:	f04f 0e05 	moveq.w	lr, #5
 8003e3a:	f04f 0e06 	movne.w	lr, #6
 8003e3e:	fa0e f505 	lsl.w	r5, lr, r5
 8003e42:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e44:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e46:	4a49      	ldr	r2, [pc, #292]	; (8003f6c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003e48:	4948      	ldr	r1, [pc, #288]	; (8003f6c <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8003e4a:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8003e4c:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e50:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8003e52:	bf54      	ite	pl
 8003e54:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e56:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8003e5a:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8003e5c:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e5e:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003e60:	4942      	ldr	r1, [pc, #264]	; (8003f6c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8003e62:	bf54      	ite	pl
 8003e64:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e66:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8003e6a:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8003e6c:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003e6e:	4a3f      	ldr	r2, [pc, #252]	; (8003f6c <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e70:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8003e72:	bf54      	ite	pl
 8003e74:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8003e76:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8003e7a:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e7c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e7e:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003e80:	493a      	ldr	r1, [pc, #232]	; (8003f6c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8003e82:	bf54      	ite	pl
 8003e84:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e86:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8003e8a:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8003e8c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e8e:	fa34 f203 	lsrs.w	r2, r4, r3
 8003e92:	f10c 0c02 	add.w	ip, ip, #2
 8003e96:	d184      	bne.n	8003da2 <HAL_GPIO_Init+0x1e>
  }
}
 8003e98:	b005      	add	sp, #20
 8003e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003e9e:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea0:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ea4:	f04f 0e03 	mov.w	lr, #3
 8003ea8:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003eac:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb0:	fa06 f60c 	lsl.w	r6, r6, ip
 8003eb4:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8003eb6:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eb8:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8003ebc:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ec0:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec4:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8003ec8:	409d      	lsls	r5, r3
 8003eca:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8003ece:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8003ed0:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed2:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8003eda:	fa05 f50c 	lsl.w	r5, r5, ip
 8003ede:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003ee4:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	fa02 f20c 	lsl.w	r2, r2, ip
 8003eea:	f47f af6c 	bne.w	8003dc6 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8003eee:	08dd      	lsrs	r5, r3, #3
 8003ef0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003ef4:	9501      	str	r5, [sp, #4]
 8003ef6:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ef8:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003efc:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003efe:	f003 0e07 	and.w	lr, r3, #7
 8003f02:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003f06:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f08:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f0c:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003f10:	9e00      	ldr	r6, [sp, #0]
 8003f12:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003f16:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f18:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003f1c:	6235      	str	r5, [r6, #32]
 8003f1e:	e752      	b.n	8003dc6 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f20:	2103      	movs	r1, #3
 8003f22:	fa01 f10c 	lsl.w	r1, r1, ip
 8003f26:	43c9      	mvns	r1, r1
 8003f28:	e7d2      	b.n	8003ed0 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f2a:	f04f 0e03 	mov.w	lr, #3
 8003f2e:	fa0e f505 	lsl.w	r5, lr, r5
 8003f32:	4329      	orrs	r1, r5
 8003f34:	e786      	b.n	8003e44 <HAL_GPIO_Init+0xc0>
 8003f36:	fa0b f505 	lsl.w	r5, fp, r5
 8003f3a:	4329      	orrs	r1, r5
 8003f3c:	e782      	b.n	8003e44 <HAL_GPIO_Init+0xc0>
 8003f3e:	f04f 0e02 	mov.w	lr, #2
 8003f42:	fa0e f505 	lsl.w	r5, lr, r5
 8003f46:	4329      	orrs	r1, r5
 8003f48:	e77c      	b.n	8003e44 <HAL_GPIO_Init+0xc0>
 8003f4a:	f04f 0e04 	mov.w	lr, #4
 8003f4e:	fa0e f505 	lsl.w	r5, lr, r5
 8003f52:	4329      	orrs	r1, r5
 8003f54:	e776      	b.n	8003e44 <HAL_GPIO_Init+0xc0>
 8003f56:	bf00      	nop
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	48000c00 	.word	0x48000c00
 8003f64:	48001000 	.word	0x48001000
 8003f68:	48001400 	.word	0x48001400
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f74:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f78:	b970      	cbnz	r0, 8003f98 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f88:	d023      	beq.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8003f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003f96:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f98:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003f9c:	d009      	beq.n	8003fb2 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f9e:	6813      	ldr	r3, [r2, #0]
}
 8003fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8003fac:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc0:	d02f      	beq.n	8004022 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8003fc6:	2000      	movs	r0, #0
}
 8003fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003fd0:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fda:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fdc:	4c22      	ldr	r4, [pc, #136]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003fde:	4823      	ldr	r0, [pc, #140]	; (800406c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8003fe4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003fe8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	2132      	movs	r1, #50	; 0x32
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff4:	fba0 0303 	umull	r0, r3, r0, r3
 8003ff8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffa:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ffc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004000:	d506      	bpl.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004002:	e000      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x92>
 8004004:	b123      	cbz	r3, 8004010 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004006:	6951      	ldr	r1, [r2, #20]
 8004008:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800400a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400e:	d4f9      	bmi.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8004016:	bf54      	ite	pl
 8004018:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800401a:	2003      	movmi	r0, #3
}
 800401c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004020:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800402a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800402c:	4c0e      	ldr	r4, [pc, #56]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800402e:	480f      	ldr	r0, [pc, #60]	; (800406c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004030:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004034:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004038:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	2132      	movs	r1, #50	; 0x32
 800403e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004044:	fba0 0303 	umull	r0, r3, r0, r3
 8004048:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800404c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004050:	d5de      	bpl.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004052:	e001      	b.n	8004058 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0db      	beq.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004058:	6951      	ldr	r1, [r2, #20]
 800405a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800405c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004060:	d5d6      	bpl.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004062:	e7f7      	b.n	8004054 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8004064:	40007000 	.word	0x40007000
 8004068:	20000000 	.word	0x20000000
 800406c:	431bde83 	.word	0x431bde83

08004070 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004070:	4a02      	ldr	r2, [pc, #8]	; (800407c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004072:	6893      	ldr	r3, [r2, #8]
 8004074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004078:	6093      	str	r3, [r2, #8]
}
 800407a:	4770      	bx	lr
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004080:	2800      	cmp	r0, #0
 8004082:	f000 81c3 	beq.w	800440c <HAL_RCC_OscConfig+0x38c>
{
 8004086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	6803      	ldr	r3, [r0, #0]
 800408c:	07d9      	lsls	r1, r3, #31
{
 800408e:	b082      	sub	sp, #8
 8004090:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	d52d      	bpl.n	80040f0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004094:	49a6      	ldr	r1, [pc, #664]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004096:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004098:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800409e:	2a0c      	cmp	r2, #12
 80040a0:	f000 810a 	beq.w	80042b8 <HAL_RCC_OscConfig+0x238>
 80040a4:	2a08      	cmp	r2, #8
 80040a6:	f000 810c 	beq.w	80042c2 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040aa:	6863      	ldr	r3, [r4, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	f000 8133 	beq.w	800431a <HAL_RCC_OscConfig+0x29a>
 80040b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b8:	f000 819b 	beq.w	80043f2 <HAL_RCC_OscConfig+0x372>
 80040bc:	4d9c      	ldr	r5, [pc, #624]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80040be:	682a      	ldr	r2, [r5, #0]
 80040c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	682a      	ldr	r2, [r5, #0]
 80040c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040cc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 8128 	bne.w	8004324 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe fe66 	bl	8002da4 <HAL_GetTick>
 80040d8:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040da:	e005      	b.n	80040e8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fe62 	bl	8002da4 <HAL_GetTick>
 80040e0:	1b80      	subs	r0, r0, r6
 80040e2:	2864      	cmp	r0, #100	; 0x64
 80040e4:	f200 8142 	bhi.w	800436c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	039f      	lsls	r7, r3, #14
 80040ec:	d4f6      	bmi.n	80040dc <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	079e      	lsls	r6, r3, #30
 80040f2:	d528      	bpl.n	8004146 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f4:	4a8e      	ldr	r2, [pc, #568]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80040f6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	f000 80ec 	beq.w	80042dc <HAL_RCC_OscConfig+0x25c>
 8004104:	2b04      	cmp	r3, #4
 8004106:	f000 80ee 	beq.w	80042e6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410a:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800410c:	4d88      	ldr	r5, [pc, #544]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 811d 	beq.w	800434e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fe42 	bl	8002da4 <HAL_GetTick>
 8004120:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004122:	e005      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004124:	f7fe fe3e 	bl	8002da4 <HAL_GetTick>
 8004128:	1b80      	subs	r0, r0, r6
 800412a:	2802      	cmp	r0, #2
 800412c:	f200 811e 	bhi.w	800436c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	0558      	lsls	r0, r3, #21
 8004134:	d5f6      	bpl.n	8004124 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	686b      	ldr	r3, [r5, #4]
 8004138:	6922      	ldr	r2, [r4, #16]
 800413a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800413e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004142:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	071a      	lsls	r2, r3, #28
 8004148:	d519      	bpl.n	800417e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800414a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414c:	4d78      	ldr	r5, [pc, #480]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 809e 	beq.w	8004290 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8004154:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fe fe20 	bl	8002da4 <HAL_GetTick>
 8004164:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004166:	e005      	b.n	8004174 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004168:	f7fe fe1c 	bl	8002da4 <HAL_GetTick>
 800416c:	1b80      	subs	r0, r0, r6
 800416e:	2802      	cmp	r0, #2
 8004170:	f200 80fc 	bhi.w	800436c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004174:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004178:	079f      	lsls	r7, r3, #30
 800417a:	d5f5      	bpl.n	8004168 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	0759      	lsls	r1, r3, #29
 8004180:	d541      	bpl.n	8004206 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004182:	4b6b      	ldr	r3, [pc, #428]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004186:	00d2      	lsls	r2, r2, #3
 8004188:	f100 80f4 	bmi.w	8004374 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800418e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800419e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4e64      	ldr	r6, [pc, #400]	; (8004334 <HAL_RCC_OscConfig+0x2b4>)
 80041a2:	6833      	ldr	r3, [r6, #0]
 80041a4:	05df      	lsls	r7, r3, #23
 80041a6:	f140 8113 	bpl.w	80043d0 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041aa:	68a3      	ldr	r3, [r4, #8]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	f000 80e3 	beq.w	8004378 <HAL_RCC_OscConfig+0x2f8>
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	f000 8169 	beq.w	800448a <HAL_RCC_OscConfig+0x40a>
 80041b8:	4e5d      	ldr	r6, [pc, #372]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80041ba:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80041c6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 80d7 	bne.w	8004386 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fe fde4 	bl	8002da4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80041e0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fe fdde 	bl	8002da4 <HAL_GetTick>
 80041e8:	1bc0      	subs	r0, r0, r7
 80041ea:	4540      	cmp	r0, r8
 80041ec:	f200 80be 	bhi.w	800436c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80041f4:	079a      	lsls	r2, r3, #30
 80041f6:	d4f5      	bmi.n	80041e4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f8:	b125      	cbz	r5, 8004204 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fa:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80041fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	069b      	lsls	r3, r3, #26
 8004208:	d518      	bpl.n	800423c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420a:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800420c:	4d48      	ldr	r5, [pc, #288]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80ca 	beq.w	80043a8 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8004214:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fe fdc0 	bl	8002da4 <HAL_GetTick>
 8004224:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004226:	e005      	b.n	8004234 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004228:	f7fe fdbc 	bl	8002da4 <HAL_GetTick>
 800422c:	1b80      	subs	r0, r0, r6
 800422e:	2802      	cmp	r0, #2
 8004230:	f200 809c 	bhi.w	800436c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004234:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004238:	079f      	lsls	r7, r3, #30
 800423a:	d5f5      	bpl.n	8004228 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800423c:	69e0      	ldr	r0, [r4, #28]
 800423e:	b318      	cbz	r0, 8004288 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004240:	4d3b      	ldr	r5, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004242:	68ab      	ldr	r3, [r5, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b0c      	cmp	r3, #12
 800424a:	f000 812c 	beq.w	80044a6 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004250:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004256:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004258:	f000 80da 	beq.w	8004410 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800425c:	68eb      	ldr	r3, [r5, #12]
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004264:	68eb      	ldr	r3, [r5, #12]
 8004266:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fe fd98 	bl	8002da4 <HAL_GetTick>
 8004274:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004276:	e004      	b.n	8004282 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe fd94 	bl	8002da4 <HAL_GetTick>
 800427c:	1b00      	subs	r0, r0, r4
 800427e:	2802      	cmp	r0, #2
 8004280:	d874      	bhi.n	800436c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	d4f7      	bmi.n	8004278 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8004288:	2000      	movs	r0, #0
}
 800428a:	b002      	add	sp, #8
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004290:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800429c:	f7fe fd82 	bl	8002da4 <HAL_GetTick>
 80042a0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a2:	e004      	b.n	80042ae <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fe fd7e 	bl	8002da4 <HAL_GetTick>
 80042a8:	1b80      	subs	r0, r0, r6
 80042aa:	2802      	cmp	r0, #2
 80042ac:	d85e      	bhi.n	800436c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80042b2:	0798      	lsls	r0, r3, #30
 80042b4:	d4f6      	bmi.n	80042a4 <HAL_RCC_OscConfig+0x224>
 80042b6:	e761      	b.n	800417c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042bc:	2903      	cmp	r1, #3
 80042be:	f47f aef4 	bne.w	80040aa <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c2:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	0392      	lsls	r2, r2, #14
 80042c8:	f57f af12 	bpl.w	80040f0 <HAL_RCC_OscConfig+0x70>
 80042cc:	6862      	ldr	r2, [r4, #4]
 80042ce:	2a00      	cmp	r2, #0
 80042d0:	f47f af0e 	bne.w	80040f0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80042d4:	2001      	movs	r0, #1
}
 80042d6:	b002      	add	sp, #8
 80042d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042e0:	2a02      	cmp	r2, #2
 80042e2:	f47f af12 	bne.w	800410a <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	055d      	lsls	r5, r3, #21
 80042ec:	d502      	bpl.n	80042f4 <HAL_RCC_OscConfig+0x274>
 80042ee:	68e3      	ldr	r3, [r4, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80042f6:	6920      	ldr	r0, [r4, #16]
 80042f8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042fa:	490f      	ldr	r1, [pc, #60]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004300:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004304:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004306:	6808      	ldr	r0, [r1, #0]
 8004308:	f7fe fd0a 	bl	8002d20 <HAL_InitTick>
 800430c:	2800      	cmp	r0, #0
 800430e:	d1e1      	bne.n	80042d4 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	071a      	lsls	r2, r3, #28
 8004314:	f57f af33 	bpl.w	800417e <HAL_RCC_OscConfig+0xfe>
 8004318:	e717      	b.n	800414a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 800431c:	6813      	ldr	r3, [r2, #0]
 800431e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004322:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004324:	f7fe fd3e 	bl	8002da4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004328:	4e01      	ldr	r6, [pc, #4]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800432a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x2c6>
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe fd32 	bl	8002da4 <HAL_GetTick>
 8004340:	1b40      	subs	r0, r0, r5
 8004342:	2864      	cmp	r0, #100	; 0x64
 8004344:	d812      	bhi.n	800436c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004346:	6833      	ldr	r3, [r6, #0]
 8004348:	039b      	lsls	r3, r3, #14
 800434a:	d5f7      	bpl.n	800433c <HAL_RCC_OscConfig+0x2bc>
 800434c:	e6cf      	b.n	80040ee <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004354:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004356:	f7fe fd25 	bl	8002da4 <HAL_GetTick>
 800435a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	0559      	lsls	r1, r3, #21
 8004360:	d5d6      	bpl.n	8004310 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004362:	f7fe fd1f 	bl	8002da4 <HAL_GetTick>
 8004366:	1b80      	subs	r0, r0, r6
 8004368:	2802      	cmp	r0, #2
 800436a:	d9f7      	bls.n	800435c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 800436c:	2003      	movs	r0, #3
}
 800436e:	b002      	add	sp, #8
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004374:	2500      	movs	r5, #0
 8004376:	e713      	b.n	80041a0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x490>)
 800437a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004386:	f7fe fd0d 	bl	8002da4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	4f61      	ldr	r7, [pc, #388]	; (8004510 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800438c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	e004      	b.n	800439e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fe fd06 	bl	8002da4 <HAL_GetTick>
 8004398:	1b80      	subs	r0, r0, r6
 800439a:	4540      	cmp	r0, r8
 800439c:	d8e6      	bhi.n	800436c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800439e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a2:	0799      	lsls	r1, r3, #30
 80043a4:	d5f6      	bpl.n	8004394 <HAL_RCC_OscConfig+0x314>
 80043a6:	e727      	b.n	80041f8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80043a8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80043b4:	f7fe fcf6 	bl	8002da4 <HAL_GetTick>
 80043b8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ba:	e004      	b.n	80043c6 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043bc:	f7fe fcf2 	bl	8002da4 <HAL_GetTick>
 80043c0:	1b80      	subs	r0, r0, r6
 80043c2:	2802      	cmp	r0, #2
 80043c4:	d8d2      	bhi.n	800436c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80043ca:	0798      	lsls	r0, r3, #30
 80043cc:	d4f6      	bmi.n	80043bc <HAL_RCC_OscConfig+0x33c>
 80043ce:	e735      	b.n	800423c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d0:	6833      	ldr	r3, [r6, #0]
 80043d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043d8:	f7fe fce4 	bl	8002da4 <HAL_GetTick>
 80043dc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043de:	6833      	ldr	r3, [r6, #0]
 80043e0:	05d8      	lsls	r0, r3, #23
 80043e2:	f53f aee2 	bmi.w	80041aa <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e6:	f7fe fcdd 	bl	8002da4 <HAL_GetTick>
 80043ea:	1bc0      	subs	r0, r0, r7
 80043ec:	2802      	cmp	r0, #2
 80043ee:	d9f6      	bls.n	80043de <HAL_RCC_OscConfig+0x35e>
 80043f0:	e7bc      	b.n	800436c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043f6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004408:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440a:	e78b      	b.n	8004324 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 800440c:	2001      	movs	r0, #1
}
 800440e:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004410:	f7fe fcc8 	bl	8002da4 <HAL_GetTick>
 8004414:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	e004      	b.n	8004422 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe fcc4 	bl	8002da4 <HAL_GetTick>
 800441c:	1b80      	subs	r0, r0, r6
 800441e:	2802      	cmp	r0, #2
 8004420:	d8a4      	bhi.n	800436c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	0199      	lsls	r1, r3, #6
 8004426:	d4f7      	bmi.n	8004418 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004428:	68e9      	ldr	r1, [r5, #12]
 800442a:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCC_OscConfig+0x494>)
 800442c:	6a22      	ldr	r2, [r4, #32]
 800442e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004430:	4e37      	ldr	r6, [pc, #220]	; (8004510 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004432:	400b      	ands	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800443a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800443e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004442:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004446:	3801      	subs	r0, #1
 8004448:	0849      	lsrs	r1, r1, #1
 800444a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800444e:	3901      	subs	r1, #1
 8004450:	0852      	lsrs	r2, r2, #1
 8004452:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004456:	3a01      	subs	r2, #1
 8004458:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800445c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004464:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004466:	68eb      	ldr	r3, [r5, #12]
 8004468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800446e:	f7fe fc99 	bl	8002da4 <HAL_GetTick>
 8004472:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004474:	e005      	b.n	8004482 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004476:	f7fe fc95 	bl	8002da4 <HAL_GetTick>
 800447a:	1b00      	subs	r0, r0, r4
 800447c:	2802      	cmp	r0, #2
 800447e:	f63f af75 	bhi.w	800436c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	019a      	lsls	r2, r3, #6
 8004486:	d5f6      	bpl.n	8004476 <HAL_RCC_OscConfig+0x3f6>
 8004488:	e6fe      	b.n	8004288 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448a:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCC_OscConfig+0x490>)
 800448c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004490:	f042 0204 	orr.w	r2, r2, #4
 8004494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004498:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a4:	e76f      	b.n	8004386 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a6:	2801      	cmp	r0, #1
 80044a8:	f43f aeef 	beq.w	800428a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80044ac:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	6a22      	ldr	r2, [r4, #32]
 80044b0:	f003 0103 	and.w	r1, r3, #3
 80044b4:	4291      	cmp	r1, r2
 80044b6:	f47f af0d 	bne.w	80042d4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80044c6:	f47f af05 	bne.w	80042d4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044d0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80044d4:	f47f aefe 	bne.w	80042d4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80044da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044de:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80044e2:	f47f aef7 	bne.w	80042d4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044e8:	0852      	lsrs	r2, r2, #1
 80044ea:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80044ee:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044f0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80044f4:	f47f aeee 	bne.w	80042d4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004500:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004502:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8004506:	bf14      	ite	ne
 8004508:	2001      	movne	r0, #1
 800450a:	2000      	moveq	r0, #0
 800450c:	e6bd      	b.n	800428a <HAL_RCC_OscConfig+0x20a>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	019f800c 	.word	0x019f800c

08004518 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_RCC_GetSysClockFreq+0x64>)
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	f002 020c 	and.w	r2, r2, #12
 8004520:	2a04      	cmp	r2, #4
 8004522:	d027      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	f002 020c 	and.w	r2, r2, #12
 800452a:	2a08      	cmp	r2, #8
 800452c:	d024      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	f002 020c 	and.w	r2, r2, #12
 8004534:	2a0c      	cmp	r2, #12
 8004536:	d001      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8004538:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800453a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800453e:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004540:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8004544:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004546:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800454a:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800454e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004550:	bf0c      	ite	eq
 8004552:	4b0b      	ldreq	r3, [pc, #44]	; (8004580 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004554:	4b0b      	ldrne	r3, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004556:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_RCC_GetSysClockFreq+0x64>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004562:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004566:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004568:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800456c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800456e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004572:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004574:	4803      	ldr	r0, [pc, #12]	; (8004584 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004576:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <HAL_RCC_GetSysClockFreq+0x68>)
 800457a:	4770      	bx	lr
 800457c:	40021000 	.word	0x40021000
 8004580:	007a1200 	.word	0x007a1200
 8004584:	00f42400 	.word	0x00f42400

08004588 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004588:	2800      	cmp	r0, #0
 800458a:	f000 80ee 	beq.w	800476a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800458e:	4a7f      	ldr	r2, [pc, #508]	; (800478c <HAL_RCC_ClockConfig+0x204>)
{
 8004590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	428b      	cmp	r3, r1
 800459c:	460d      	mov	r5, r1
 800459e:	4604      	mov	r4, r0
 80045a0:	d20c      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	f023 030f 	bic.w	r3, r3, #15
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	428b      	cmp	r3, r1
 80045b4:	d002      	beq.n	80045bc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80045b6:	2001      	movs	r0, #1
}
 80045b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	07df      	lsls	r7, r3, #31
 80045c0:	d563      	bpl.n	800468a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	2a03      	cmp	r2, #3
 80045c6:	f000 809a 	beq.w	80046fe <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b71      	ldr	r3, [pc, #452]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045cc:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ce:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d0:	f000 8091 	beq.w	80046f6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d4:	055b      	lsls	r3, r3, #21
 80045d6:	d5ee      	bpl.n	80045b6 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045d8:	f7ff ff9e 	bl	8004518 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80045dc:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCC_ClockConfig+0x20c>)
 80045de:	4298      	cmp	r0, r3
 80045e0:	f200 80c5 	bhi.w	800476e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e4:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045e6:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4e69      	ldr	r6, [pc, #420]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 80045ec:	68b3      	ldr	r3, [r6, #8]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	431a      	orrs	r2, r3
 80045f4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80045f6:	f7fe fbd5 	bl	8002da4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80045fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004600:	e004      	b.n	800460c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004602:	f7fe fbcf 	bl	8002da4 <HAL_GetTick>
 8004606:	1bc0      	subs	r0, r0, r7
 8004608:	4540      	cmp	r0, r8
 800460a:	d871      	bhi.n	80046f0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460c:	68b3      	ldr	r3, [r6, #8]
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004618:	d1f3      	bne.n	8004602 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	079f      	lsls	r7, r3, #30
 800461e:	d436      	bmi.n	800468e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8004620:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8004624:	d103      	bne.n	800462e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004626:	68b3      	ldr	r3, [r6, #8]
 8004628:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800462e:	4e57      	ldr	r6, [pc, #348]	; (800478c <HAL_RCC_ClockConfig+0x204>)
 8004630:	6833      	ldr	r3, [r6, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	42ab      	cmp	r3, r5
 8004638:	d846      	bhi.n	80046c8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	075a      	lsls	r2, r3, #29
 800463e:	d506      	bpl.n	800464e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4953      	ldr	r1, [pc, #332]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004642:	68e0      	ldr	r0, [r4, #12]
 8004644:	688a      	ldr	r2, [r1, #8]
 8004646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800464a:	4302      	orrs	r2, r0
 800464c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	071b      	lsls	r3, r3, #28
 8004650:	d507      	bpl.n	8004662 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004652:	4a4f      	ldr	r2, [pc, #316]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004654:	6921      	ldr	r1, [r4, #16]
 8004656:	6893      	ldr	r3, [r2, #8]
 8004658:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800465c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004660:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004662:	f7ff ff59 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8004666:	4a4a      	ldr	r2, [pc, #296]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004668:	4c4b      	ldr	r4, [pc, #300]	; (8004798 <HAL_RCC_ClockConfig+0x210>)
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	494b      	ldr	r1, [pc, #300]	; (800479c <HAL_RCC_ClockConfig+0x214>)
 800466e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004672:	4603      	mov	r3, r0
 8004674:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8004676:	484a      	ldr	r0, [pc, #296]	; (80047a0 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004678:	f002 021f 	and.w	r2, r2, #31
 800467c:	40d3      	lsrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004680:	6800      	ldr	r0, [r0, #0]
}
 8004682:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004686:	f7fe bb4b 	b.w	8002d20 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468a:	079e      	lsls	r6, r3, #30
 800468c:	d5cf      	bpl.n	800462e <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468e:	0758      	lsls	r0, r3, #29
 8004690:	d504      	bpl.n	800469c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004692:	493f      	ldr	r1, [pc, #252]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004694:	688a      	ldr	r2, [r1, #8]
 8004696:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800469a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	0719      	lsls	r1, r3, #28
 800469e:	d506      	bpl.n	80046ae <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046a0:	4a3b      	ldr	r2, [pc, #236]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 80046a2:	6893      	ldr	r3, [r2, #8]
 80046a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046a8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ac:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 80046b0:	68a1      	ldr	r1, [r4, #8]
 80046b2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4e35      	ldr	r6, [pc, #212]	; (800478c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046be:	6833      	ldr	r3, [r6, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	d9b8      	bls.n	800463a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	f023 030f 	bic.w	r3, r3, #15
 80046ce:	432b      	orrs	r3, r5
 80046d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80046d2:	f7fe fb67 	bl	8002da4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80046da:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046dc:	6833      	ldr	r3, [r6, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	42ab      	cmp	r3, r5
 80046e4:	d0a9      	beq.n	800463a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e6:	f7fe fb5d 	bl	8002da4 <HAL_GetTick>
 80046ea:	1bc0      	subs	r0, r0, r7
 80046ec:	4540      	cmp	r0, r8
 80046ee:	d9f5      	bls.n	80046dc <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80046f0:	2003      	movs	r0, #3
}
 80046f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f6:	039a      	lsls	r2, r3, #14
 80046f8:	f53f af6e 	bmi.w	80045d8 <HAL_RCC_ClockConfig+0x50>
 80046fc:	e75b      	b.n	80045b6 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	4924      	ldr	r1, [pc, #144]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004700:	6808      	ldr	r0, [r1, #0]
 8004702:	0180      	lsls	r0, r0, #6
 8004704:	f57f af57 	bpl.w	80045b6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004708:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470a:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470c:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 800470e:	4f21      	ldr	r7, [pc, #132]	; (8004794 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004710:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8004714:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004716:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471a:	bf0c      	ite	eq
 800471c:	4e21      	ldreq	r6, [pc, #132]	; (80047a4 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471e:	4e22      	ldrne	r6, [pc, #136]	; (80047a8 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004720:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004722:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004726:	4e1a      	ldr	r6, [pc, #104]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004728:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800472c:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	68f0      	ldr	r0, [r6, #12]
 8004732:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8004736:	3001      	adds	r0, #1
 8004738:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 800473a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 800473e:	42b9      	cmp	r1, r7
 8004740:	d920      	bls.n	8004784 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004742:	68b1      	ldr	r1, [r6, #8]
 8004744:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8004748:	d005      	beq.n	8004756 <HAL_RCC_ClockConfig+0x1ce>
 800474a:	f013 0902 	ands.w	r9, r3, #2
 800474e:	f43f af4c 	beq.w	80045ea <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004752:	68a3      	ldr	r3, [r4, #8]
 8004754:	b9b3      	cbnz	r3, 8004784 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004756:	490e      	ldr	r1, [pc, #56]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004758:	688b      	ldr	r3, [r1, #8]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004764:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004768:	e73f      	b.n	80045ea <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
}
 800476c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <HAL_RCC_ClockConfig+0x208>)
 8004770:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004772:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477a:	ea43 0309 	orr.w	r3, r3, r9
 800477e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	e732      	b.n	80045ea <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004784:	f04f 0900 	mov.w	r9, #0
 8004788:	e72f      	b.n	80045ea <HAL_RCC_ClockConfig+0x62>
 800478a:	bf00      	nop
 800478c:	40022000 	.word	0x40022000
 8004790:	40021000 	.word	0x40021000
 8004794:	04c4b400 	.word	0x04c4b400
 8004798:	0800b8d0 	.word	0x0800b8d0
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000008 	.word	0x20000008
 80047a4:	007a1200 	.word	0x007a1200
 80047a8:	00f42400 	.word	0x00f42400

080047ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b0:	6803      	ldr	r3, [r0, #0]
{
 80047b2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80047b8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ba:	d056      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047bc:	4bac      	ldr	r3, [pc, #688]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047c0:	00d5      	lsls	r5, r2, #3
 80047c2:	f140 813e 	bpl.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c8:	4daa      	ldr	r5, [pc, #680]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d2:	f7fe fae7 	bl	8002da4 <HAL_GetTick>
 80047d6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fe fae3 	bl	8002da4 <HAL_GetTick>
 80047de:	1b83      	subs	r3, r0, r6
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	f200 8139 	bhi.w	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	05d8      	lsls	r0, r3, #23
 80047ea:	d5f6      	bpl.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ec:	4da0      	ldr	r5, [pc, #640]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047ee:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80047f6:	d027      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80047f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d025      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fe:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004802:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800480e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004816:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800481a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800481e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8004820:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004824:	f140 8148 	bpl.w	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe fabc 	bl	8002da4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004830:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004832:	e005      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fe fab6 	bl	8002da4 <HAL_GetTick>
 8004838:	1b80      	subs	r0, r0, r6
 800483a:	4540      	cmp	r0, r8
 800483c:	f200 810c 	bhi.w	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004840:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004844:	079b      	lsls	r3, r3, #30
 8004846:	d5f5      	bpl.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004848:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800484a:	4989      	ldr	r1, [pc, #548]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800484c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004850:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800485a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485c:	b127      	cbz	r7, 8004868 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4a84      	ldr	r2, [pc, #528]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004860:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	07dd      	lsls	r5, r3, #31
 800486c:	d508      	bpl.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800486e:	4980      	ldr	r1, [pc, #512]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004870:	6865      	ldr	r5, [r4, #4]
 8004872:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004876:	f022 0203 	bic.w	r2, r2, #3
 800487a:	432a      	orrs	r2, r5
 800487c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004880:	0799      	lsls	r1, r3, #30
 8004882:	d508      	bpl.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004884:	497a      	ldr	r1, [pc, #488]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004886:	68a5      	ldr	r5, [r4, #8]
 8004888:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800488c:	f022 020c 	bic.w	r2, r2, #12
 8004890:	432a      	orrs	r2, r5
 8004892:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004896:	075a      	lsls	r2, r3, #29
 8004898:	d508      	bpl.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800489a:	4975      	ldr	r1, [pc, #468]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800489c:	68e5      	ldr	r5, [r4, #12]
 800489e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048a2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80048a6:	432a      	orrs	r2, r5
 80048a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ac:	071f      	lsls	r7, r3, #28
 80048ae:	d508      	bpl.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b0:	496f      	ldr	r1, [pc, #444]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b2:	6925      	ldr	r5, [r4, #16]
 80048b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048bc:	432a      	orrs	r2, r5
 80048be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c2:	06de      	lsls	r6, r3, #27
 80048c4:	d508      	bpl.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c6:	496a      	ldr	r1, [pc, #424]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c8:	6965      	ldr	r5, [r4, #20]
 80048ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048d2:	432a      	orrs	r2, r5
 80048d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d8:	069d      	lsls	r5, r3, #26
 80048da:	d508      	bpl.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048dc:	4964      	ldr	r1, [pc, #400]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048de:	69a5      	ldr	r5, [r4, #24]
 80048e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048e8:	432a      	orrs	r2, r5
 80048ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ee:	0659      	lsls	r1, r3, #25
 80048f0:	d508      	bpl.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f2:	495f      	ldr	r1, [pc, #380]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f4:	69e5      	ldr	r5, [r4, #28]
 80048f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80048fe:	432a      	orrs	r2, r5
 8004900:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004904:	061a      	lsls	r2, r3, #24
 8004906:	d508      	bpl.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004908:	4959      	ldr	r1, [pc, #356]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800490a:	6a25      	ldr	r5, [r4, #32]
 800490c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004910:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004914:	432a      	orrs	r2, r5
 8004916:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800491a:	05df      	lsls	r7, r3, #23
 800491c:	d508      	bpl.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800491e:	4954      	ldr	r1, [pc, #336]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004920:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004922:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004926:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800492a:	432a      	orrs	r2, r5
 800492c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004930:	039e      	lsls	r6, r3, #14
 8004932:	d508      	bpl.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004934:	494e      	ldr	r1, [pc, #312]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004936:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004938:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800493c:	f022 0203 	bic.w	r2, r2, #3
 8004940:	432a      	orrs	r2, r5
 8004942:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004946:	059d      	lsls	r5, r3, #22
 8004948:	d508      	bpl.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800494a:	4949      	ldr	r1, [pc, #292]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800494c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800494e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004952:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004956:	432a      	orrs	r2, r5
 8004958:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800495c:	0559      	lsls	r1, r3, #21
 800495e:	d50b      	bpl.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004960:	4943      	ldr	r1, [pc, #268]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004962:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004964:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004968:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800496c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800496e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004972:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004976:	d071      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004978:	051a      	lsls	r2, r3, #20
 800497a:	d50b      	bpl.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800497c:	493c      	ldr	r1, [pc, #240]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004980:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004984:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004988:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800498a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800498e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004992:	d068      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004994:	04df      	lsls	r7, r3, #19
 8004996:	d50b      	bpl.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004998:	4935      	ldr	r1, [pc, #212]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800499a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800499c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049a4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049a6:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049ae:	d063      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049b0:	049e      	lsls	r6, r3, #18
 80049b2:	d50b      	bpl.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b4:	492e      	ldr	r1, [pc, #184]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80049b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049bc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80049c0:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ca:	d05a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049cc:	045d      	lsls	r5, r3, #17
 80049ce:	d50b      	bpl.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049d0:	4927      	ldr	r1, [pc, #156]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80049d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049d8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80049dc:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049de:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e6:	d051      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e8:	0419      	lsls	r1, r3, #16
 80049ea:	d50b      	bpl.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049ec:	4920      	ldr	r1, [pc, #128]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ee:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80049f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80049f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049f8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80049fa:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a02:	d048      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a04:	03da      	lsls	r2, r3, #15
 8004a06:	d50b      	bpl.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a08:	4919      	ldr	r1, [pc, #100]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a0a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004a0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a10:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004a14:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a16:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a1e:	d03f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a20:	035b      	lsls	r3, r3, #13
 8004a22:	d50b      	bpl.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a24:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a26:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a28:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a30:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a32:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a3a:	d036      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8004a3c:	b002      	add	sp, #8
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a48:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004a54:	2701      	movs	r7, #1
 8004a56:	e6b7      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8004a58:	2003      	movs	r0, #3
 8004a5a:	e6ff      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5c:	68ca      	ldr	r2, [r1, #12]
 8004a5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a62:	60ca      	str	r2, [r1, #12]
 8004a64:	e788      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a66:	68ca      	ldr	r2, [r1, #12]
 8004a68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a6c:	60ca      	str	r2, [r1, #12]
 8004a6e:	e791      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a78:	68ca      	ldr	r2, [r1, #12]
 8004a7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a7e:	60ca      	str	r2, [r1, #12]
 8004a80:	e796      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a82:	68ca      	ldr	r2, [r1, #12]
 8004a84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a88:	60ca      	str	r2, [r1, #12]
 8004a8a:	e79f      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8c:	68ca      	ldr	r2, [r1, #12]
 8004a8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a92:	60ca      	str	r2, [r1, #12]
 8004a94:	e7a8      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a96:	68ca      	ldr	r2, [r1, #12]
 8004a98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a9c:	60ca      	str	r2, [r1, #12]
 8004a9e:	e7b1      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004aa0:	68ca      	ldr	r2, [r1, #12]
 8004aa2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aa6:	60ca      	str	r2, [r1, #12]
 8004aa8:	e7ba      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aaa:	68d3      	ldr	r3, [r2, #12]
 8004aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab0:	60d3      	str	r3, [r2, #12]
}
 8004ab2:	b002      	add	sp, #8
 8004ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab8:	4613      	mov	r3, r2
 8004aba:	e6c6      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x9e>

08004abc <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d077      	beq.n	8004bb0 <HAL_SPI_Init+0xf4>
{
 8004ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ac4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	2e00      	cmp	r6, #0
 8004aca:	d058      	beq.n	8004b7e <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004acc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ad2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ada:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d059      	beq.n	8004b96 <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ae2:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae4:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004aec:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aee:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004af2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004af6:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af8:	d947      	bls.n	8004b8a <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004afa:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8004afe:	d159      	bne.n	8004bb4 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b02:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b04:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b0c:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b10:	6862      	ldr	r2, [r4, #4]
 8004b12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b16:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	431a      	orrs	r2, r3
 8004b24:	6963      	ldr	r3, [r4, #20]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	f006 0c10 	and.w	ip, r6, #16
 8004b36:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b3a:	69a6      	ldr	r6, [r4, #24]
 8004b3c:	69e3      	ldr	r3, [r4, #28]
 8004b3e:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8004b42:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8004b4c:	ea43 0308 	orr.w	r3, r3, r8
 8004b50:	433b      	orrs	r3, r7
 8004b52:	432b      	orrs	r3, r5
 8004b54:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b56:	0c33      	lsrs	r3, r6, #16
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	ea4e 0303 	orr.w	r3, lr, r3
 8004b60:	ea43 030c 	orr.w	r3, r3, ip
 8004b64:	4303      	orrs	r3, r0
 8004b66:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b68:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004b70:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b72:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b74:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b76:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b7e:	6843      	ldr	r3, [r0, #4]
 8004b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b84:	d0a5      	beq.n	8004ad2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b86:	61c6      	str	r6, [r0, #28]
 8004b88:	e7a3      	b.n	8004ad2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b90:	2500      	movs	r5, #0
 8004b92:	62a5      	str	r5, [r4, #40]	; 0x28
 8004b94:	e7b8      	b.n	8004b08 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8004b96:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7fd ff70 	bl	8002a80 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ba2:	e79e      	b.n	8004ae2 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ba6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004baa:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004bae:	e7ab      	b.n	8004b08 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
}
 8004bb2:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e7eb      	b.n	8004b90 <HAL_SPI_Init+0xd4>

08004bb8 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004bb8:	b348      	cbz	r0, 8004c0e <HAL_SRAM_Init+0x56>
{
 8004bba:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004bbc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004bc0:	4615      	mov	r5, r2
 8004bc2:	460e      	mov	r6, r1
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bca:	b1db      	cbz	r3, 8004c04 <HAL_SRAM_Init+0x4c>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004bcc:	4621      	mov	r1, r4
 8004bce:	f851 0b08 	ldr.w	r0, [r1], #8
 8004bd2:	f000 fa35 	bl	8005040 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004bd6:	68a2      	ldr	r2, [r4, #8]
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	4631      	mov	r1, r6
 8004bdc:	f000 fab2 	bl	8005144 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004be0:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8004be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004be6:	4629      	mov	r1, r5
 8004be8:	f000 fadc 	bl	80051a4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	68a1      	ldr	r1, [r4, #8]
 8004bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004bf4:	2501      	movs	r5, #1
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004bf6:	432b      	orrs	r3, r5
 8004bf8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8004bfc:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51

  return HAL_OK;
 8004c00:	2000      	movs	r0, #0
}
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8004c04:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 8004c08:	f7fd ff8c 	bl	8002b24 <HAL_SRAM_MspInit>
 8004c0c:	e7de      	b.n	8004bcc <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 8004c0e:	2001      	movs	r0, #1
}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f000 808c 	beq.w	8004d32 <HAL_TIM_Base_Init+0x11e>
{
 8004c1a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c20:	4604      	mov	r4, r0
 8004c22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d078      	beq.n	8004d1c <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	4944      	ldr	r1, [pc, #272]	; (8004d40 <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c34:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004c36:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c38:	d05c      	beq.n	8004cf4 <HAL_TIM_Base_Init+0xe0>
 8004c3a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004c3e:	d02c      	beq.n	8004c9a <HAL_TIM_Base_Init+0x86>
 8004c40:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004c44:	428a      	cmp	r2, r1
 8004c46:	d028      	beq.n	8004c9a <HAL_TIM_Base_Init+0x86>
 8004c48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c4c:	428a      	cmp	r2, r1
 8004c4e:	d024      	beq.n	8004c9a <HAL_TIM_Base_Init+0x86>
 8004c50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c54:	428a      	cmp	r2, r1
 8004c56:	d020      	beq.n	8004c9a <HAL_TIM_Base_Init+0x86>
 8004c58:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8004c5c:	428a      	cmp	r2, r1
 8004c5e:	d049      	beq.n	8004cf4 <HAL_TIM_Base_Init+0xe0>
 8004c60:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8004c64:	428a      	cmp	r2, r1
 8004c66:	d066      	beq.n	8004d36 <HAL_TIM_Base_Init+0x122>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c68:	4936      	ldr	r1, [pc, #216]	; (8004d44 <HAL_TIM_Base_Init+0x130>)
 8004c6a:	428a      	cmp	r2, r1
 8004c6c:	d05b      	beq.n	8004d26 <HAL_TIM_Base_Init+0x112>
 8004c6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c72:	428a      	cmp	r2, r1
 8004c74:	d057      	beq.n	8004d26 <HAL_TIM_Base_Init+0x112>
 8004c76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c7a:	428a      	cmp	r2, r1
 8004c7c:	d053      	beq.n	8004d26 <HAL_TIM_Base_Init+0x112>
 8004c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c82:	428a      	cmp	r2, r1
 8004c84:	d04f      	beq.n	8004d26 <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c86:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004c90:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c92:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c94:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c96:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	e010      	b.n	8004cbc <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8004c9a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c9c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ca2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004cb6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cba:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004cc8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ccc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004cd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004ce8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004cf0:	2000      	movs	r0, #0
}
 8004cf2:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004cfc:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	69a1      	ldr	r1, [r4, #24]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004d0c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004d16:	6963      	ldr	r3, [r4, #20]
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	e7cf      	b.n	8004cbc <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8004d1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d20:	f7fd feea 	bl	8002af8 <HAL_TIM_Base_MspInit>
 8004d24:	e781      	b.n	8004c2a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d26:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2e:	4303      	orrs	r3, r0
 8004d30:	e7e9      	b.n	8004d06 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8004d32:	2001      	movs	r0, #1
}
 8004d34:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004d36:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	e793      	b.n	8004c68 <HAL_TIM_Base_Init+0x54>
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40014000 	.word	0x40014000

08004d48 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d12f      	bne.n	8004db0 <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	6803      	ldr	r3, [r0, #0]
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_TIM_Base_Start+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d56:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5c:	d01a      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d017      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d64:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d7c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d84:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <HAL_TIM_Base_Start+0x4c>
 8004d8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	6899      	ldr	r1, [r3, #8]
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <HAL_TIM_Base_Start+0x74>)
 8004d98:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	2a06      	cmp	r2, #6
 8004d9c:	d00a      	beq.n	8004db4 <HAL_TIM_Base_Start+0x6c>
 8004d9e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004da2:	d007      	beq.n	8004db4 <HAL_TIM_Base_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004daa:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	4770      	bx	lr
    return HAL_ERROR;
 8004db0:	2001      	movs	r0, #1
 8004db2:	4770      	bx	lr
  return HAL_OK;
 8004db4:	2000      	movs	r0, #0
}
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	00010007 	.word	0x00010007

08004dc0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004dc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	f000 8095 	beq.w	8004ef4 <HAL_TIM_ConfigClockSource+0x134>
{
 8004dca:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004dce:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004dda:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_TIM_ConfigClockSource+0x1b4>)
 8004dde:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004de0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004de2:	680b      	ldr	r3, [r1, #0]
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	f000 80b4 	beq.w	8004f52 <HAL_TIM_ConfigClockSource+0x192>
 8004dea:	d829      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x80>
 8004dec:	2b50      	cmp	r3, #80	; 0x50
 8004dee:	f000 8084 	beq.w	8004efa <HAL_TIM_ConfigClockSource+0x13a>
 8004df2:	d940      	bls.n	8004e76 <HAL_TIM_ConfigClockSource+0xb6>
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d11a      	bne.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df8:	68cb      	ldr	r3, [r1, #12]
 8004dfa:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	6a21      	ldr	r1, [r4, #32]
 8004dfe:	f021 0110 	bic.w	r1, r1, #16
 8004e02:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e06:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e0a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004e0e:	6a23      	ldr	r3, [r4, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e10:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004e1a:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e1c:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e26:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2200      	movs	r2, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2c:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004e2e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004e30:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e32:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004e36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004e3a:	bc70      	pop	{r4, r5, r6}
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d074      	beq.n	8004f30 <HAL_TIM_ConfigClockSource+0x170>
 8004e46:	d943      	bls.n	8004ed0 <HAL_TIM_ConfigClockSource+0x110>
 8004e48:	494b      	ldr	r1, [pc, #300]	; (8004f78 <HAL_TIM_ConfigClockSource+0x1b8>)
 8004e4a:	428b      	cmp	r3, r1
 8004e4c:	d008      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004e4e:	d92f      	bls.n	8004eb0 <HAL_TIM_ConfigClockSource+0xf0>
 8004e50:	494a      	ldr	r1, [pc, #296]	; (8004f7c <HAL_TIM_ConfigClockSource+0x1bc>)
 8004e52:	428b      	cmp	r3, r1
 8004e54:	d004      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004e56:	f023 0c20 	bic.w	ip, r3, #32
 8004e5a:	3910      	subs	r1, #16
 8004e5c:	458c      	cmp	ip, r1
 8004e5e:	d1e6      	bne.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8004e60:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e62:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004e66:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8004e72:	60a3      	str	r3, [r4, #8]
}
 8004e74:	e7db      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d12f      	bne.n	8004eda <HAL_TIM_ConfigClockSource+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	684a      	ldr	r2, [r1, #4]
 8004e7c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e7e:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e80:	6a25      	ldr	r5, [r4, #32]
 8004e82:	f025 0501 	bic.w	r5, r5, #1
 8004e86:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e88:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e8a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004e92:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e94:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004e98:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e9a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004e9c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8004eac:	60a3      	str	r3, [r4, #8]
}
 8004eae:	e7be      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8004eb0:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <HAL_TIM_ConfigClockSource+0x1c0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d0d4      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004eb6:	d904      	bls.n	8004ec2 <HAL_TIM_ConfigClockSource+0x102>
 8004eb8:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <HAL_TIM_ConfigClockSource+0x1c4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d0d0      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	e7b5      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
 8004ec2:	f023 0210 	bic.w	r2, r3, #16
 8004ec6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004eca:	d0c9      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004ecc:	2201      	movs	r2, #1
 8004ece:	e7ae      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004ed0:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8004ed4:	bf18      	it	ne
 8004ed6:	2201      	movne	r2, #1
 8004ed8:	e7a9      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8004eda:	d8a8      	bhi.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d0bf      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004ee0:	d903      	bls.n	8004eea <HAL_TIM_ConfigClockSource+0x12a>
 8004ee2:	2b30      	cmp	r3, #48	; 0x30
 8004ee4:	d0bc      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	e7a1      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
 8004eea:	f033 0210 	bics.w	r2, r3, #16
 8004eee:	d0b7      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xa0>
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	e79c      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  __HAL_LOCK(htim);
 8004ef4:	2202      	movs	r2, #2
}
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	684a      	ldr	r2, [r1, #4]
 8004efc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004efe:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f00:	6a25      	ldr	r5, [r4, #32]
 8004f02:	f025 0501 	bic.w	r5, r5, #1
 8004f06:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f08:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004f12:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004f18:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004f1a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004f1c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f26:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8004f2c:	60a3      	str	r3, [r4, #8]
}
 8004f2e:	e77e      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f30:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004f34:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f36:	68c9      	ldr	r1, [r1, #12]
 8004f38:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f3a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f42:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f44:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8004f4c:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f4e:	60a3      	str	r3, [r4, #8]
      break;
 8004f50:	e76d      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f52:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004f56:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f58:	68c9      	ldr	r1, [r1, #12]
 8004f5a:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f64:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8004f66:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004f68:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 8004f70:	60a3      	str	r3, [r4, #8]
      break;
 8004f72:	e75c      	b.n	8004e2e <HAL_TIM_ConfigClockSource+0x6e>
 8004f74:	ffce0088 	.word	0xffce0088
 8004f78:	00100040 	.word	0x00100040
 8004f7c:	00100060 	.word	0x00100060
 8004f80:	00100020 	.word	0x00100020
 8004f84:	00100030 	.word	0x00100030

08004f88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d051      	beq.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8004f90:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f92:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f94:	4d28      	ldr	r5, [pc, #160]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f9c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004f9e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fa2:	d03b      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004fa4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004fa8:	42aa      	cmp	r2, r5
 8004faa:	d032      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8004fac:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8004fb0:	42aa      	cmp	r2, r5
 8004fb2:	d02e      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbe:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004fc4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc6:	d016      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d00f      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004fde:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d007      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004fe6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d104      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffc:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ffe:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005000:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005002:	2201      	movs	r2, #1
 8005004:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005008:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800500c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800500e:	4618      	mov	r0, r3
}
 8005010:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005012:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005014:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005018:	432b      	orrs	r3, r5
 800501a:	e7cb      	b.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 800501c:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800501e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005022:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005024:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502e:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005030:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005032:	e7e0      	b.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8005034:	2002      	movs	r0, #2
}
 8005036:	4770      	bx	lr
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400

08005040 <FMC_NORSRAM_Init>:
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005040:	680a      	ldr	r2, [r1, #0]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8005042:	688b      	ldr	r3, [r1, #8]
{
 8005044:	b4f0      	push	{r4, r5, r6, r7}
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005046:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
              Init->WaitSignal              | \
              Init->ExtendedMode            | \
              Init->AsynchronousWait        | \
              Init->WriteBurst);

  btcr_reg |= Init->ContinuousClock;
 800504a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  btcr_reg |= Init->WriteFifo;
 800504c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800504e:	f024 0401 	bic.w	r4, r4, #1
 8005052:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005056:	684c      	ldr	r4, [r1, #4]
 8005058:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800505c:	2b08      	cmp	r3, #8
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800505e:	ea43 0304 	orr.w	r3, r3, r4
 8005062:	68cc      	ldr	r4, [r1, #12]
 8005064:	ea43 0304 	orr.w	r3, r3, r4
 8005068:	690c      	ldr	r4, [r1, #16]
 800506a:	ea43 0304 	orr.w	r3, r3, r4
 800506e:	694c      	ldr	r4, [r1, #20]
 8005070:	ea43 0304 	orr.w	r3, r3, r4
 8005074:	698c      	ldr	r4, [r1, #24]
 8005076:	ea43 0304 	orr.w	r3, r3, r4
 800507a:	69cc      	ldr	r4, [r1, #28]
 800507c:	ea43 0304 	orr.w	r3, r3, r4
 8005080:	6a0c      	ldr	r4, [r1, #32]
 8005082:	ea43 0304 	orr.w	r3, r3, r4
 8005086:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005088:	ea43 0304 	orr.w	r3, r3, r4
 800508c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800508e:	ea43 0304 	orr.w	r3, r3, r4
 8005092:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005094:	ea43 0304 	orr.w	r3, r3, r4
 8005098:	ea43 0306 	orr.w	r3, r3, r6
 800509c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800509e:	ea43 0305 	orr.w	r3, r3, r5
 80050a2:	ea43 0304 	orr.w	r3, r3, r4
 80050a6:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80050a8:	ea43 0304 	orr.w	r3, r3, r4
 80050ac:	4c24      	ldr	r4, [pc, #144]	; (8005140 <FMC_NORSRAM_Init+0x100>)
 80050ae:	ea04 0407 	and.w	r4, r4, r7
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80050b2:	bf0c      	ite	eq
 80050b4:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 80050b8:	f04f 0c00 	movne.w	ip, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80050bc:	4323      	orrs	r3, r4
 80050be:	ea43 030c 	orr.w	r3, r3, ip

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80050c2:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80050c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80050ca:	d01a      	beq.n	8005102 <FMC_NORSRAM_Init+0xc2>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80050cc:	b1d2      	cbz	r2, 8005104 <FMC_NORSRAM_Init+0xc4>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80050ce:	6803      	ldr	r3, [r0, #0]
 80050d0:	431d      	orrs	r5, r3
 80050d2:	6005      	str	r5, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80050d4:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10f      	bne.n	80050fc <FMC_NORSRAM_Init+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80050dc:	6a03      	ldr	r3, [r0, #32]
 80050de:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	430b      	orrs	r3, r1

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80050e6:	2a04      	cmp	r2, #4
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80050e8:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 80050ea:	d024      	beq.n	8005136 <FMC_NORSRAM_Init+0xf6>
 80050ec:	d81e      	bhi.n	800512c <FMC_NORSRAM_Init+0xec>
 80050ee:	b19a      	cbz	r2, 8005118 <FMC_NORSRAM_Init+0xd8>
 80050f0:	2a02      	cmp	r2, #2
 80050f2:	d11b      	bne.n	800512c <FMC_NORSRAM_Init+0xec>
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
        break;

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80050f4:	6a03      	ldr	r3, [r0, #32]
 80050f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fa:	6203      	str	r3, [r0, #32]
        break;
    }
  }

  return HAL_OK;
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	bcf0      	pop	{r4, r5, r6, r7}
 8005100:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005102:	b972      	cbnz	r2, 8005122 <FMC_NORSRAM_Init+0xe2>
  if (Init->MaxChipSelectPulse == ENABLE)
 8005104:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8005108:	2b01      	cmp	r3, #1
 800510a:	d1f7      	bne.n	80050fc <FMC_NORSRAM_Init+0xbc>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800510c:	6a03      	ldr	r3, [r0, #32]
 800510e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4313      	orrs	r3, r2
 8005116:	6203      	str	r3, [r0, #32]
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8005118:	6a03      	ldr	r3, [r0, #32]
 800511a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511e:	6203      	str	r3, [r0, #32]
        break;
 8005120:	e7ec      	b.n	80050fc <FMC_NORSRAM_Init+0xbc>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8005122:	6803      	ldr	r3, [r0, #0]
 8005124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005128:	6003      	str	r3, [r0, #0]
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800512a:	e7d0      	b.n	80050ce <FMC_NORSRAM_Init+0x8e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800512c:	6a03      	ldr	r3, [r0, #32]
 800512e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005132:	6203      	str	r3, [r0, #32]
        break;
 8005134:	e7e2      	b.n	80050fc <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8005136:	6a03      	ldr	r3, [r0, #32]
 8005138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800513c:	6203      	str	r3, [r0, #32]
        break;
 800513e:	e7dd      	b.n	80050fc <FMC_NORSRAM_Init+0xbc>
 8005140:	ff000480 	.word	0xff000480

08005144 <FMC_NORSRAM_Timing_Init>:
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005144:	694b      	ldr	r3, [r1, #20]
 8005146:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 800514a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800514c:	f103 3cff 	add.w	ip, r3, #4294967295
 8005150:	69cc      	ldr	r4, [r1, #28]
 8005152:	6853      	ldr	r3, [r2, #4]
 8005154:	680b      	ldr	r3, [r1, #0]
 8005156:	4323      	orrs	r3, r4
 8005158:	684c      	ldr	r4, [r1, #4]
 800515a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800515e:	688c      	ldr	r4, [r1, #8]
 8005160:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8005164:	68cc      	ldr	r4, [r1, #12]
 8005166:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800516a:	690c      	ldr	r4, [r1, #16]
 800516c:	6989      	ldr	r1, [r1, #24]
 800516e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005172:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8005176:	3902      	subs	r1, #2
 8005178:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800517c:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800517e:	6803      	ldr	r3, [r0, #0]
 8005180:	02db      	lsls	r3, r3, #11
 8005182:	d50c      	bpl.n	800519e <FMC_NORSRAM_Timing_Init+0x5a>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8005184:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005186:	6843      	ldr	r3, [r0, #4]
 8005188:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800518c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005190:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8005194:	ea4e 0e02 	orr.w	lr, lr, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005198:	ea43 030e 	orr.w	r3, r3, lr
 800519c:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 800519e:	2000      	movs	r0, #0
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	bf00      	nop

080051a4 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a8:	d005      	beq.n	80051b6 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80051aa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80051ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80051b2:	2000      	movs	r0, #0
 80051b4:	4770      	bx	lr
{
 80051b6:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80051b8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80051bc:	69cd      	ldr	r5, [r1, #28]
 80051be:	680b      	ldr	r3, [r1, #0]
 80051c0:	f004 6c7f 	and.w	ip, r4, #267386880	; 0xff00000
 80051c4:	684c      	ldr	r4, [r1, #4]
 80051c6:	432b      	orrs	r3, r5
 80051c8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80051cc:	688c      	ldr	r4, [r1, #8]
 80051ce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80051d2:	68cc      	ldr	r4, [r1, #12]
 80051d4:	6909      	ldr	r1, [r1, #16]
 80051d6:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 80051da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80051de:	ea43 030c 	orr.w	r3, r3, ip
 80051e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80051e6:	bc30      	pop	{r4, r5}
 80051e8:	2000      	movs	r0, #0
 80051ea:	4770      	bx	lr

080051ec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80051ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80051f0:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	fa95 f2a5 	rbit	r2, r5
  return __builtin_clz(value);
 80051f6:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80051fa:	fa35 f302 	lsrs.w	r3, r5, r2
 80051fe:	f000 80a2 	beq.w	8005346 <LL_GPIO_Init+0x15a>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005202:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005206:	f04f 0e03 	mov.w	lr, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800520a:	43ee      	mvns	r6, r5
 800520c:	e041      	b.n	8005292 <LL_GPIO_Init+0xa6>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800520e:	f8d1 9010 	ldr.w	r9, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005212:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	d007      	beq.n	8005230 <LL_GPIO_Init+0x44>
  return __builtin_clz(value);
 8005220:	fab8 f888 	clz	r8, r8
 8005224:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005228:	fa0e f808 	lsl.w	r8, lr, r8
 800522c:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 8005234:	f1b8 0f00 	cmp.w	r8, #0
 8005238:	f000 808a 	beq.w	8005350 <LL_GPIO_Init+0x164>
  return __builtin_clz(value);
 800523c:	fab8 f888 	clz	r8, r8
 8005240:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005244:	fa09 f808 	lsl.w	r8, r9, r8
 8005248:	ea48 0a0a 	orr.w	sl, r8, sl

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800524c:	2c02      	cmp	r4, #2
 800524e:	f8c0 a00c 	str.w	sl, [r0, #12]
 8005252:	d054      	beq.n	80052fe <LL_GPIO_Init+0x112>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005254:	f8d0 8000 	ldr.w	r8, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	fa93 f9a3 	rbit	r9, r3
  if (value == 0U)
 800525c:	f1b9 0f00 	cmp.w	r9, #0
 8005260:	d007      	beq.n	8005272 <LL_GPIO_Init+0x86>
  return __builtin_clz(value);
 8005262:	fab9 f989 	clz	r9, r9
 8005266:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800526a:	fa0e f909 	lsl.w	r9, lr, r9
 800526e:	ea28 0809 	bic.w	r8, r8, r9
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005276:	2b00      	cmp	r3, #0
 8005278:	d068      	beq.n	800534c <LL_GPIO_Init+0x160>
  return __builtin_clz(value);
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fa04 f303 	lsl.w	r3, r4, r3
 8005284:	ea43 0308 	orr.w	r3, r3, r8
 8005288:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800528a:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800528c:	fa35 f302 	lsrs.w	r3, r5, r2
 8005290:	d059      	beq.n	8005346 <LL_GPIO_Init+0x15a>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005292:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 8005296:	402b      	ands	r3, r5
 8005298:	d0f7      	beq.n	800528a <LL_GPIO_Init+0x9e>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800529a:	684c      	ldr	r4, [r1, #4]
 800529c:	f104 38ff 	add.w	r8, r4, #4294967295
 80052a0:	f1b8 0f01 	cmp.w	r8, #1
 80052a4:	d8b3      	bhi.n	800520e <LL_GPIO_Init+0x22>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80052a6:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80052aa:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ae:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80052b2:	f1b8 0f00 	cmp.w	r8, #0
 80052b6:	d007      	beq.n	80052c8 <LL_GPIO_Init+0xdc>
  return __builtin_clz(value);
 80052b8:	fab8 f888 	clz	r8, r8
 80052bc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80052c0:	fa0e f808 	lsl.w	r8, lr, r8
 80052c4:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80052cc:	f1b8 0f00 	cmp.w	r8, #0
 80052d0:	d063      	beq.n	800539a <LL_GPIO_Init+0x1ae>
  return __builtin_clz(value);
 80052d2:	fab8 f888 	clz	r8, r8
 80052d6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80052da:	fa09 f808 	lsl.w	r8, r9, r8
 80052de:	ea48 0a0a 	orr.w	sl, r8, sl
 80052e2:	f8c0 a008 	str.w	sl, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80052e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80052ea:	68cf      	ldr	r7, [r1, #12]
 80052ec:	ea06 0808 	and.w	r8, r6, r8
 80052f0:	fb07 f905 	mul.w	r9, r7, r5
 80052f4:	ea48 0809 	orr.w	r8, r8, r9
 80052f8:	f8c0 8004 	str.w	r8, [r0, #4]
}
 80052fc:	e787      	b.n	800520e <LL_GPIO_Init+0x22>
        if (currentpin < LL_GPIO_PIN_8)
 80052fe:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005300:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8005304:	d827      	bhi.n	8005356 <LL_GPIO_Init+0x16a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005306:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800530e:	f1b8 0f00 	cmp.w	r8, #0
 8005312:	d008      	beq.n	8005326 <LL_GPIO_Init+0x13a>
  return __builtin_clz(value);
 8005314:	fab8 f888 	clz	r8, r8
 8005318:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800531c:	270f      	movs	r7, #15
 800531e:	fa07 f808 	lsl.w	r8, r7, r8
 8005322:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800532a:	f1b8 0f00 	cmp.w	r8, #0
 800532e:	d03a      	beq.n	80053a6 <LL_GPIO_Init+0x1ba>
  return __builtin_clz(value);
 8005330:	fab8 f888 	clz	r8, r8
 8005334:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005338:	fa09 f808 	lsl.w	r8, r9, r8
 800533c:	ea48 0a0a 	orr.w	sl, r8, sl
 8005340:	f8c0 a020 	str.w	sl, [r0, #32]
}
 8005344:	e786      	b.n	8005254 <LL_GPIO_Init+0x68>
  }
  return (SUCCESS);
}
 8005346:	2000      	movs	r0, #0
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	e797      	b.n	8005280 <LL_GPIO_Init+0x94>
 8005350:	f04f 0840 	mov.w	r8, #64	; 0x40
 8005354:	e776      	b.n	8005244 <LL_GPIO_Init+0x58>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005356:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800535a:	ea4f 2813 	mov.w	r8, r3, lsr #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	fa98 fba8 	rbit	fp, r8
  if (value == 0U)
 8005362:	f1bb 0f00 	cmp.w	fp, #0
 8005366:	d008      	beq.n	800537a <LL_GPIO_Init+0x18e>
  return __builtin_clz(value);
 8005368:	fabb fb8b 	clz	fp, fp
 800536c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005370:	270f      	movs	r7, #15
 8005372:	fa07 fb0b 	lsl.w	fp, r7, fp
 8005376:	ea2a 0a0b 	bic.w	sl, sl, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	fa98 f8a8 	rbit	r8, r8
  if (value == 0U)
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	d00d      	beq.n	80053a0 <LL_GPIO_Init+0x1b4>
  return __builtin_clz(value);
 8005384:	fab8 f888 	clz	r8, r8
 8005388:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800538c:	fa09 f808 	lsl.w	r8, r9, r8
 8005390:	ea48 0a0a 	orr.w	sl, r8, sl
 8005394:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
}
 8005398:	e75c      	b.n	8005254 <LL_GPIO_Init+0x68>
 800539a:	f04f 0840 	mov.w	r8, #64	; 0x40
 800539e:	e79c      	b.n	80052da <LL_GPIO_Init+0xee>
 80053a0:	f04f 0880 	mov.w	r8, #128	; 0x80
 80053a4:	e7f2      	b.n	800538c <LL_GPIO_Init+0x1a0>
 80053a6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80053aa:	e7c5      	b.n	8005338 <LL_GPIO_Init+0x14c>

080053ac <LL_RCC_GetUSARTClockFreq>:
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80053ac:	2803      	cmp	r0, #3
{
 80053ae:	b430      	push	{r4, r5}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80053b0:	d034      	beq.n	800541c <LL_RCC_GetUSARTClockFreq+0x70>
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80053b2:	280c      	cmp	r0, #12
 80053b4:	d005      	beq.n	80053c2 <LL_RCC_GetUSARTClockFreq+0x16>
        break;
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80053b6:	2830      	cmp	r0, #48	; 0x30
 80053b8:	f000 808c 	beq.w	80054d4 <LL_RCC_GetUSARTClockFreq+0x128>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80053bc:	2000      	movs	r0, #0
          break;
      }
    }
  }
  return usart_frequency;
}
 80053be:	bc30      	pop	{r4, r5}
 80053c0:	4770      	bx	lr
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80053c2:	4a7d      	ldr	r2, [pc, #500]	; (80055b8 <LL_RCC_GetUSARTClockFreq+0x20c>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80053c4:	497d      	ldr	r1, [pc, #500]	; (80055bc <LL_RCC_GetUSARTClockFreq+0x210>)
 80053c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d076      	beq.n	80054c4 <LL_RCC_GetUSARTClockFreq+0x118>
 80053d6:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80053da:	d04b      	beq.n	8005474 <LL_RCC_GetUSARTClockFreq+0xc8>
 80053dc:	3904      	subs	r1, #4
 80053de:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053e0:	6893      	ldr	r3, [r2, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	d04e      	beq.n	8005486 <LL_RCC_GetUSARTClockFreq+0xda>
static uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	f000 80e3 	beq.w	80055b4 <LL_RCC_GetUSARTClockFreq+0x208>
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	f000 80c5 	beq.w	800557e <LL_RCC_GetUSARTClockFreq+0x1d2>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80053f4:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053f6:	4970      	ldr	r1, [pc, #448]	; (80055b8 <LL_RCC_GetUSARTClockFreq+0x20c>)
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80053f8:	4872      	ldr	r0, [pc, #456]	; (80055c4 <LL_RCC_GetUSARTClockFreq+0x218>)
 80053fa:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053fc:	6889      	ldr	r1, [r1, #8]
 80053fe:	f3c2 1203 	ubfx	r2, r2, #4, #4
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005402:	f3c1 2102 	ubfx	r1, r1, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005406:	5c82      	ldrb	r2, [r0, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005408:	486f      	ldr	r0, [pc, #444]	; (80055c8 <LL_RCC_GetUSARTClockFreq+0x21c>)
 800540a:	5c40      	ldrb	r0, [r0, r1]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800540c:	f002 021f 	and.w	r2, r2, #31
 8005410:	40d3      	lsrs	r3, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005412:	f000 001f 	and.w	r0, r0, #31
 8005416:	fa23 f000 	lsr.w	r0, r3, r0
          break;
 800541a:	e7d0      	b.n	80053be <LL_RCC_GetUSARTClockFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800541c:	4a66      	ldr	r2, [pc, #408]	; (80055b8 <LL_RCC_GetUSARTClockFreq+0x20c>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800541e:	496b      	ldr	r1, [pc, #428]	; (80055cc <LL_RCC_GetUSARTClockFreq+0x220>)
 8005420:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800542c:	428b      	cmp	r3, r1
 800542e:	d049      	beq.n	80054c4 <LL_RCC_GetUSARTClockFreq+0x118>
 8005430:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8005434:	d01e      	beq.n	8005474 <LL_RCC_GetUSARTClockFreq+0xc8>
 8005436:	3901      	subs	r1, #1
 8005438:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800543a:	6893      	ldr	r3, [r2, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	d021      	beq.n	8005486 <LL_RCC_GetUSARTClockFreq+0xda>
  switch (LL_RCC_GetSysClkSource())
 8005442:	2b08      	cmp	r3, #8
 8005444:	f000 8099 	beq.w	800557a <LL_RCC_GetUSARTClockFreq+0x1ce>
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d07a      	beq.n	8005542 <LL_RCC_GetUSARTClockFreq+0x196>
      frequency = HSI_VALUE;
 800544c:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800544e:	4a5a      	ldr	r2, [pc, #360]	; (80055b8 <LL_RCC_GetUSARTClockFreq+0x20c>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005450:	485c      	ldr	r0, [pc, #368]	; (80055c4 <LL_RCC_GetUSARTClockFreq+0x218>)
 8005452:	6891      	ldr	r1, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	f3c1 1103 	ubfx	r1, r1, #4, #4
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800545a:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800545e:	5c40      	ldrb	r0, [r0, r1]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005460:	4959      	ldr	r1, [pc, #356]	; (80055c8 <LL_RCC_GetUSARTClockFreq+0x21c>)
 8005462:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005464:	f000 001f 	and.w	r0, r0, #31
 8005468:	fa23 f000 	lsr.w	r0, r3, r0
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800546c:	f002 031f 	and.w	r3, r2, #31
 8005470:	40d8      	lsrs	r0, r3
        break;
 8005472:	e7a4      	b.n	80053be <LL_RCC_GetUSARTClockFreq+0x12>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005474:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
          usart_frequency = LSE_VALUE;
 8005478:	f010 0002 	ands.w	r0, r0, #2
 800547c:	bf18      	it	ne
 800547e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 8005482:	bc30      	pop	{r4, r5}
 8005484:	4770      	bx	lr
  switch (LL_RCC_GetSysClkSource())
 8005486:	2b08      	cmp	r3, #8
 8005488:	d059      	beq.n	800553e <LL_RCC_GetUSARTClockFreq+0x192>
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d155      	bne.n	800553a <LL_RCC_GetUSARTClockFreq+0x18e>
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800548e:	68d5      	ldr	r5, [r2, #12]
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005490:	68d0      	ldr	r0, [r2, #12]
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005492:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005494:	68d3      	ldr	r3, [r2, #12]
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005496:	4c4a      	ldr	r4, [pc, #296]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005498:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSE_VALUE;
 800549c:	494c      	ldr	r1, [pc, #304]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800549e:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80054a2:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80054a6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80054aa:	3301      	adds	r3, #1
      pllinputfreq = HSE_VALUE;
 80054ac:	2d03      	cmp	r5, #3
 80054ae:	bf18      	it	ne
 80054b0:	4621      	movne	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80054b2:	3201      	adds	r2, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	fb01 f000 	mul.w	r0, r1, r0
 80054ba:	fbb0 f0f2 	udiv	r0, r0, r2
 80054be:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80054c2:	e77c      	b.n	80053be <LL_RCC_GetUSARTClockFreq+0x12>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80054c4:	6810      	ldr	r0, [r2, #0]
          usart_frequency = HSI_VALUE;
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
 80054c8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80054cc:	bf18      	it	ne
 80054ce:	4618      	movne	r0, r3
}
 80054d0:	bc30      	pop	{r4, r5}
 80054d2:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80054d4:	4a38      	ldr	r2, [pc, #224]	; (80055b8 <LL_RCC_GetUSARTClockFreq+0x20c>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80054d6:	493f      	ldr	r1, [pc, #252]	; (80055d4 <LL_RCC_GetUSARTClockFreq+0x228>)
 80054d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054e4:	428b      	cmp	r3, r1
 80054e6:	d0ed      	beq.n	80054c4 <LL_RCC_GetUSARTClockFreq+0x118>
 80054e8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80054ec:	d0c2      	beq.n	8005474 <LL_RCC_GetUSARTClockFreq+0xc8>
 80054ee:	3910      	subs	r1, #16
 80054f0:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054f2:	6893      	ldr	r3, [r2, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	d0c5      	beq.n	8005486 <LL_RCC_GetUSARTClockFreq+0xda>
  switch (LL_RCC_GetSysClkSource())
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d05a      	beq.n	80055b4 <LL_RCC_GetUSARTClockFreq+0x208>
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	f47f af78 	bne.w	80053f4 <LL_RCC_GetUSARTClockFreq+0x48>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005504:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005506:	68d3      	ldr	r3, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005508:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800550a:	68d2      	ldr	r2, [r2, #12]
      pllinputfreq = HSE_VALUE;
 800550c:	482c      	ldr	r0, [pc, #176]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
 800550e:	4d30      	ldr	r5, [pc, #192]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005510:	f004 0403 	and.w	r4, r4, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005514:	f3c2 6241 	ubfx	r2, r2, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005518:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800551c:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8005520:	3201      	adds	r2, #1
      pllinputfreq = HSE_VALUE;
 8005522:	2c03      	cmp	r4, #3
 8005524:	bf08      	it	eq
 8005526:	4628      	moveq	r0, r5
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005528:	3101      	adds	r1, #1
 800552a:	0052      	lsls	r2, r2, #1
 800552c:	fb00 f303 	mul.w	r3, r0, r3
 8005530:	fbb3 f3f1 	udiv	r3, r3, r1
 8005534:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8005538:	e75d      	b.n	80053f6 <LL_RCC_GetUSARTClockFreq+0x4a>
  switch (LL_RCC_GetSysClkSource())
 800553a:	4821      	ldr	r0, [pc, #132]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
  return usart_frequency;
 800553c:	e73f      	b.n	80053be <LL_RCC_GetUSARTClockFreq+0x12>
      frequency = HSE_VALUE;
 800553e:	4824      	ldr	r0, [pc, #144]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
 8005540:	e73d      	b.n	80053be <LL_RCC_GetUSARTClockFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005542:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005544:	68d3      	ldr	r3, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005546:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005548:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 800554a:	4c1d      	ldr	r4, [pc, #116]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800554c:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSE_VALUE;
 8005550:	491f      	ldr	r1, [pc, #124]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005552:	f005 0c03 	and.w	ip, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005556:	f3c0 6041 	ubfx	r0, r0, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800555a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800555e:	3001      	adds	r0, #1
      pllinputfreq = HSE_VALUE;
 8005560:	f1bc 0f03 	cmp.w	ip, #3
 8005564:	bf18      	it	ne
 8005566:	4621      	movne	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005568:	3201      	adds	r2, #1
 800556a:	0040      	lsls	r0, r0, #1
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	fbb3 f3f2 	udiv	r3, r3, r2
 8005574:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8005578:	e769      	b.n	800544e <LL_RCC_GetUSARTClockFreq+0xa2>
  switch (LL_RCC_GetSysClkSource())
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
 800557c:	e767      	b.n	800544e <LL_RCC_GetUSARTClockFreq+0xa2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800557e:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005580:	68d3      	ldr	r3, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005582:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005584:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 8005586:	4c0e      	ldr	r4, [pc, #56]	; (80055c0 <LL_RCC_GetUSARTClockFreq+0x214>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005588:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSE_VALUE;
 800558c:	4910      	ldr	r1, [pc, #64]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800558e:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005592:	f3c0 6041 	ubfx	r0, r0, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005596:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800559a:	3001      	adds	r0, #1
      pllinputfreq = HSE_VALUE;
 800559c:	2d03      	cmp	r5, #3
 800559e:	bf18      	it	ne
 80055a0:	4621      	movne	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80055a2:	3201      	adds	r2, #1
 80055a4:	0040      	lsls	r0, r0, #1
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ae:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 80055b2:	e720      	b.n	80053f6 <LL_RCC_GetUSARTClockFreq+0x4a>
  switch (LL_RCC_GetSysClkSource())
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <LL_RCC_GetUSARTClockFreq+0x224>)
 80055b6:	e71e      	b.n	80053f6 <LL_RCC_GetUSARTClockFreq+0x4a>
 80055b8:	40021000 	.word	0x40021000
 80055bc:	000c0008 	.word	0x000c0008
 80055c0:	00f42400 	.word	0x00f42400
 80055c4:	0800b8d0 	.word	0x0800b8d0
 80055c8:	0800b8e0 	.word	0x0800b8e0
 80055cc:	00030002 	.word	0x00030002
 80055d0:	007a1200 	.word	0x007a1200
 80055d4:	00300020 	.word	0x00300020

080055d8 <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80055d8:	28c0      	cmp	r0, #192	; 0xc0
{
 80055da:	b430      	push	{r4, r5}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80055dc:	d033      	beq.n	8005646 <LL_RCC_GetUARTClockFreq+0x6e>
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80055de:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80055e2:	d12d      	bne.n	8005640 <LL_RCC_GetUARTClockFreq+0x68>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80055e4:	4a5a      	ldr	r2, [pc, #360]	; (8005750 <LL_RCC_GetUARTClockFreq+0x178>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80055e6:	495b      	ldr	r1, [pc, #364]	; (8005754 <LL_RCC_GetUARTClockFreq+0x17c>)
 80055e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80055f4:	428b      	cmp	r3, r1
 80055f6:	f000 8082 	beq.w	80056fe <LL_RCC_GetUARTClockFreq+0x126>
 80055fa:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80055fe:	d075      	beq.n	80056ec <LL_RCC_GetUARTClockFreq+0x114>
 8005600:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8005604:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005606:	6893      	ldr	r3, [r2, #8]
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	d04f      	beq.n	80056ae <LL_RCC_GetUARTClockFreq+0xd6>
  switch (LL_RCC_GetSysClkSource())
 800560e:	2b08      	cmp	r3, #8
 8005610:	d04b      	beq.n	80056aa <LL_RCC_GetUARTClockFreq+0xd2>
 8005612:	2b0c      	cmp	r3, #12
 8005614:	d07f      	beq.n	8005716 <LL_RCC_GetUARTClockFreq+0x13e>
      frequency = HSI_VALUE;
 8005616:	4b50      	ldr	r3, [pc, #320]	; (8005758 <LL_RCC_GetUARTClockFreq+0x180>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005618:	4a4d      	ldr	r2, [pc, #308]	; (8005750 <LL_RCC_GetUARTClockFreq+0x178>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800561a:	4850      	ldr	r0, [pc, #320]	; (800575c <LL_RCC_GetUARTClockFreq+0x184>)
 800561c:	6891      	ldr	r1, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800561e:	6892      	ldr	r2, [r2, #8]
 8005620:	f3c1 1103 	ubfx	r1, r1, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005624:	f3c2 2202 	ubfx	r2, r2, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005628:	5c40      	ldrb	r0, [r0, r1]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800562a:	494d      	ldr	r1, [pc, #308]	; (8005760 <LL_RCC_GetUARTClockFreq+0x188>)
 800562c:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800562e:	f000 001f 	and.w	r0, r0, #31
 8005632:	fa23 f000 	lsr.w	r0, r3, r0
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005636:	f002 031f 	and.w	r3, r2, #31
 800563a:	40d8      	lsrs	r0, r3
}
 800563c:	bc30      	pop	{r4, r5}
 800563e:	4770      	bx	lr
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005640:	2000      	movs	r0, #0
}
 8005642:	bc30      	pop	{r4, r5}
 8005644:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005646:	4a42      	ldr	r2, [pc, #264]	; (8005750 <LL_RCC_GetUARTClockFreq+0x178>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005648:	4946      	ldr	r1, [pc, #280]	; (8005764 <LL_RCC_GetUARTClockFreq+0x18c>)
 800564a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800564e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005652:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8005656:	428b      	cmp	r3, r1
 8005658:	d051      	beq.n	80056fe <LL_RCC_GetUARTClockFreq+0x126>
 800565a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800565e:	d045      	beq.n	80056ec <LL_RCC_GetUARTClockFreq+0x114>
 8005660:	3940      	subs	r1, #64	; 0x40
 8005662:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005664:	6893      	ldr	r3, [r2, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
 800566a:	d020      	beq.n	80056ae <LL_RCC_GetUARTClockFreq+0xd6>
  switch (LL_RCC_GetSysClkSource())
 800566c:	2b08      	cmp	r3, #8
 800566e:	d01c      	beq.n	80056aa <LL_RCC_GetUARTClockFreq+0xd2>
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d1d0      	bne.n	8005616 <LL_RCC_GetUARTClockFreq+0x3e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005674:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005676:	68d3      	ldr	r3, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005678:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800567a:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 800567c:	4c36      	ldr	r4, [pc, #216]	; (8005758 <LL_RCC_GetUARTClockFreq+0x180>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800567e:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSE_VALUE;
 8005682:	4939      	ldr	r1, [pc, #228]	; (8005768 <LL_RCC_GetUARTClockFreq+0x190>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005684:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005688:	f3c0 6041 	ubfx	r0, r0, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800568c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8005690:	3001      	adds	r0, #1
      pllinputfreq = HSE_VALUE;
 8005692:	2d03      	cmp	r5, #3
 8005694:	bf18      	it	ne
 8005696:	4621      	movne	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005698:	3201      	adds	r2, #1
 800569a:	0040      	lsls	r0, r0, #1
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a4:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 80056a8:	e7b6      	b.n	8005618 <LL_RCC_GetUARTClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <LL_RCC_GetUARTClockFreq+0x190>)
 80056ac:	e7b4      	b.n	8005618 <LL_RCC_GetUARTClockFreq+0x40>
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d02f      	beq.n	8005712 <LL_RCC_GetUARTClockFreq+0x13a>
 80056b2:	2b0c      	cmp	r3, #12
 80056b4:	d12b      	bne.n	800570e <LL_RCC_GetUARTClockFreq+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80056b6:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80056b8:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80056ba:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80056bc:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSE_VALUE;
 80056be:	4c26      	ldr	r4, [pc, #152]	; (8005758 <LL_RCC_GetUARTClockFreq+0x180>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80056c0:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSE_VALUE;
 80056c4:	4928      	ldr	r1, [pc, #160]	; (8005768 <LL_RCC_GetUARTClockFreq+0x190>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80056c6:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80056ca:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80056ce:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80056d2:	3301      	adds	r3, #1
      pllinputfreq = HSE_VALUE;
 80056d4:	2d03      	cmp	r5, #3
 80056d6:	bf18      	it	ne
 80056d8:	4621      	movne	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80056da:	3201      	adds	r2, #1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	fb01 f000 	mul.w	r0, r1, r0
 80056e2:	fbb0 f0f2 	udiv	r0, r0, r2
 80056e6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80056ea:	e7aa      	b.n	8005642 <LL_RCC_GetUARTClockFreq+0x6a>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80056ec:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
          uart_frequency = LSE_VALUE;
 80056f0:	f010 0002 	ands.w	r0, r0, #2
 80056f4:	bf18      	it	ne
 80056f6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 80056fa:	bc30      	pop	{r4, r5}
 80056fc:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80056fe:	6810      	ldr	r0, [r2, #0]
          uart_frequency = HSI_VALUE;
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <LL_RCC_GetUARTClockFreq+0x180>)
 8005702:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8005706:	bf18      	it	ne
 8005708:	4618      	movne	r0, r3
}
 800570a:	bc30      	pop	{r4, r5}
 800570c:	4770      	bx	lr
  switch (LL_RCC_GetSysClkSource())
 800570e:	4812      	ldr	r0, [pc, #72]	; (8005758 <LL_RCC_GetUARTClockFreq+0x180>)
 8005710:	e797      	b.n	8005642 <LL_RCC_GetUARTClockFreq+0x6a>
      frequency = HSE_VALUE;
 8005712:	4815      	ldr	r0, [pc, #84]	; (8005768 <LL_RCC_GetUARTClockFreq+0x190>)
 8005714:	e795      	b.n	8005642 <LL_RCC_GetUARTClockFreq+0x6a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005716:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005718:	68d3      	ldr	r3, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800571a:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800571c:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 800571e:	4c0e      	ldr	r4, [pc, #56]	; (8005758 <LL_RCC_GetUARTClockFreq+0x180>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005720:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSE_VALUE;
 8005724:	4910      	ldr	r1, [pc, #64]	; (8005768 <LL_RCC_GetUARTClockFreq+0x190>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005726:	f005 0c03 	and.w	ip, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800572a:	f3c0 6041 	ubfx	r0, r0, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800572e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8005732:	3001      	adds	r0, #1
      pllinputfreq = HSE_VALUE;
 8005734:	f1bc 0f03 	cmp.w	ip, #3
 8005738:	bf18      	it	ne
 800573a:	4621      	movne	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800573c:	3201      	adds	r2, #1
 800573e:	0040      	lsls	r0, r0, #1
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	fbb3 f3f2 	udiv	r3, r3, r2
 8005748:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 800574c:	e764      	b.n	8005618 <LL_RCC_GetUARTClockFreq+0x40>
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000
 8005754:	03000200 	.word	0x03000200
 8005758:	00f42400 	.word	0x00f42400
 800575c:	0800b8d0 	.word	0x0800b8d0
 8005760:	0800b8e0 	.word	0x0800b8e0
 8005764:	00c00080 	.word	0x00c00080
 8005768:	007a1200 	.word	0x007a1200

0800576c <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800576c:	4a30      	ldr	r2, [pc, #192]	; (8005830 <LL_TIM_Init+0xc4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800576e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005770:	4290      	cmp	r0, r2
{
 8005772:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005774:	d03f      	beq.n	80057f6 <LL_TIM_Init+0x8a>
 8005776:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800577a:	d028      	beq.n	80057ce <LL_TIM_Init+0x62>
 800577c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005780:	4290      	cmp	r0, r2
 8005782:	d024      	beq.n	80057ce <LL_TIM_Init+0x62>
 8005784:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005788:	4290      	cmp	r0, r2
 800578a:	d020      	beq.n	80057ce <LL_TIM_Init+0x62>
 800578c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005790:	4290      	cmp	r0, r2
 8005792:	d01c      	beq.n	80057ce <LL_TIM_Init+0x62>
 8005794:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005798:	4290      	cmp	r0, r2
 800579a:	d03e      	beq.n	800581a <LL_TIM_Init+0xae>
 800579c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80057a0:	4290      	cmp	r0, r2
 80057a2:	d040      	beq.n	8005826 <LL_TIM_Init+0xba>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a4:	4a23      	ldr	r2, [pc, #140]	; (8005834 <LL_TIM_Init+0xc8>)
 80057a6:	4290      	cmp	r0, r2
 80057a8:	d035      	beq.n	8005816 <LL_TIM_Init+0xaa>
 80057aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ae:	4290      	cmp	r0, r2
 80057b0:	d031      	beq.n	8005816 <LL_TIM_Init+0xaa>
 80057b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057b6:	4290      	cmp	r0, r2
 80057b8:	d02d      	beq.n	8005816 <LL_TIM_Init+0xaa>
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	4290      	cmp	r0, r2
 80057c0:	d029      	beq.n	8005816 <LL_TIM_Init+0xaa>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80057c2:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80057c4:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80057c6:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80057c8:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80057ca:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057cc:	e00c      	b.n	80057e8 <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80057ce:	684a      	ldr	r2, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80057d0:	68cd      	ldr	r5, [r1, #12]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80057d2:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80057d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d8:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80057de:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80057e0:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80057e2:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80057e4:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80057e6:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80057e8:	6943      	ldr	r3, [r0, #20]
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80057f0:	bc30      	pop	{r4, r5}
 80057f2:	2000      	movs	r0, #0
 80057f4:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80057f6:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80057f8:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	4323      	orrs	r3, r4
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005806:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005808:	688a      	ldr	r2, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800580a:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800580c:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800580e:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005810:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005812:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005814:	e7e8      	b.n	80057e8 <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005816:	68ca      	ldr	r2, [r1, #12]
 8005818:	e7f2      	b.n	8005800 <LL_TIM_Init+0x94>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800581a:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800581c:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	4323      	orrs	r3, r4
 8005824:	e7ec      	b.n	8005800 <LL_TIM_Init+0x94>
 8005826:	684a      	ldr	r2, [r1, #4]
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582e:	e7b9      	b.n	80057a4 <LL_TIM_Init+0x38>
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40014000 	.word	0x40014000

08005838 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8005838:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 800583c:	b430      	push	{r4, r5}
  switch (Channel)
 800583e:	f000 8123 	beq.w	8005a88 <LL_TIM_OC_Init+0x250>
 8005842:	d851      	bhi.n	80058e8 <LL_TIM_OC_Init+0xb0>
 8005844:	2910      	cmp	r1, #16
 8005846:	f000 816d 	beq.w	8005b24 <LL_TIM_OC_Init+0x2ec>
 800584a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800584e:	f040 8090 	bne.w	8005972 <LL_TIM_OC_Init+0x13a>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005852:	6a03      	ldr	r3, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005854:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585a:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800585c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800585e:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005860:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005862:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005866:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800586a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800586e:	6815      	ldr	r5, [r2, #0]
 8005870:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005874:	4329      	orrs	r1, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005876:	6855      	ldr	r5, [r2, #4]
 8005878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	4da7      	ldr	r5, [pc, #668]	; (8005b20 <LL_TIM_OC_Init+0x2e8>)
 8005882:	42a8      	cmp	r0, r5
 8005884:	d013      	beq.n	80058ae <LL_TIM_OC_Init+0x76>
 8005886:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800588a:	42a8      	cmp	r0, r5
 800588c:	d00f      	beq.n	80058ae <LL_TIM_OC_Init+0x76>
 800588e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005892:	42a8      	cmp	r0, r5
 8005894:	d00b      	beq.n	80058ae <LL_TIM_OC_Init+0x76>
 8005896:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800589a:	42a8      	cmp	r0, r5
 800589c:	d007      	beq.n	80058ae <LL_TIM_OC_Init+0x76>
 800589e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058a2:	42a8      	cmp	r0, r5
 80058a4:	d003      	beq.n	80058ae <LL_TIM_OC_Init+0x76>
 80058a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058aa:	42a8      	cmp	r0, r5
 80058ac:	d113      	bne.n	80058d6 <LL_TIM_OC_Init+0x9e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80058ae:	6955      	ldr	r5, [r2, #20]
 80058b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b4:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80058b8:	6995      	ldr	r5, [r2, #24]
 80058ba:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80058be:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80058c2:	6895      	ldr	r5, [r2, #8]
 80058c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80058cc:	69d5      	ldr	r5, [r2, #28]
 80058ce:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 80058d2:	ea44 1445 	orr.w	r4, r4, r5, lsl #5

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80058d6:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80058d8:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80058da:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80058dc:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80058de:	63c5      	str	r5, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80058e0:	6203      	str	r3, [r0, #32]
}
 80058e2:	bc30      	pop	{r4, r5}
 80058e4:	4610      	mov	r0, r2
 80058e6:	4770      	bx	lr
  switch (Channel)
 80058e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80058ec:	f000 808f 	beq.w	8005a0e <LL_TIM_OC_Init+0x1d6>
 80058f0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80058f4:	f040 8087 	bne.w	8005a06 <LL_TIM_OC_Init+0x1ce>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80058f8:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80058fa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80058fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005900:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005902:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005904:	6d01      	ldr	r1, [r0, #80]	; 0x50
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8005906:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800590a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800590e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8005912:	6914      	ldr	r4, [r2, #16]
 8005914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005918:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800591c:	6854      	ldr	r4, [r2, #4]
 800591e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005922:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005926:	4c7e      	ldr	r4, [pc, #504]	; (8005b20 <LL_TIM_OC_Init+0x2e8>)
 8005928:	42a0      	cmp	r0, r4
 800592a:	d013      	beq.n	8005954 <LL_TIM_OC_Init+0x11c>
 800592c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005930:	42a0      	cmp	r0, r4
 8005932:	d00f      	beq.n	8005954 <LL_TIM_OC_Init+0x11c>
 8005934:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005938:	42a0      	cmp	r0, r4
 800593a:	d00b      	beq.n	8005954 <LL_TIM_OC_Init+0x11c>
 800593c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005940:	42a0      	cmp	r0, r4
 8005942:	d007      	beq.n	8005954 <LL_TIM_OC_Init+0x11c>
 8005944:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005948:	42a0      	cmp	r0, r4
 800594a:	d003      	beq.n	8005954 <LL_TIM_OC_Init+0x11c>
 800594c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005950:	42a0      	cmp	r0, r4
 8005952:	d106      	bne.n	8005962 <LL_TIM_OC_Init+0x12a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005954:	6844      	ldr	r4, [r0, #4]
 8005956:	6995      	ldr	r5, [r2, #24]
 8005958:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800595c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8005960:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8005962:	68d4      	ldr	r4, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005964:	6501      	str	r1, [r0, #80]	; 0x50
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8005966:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 8005968:	64c4      	str	r4, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800596a:	6203      	str	r3, [r0, #32]
}
 800596c:	bc30      	pop	{r4, r5}
 800596e:	4610      	mov	r0, r2
 8005970:	4770      	bx	lr
  switch (Channel)
 8005972:	2901      	cmp	r1, #1
 8005974:	d147      	bne.n	8005a06 <LL_TIM_OC_Init+0x1ce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005976:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005978:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005980:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005982:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005984:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005986:	f023 0302 	bic.w	r3, r3, #2
 800598a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800598c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005990:	6815      	ldr	r5, [r2, #0]
 8005992:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005996:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005998:	6855      	ldr	r5, [r2, #4]
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	4d5f      	ldr	r5, [pc, #380]	; (8005b20 <LL_TIM_OC_Init+0x2e8>)
 80059a2:	42a8      	cmp	r0, r5
 80059a4:	d013      	beq.n	80059ce <LL_TIM_OC_Init+0x196>
 80059a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059aa:	42a8      	cmp	r0, r5
 80059ac:	d00f      	beq.n	80059ce <LL_TIM_OC_Init+0x196>
 80059ae:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80059b2:	42a8      	cmp	r0, r5
 80059b4:	d00b      	beq.n	80059ce <LL_TIM_OC_Init+0x196>
 80059b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059ba:	42a8      	cmp	r0, r5
 80059bc:	d007      	beq.n	80059ce <LL_TIM_OC_Init+0x196>
 80059be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059c2:	42a8      	cmp	r0, r5
 80059c4:	d003      	beq.n	80059ce <LL_TIM_OC_Init+0x196>
 80059c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059ca:	42a8      	cmp	r0, r5
 80059cc:	d112      	bne.n	80059f4 <LL_TIM_OC_Init+0x1bc>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80059ce:	6955      	ldr	r5, [r2, #20]
 80059d0:	f023 0308 	bic.w	r3, r3, #8
 80059d4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80059d8:	6995      	ldr	r5, [r2, #24]
 80059da:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80059de:	432c      	orrs	r4, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80059e0:	6895      	ldr	r5, [r2, #8]
 80059e2:	f023 0304 	bic.w	r3, r3, #4
 80059e6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80059ea:	69d5      	ldr	r5, [r2, #28]
 80059ec:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 80059f0:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80059f4:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80059f6:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80059f8:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80059fa:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059fc:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80059fe:	6203      	str	r3, [r0, #32]
}
 8005a00:	bc30      	pop	{r4, r5}
 8005a02:	4610      	mov	r0, r2
 8005a04:	4770      	bx	lr
  switch (Channel)
 8005a06:	2201      	movs	r2, #1
}
 8005a08:	4610      	mov	r0, r2
 8005a0a:	bc30      	pop	{r4, r5}
 8005a0c:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8005a0e:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005a10:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005a18:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005a1a:	6d01      	ldr	r1, [r0, #80]	; 0x50
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005a1c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005a20:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005a24:	4321      	orrs	r1, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8005a26:	6914      	ldr	r4, [r2, #16]
 8005a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8005a30:	6854      	ldr	r4, [r2, #4]
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	4c39      	ldr	r4, [pc, #228]	; (8005b20 <LL_TIM_OC_Init+0x2e8>)
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d013      	beq.n	8005a68 <LL_TIM_OC_Init+0x230>
 8005a40:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005a44:	42a0      	cmp	r0, r4
 8005a46:	d00f      	beq.n	8005a68 <LL_TIM_OC_Init+0x230>
 8005a48:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d00b      	beq.n	8005a68 <LL_TIM_OC_Init+0x230>
 8005a50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005a54:	42a0      	cmp	r0, r4
 8005a56:	d007      	beq.n	8005a68 <LL_TIM_OC_Init+0x230>
 8005a58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d003      	beq.n	8005a68 <LL_TIM_OC_Init+0x230>
 8005a60:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d106      	bne.n	8005a76 <LL_TIM_OC_Init+0x23e>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8005a68:	6844      	ldr	r4, [r0, #4]
 8005a6a:	6995      	ldr	r5, [r2, #24]
 8005a6c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005a70:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8005a74:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005a76:	6501      	str	r1, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8005a78:	68d1      	ldr	r1, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8005a7a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005a7c:	6481      	str	r1, [r0, #72]	; 0x48
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8005a7e:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005a80:	6203      	str	r3, [r0, #32]
}
 8005a82:	bc30      	pop	{r4, r5}
 8005a84:	4610      	mov	r0, r2
 8005a86:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005a88:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005a8a:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a90:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005a92:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005a94:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005a96:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005aa0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005aa4:	6815      	ldr	r5, [r2, #0]
 8005aa6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8005aaa:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005aae:	6855      	ldr	r5, [r2, #4]
 8005ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab8:	4d19      	ldr	r5, [pc, #100]	; (8005b20 <LL_TIM_OC_Init+0x2e8>)
 8005aba:	42a8      	cmp	r0, r5
 8005abc:	d013      	beq.n	8005ae6 <LL_TIM_OC_Init+0x2ae>
 8005abe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ac2:	42a8      	cmp	r0, r5
 8005ac4:	d00f      	beq.n	8005ae6 <LL_TIM_OC_Init+0x2ae>
 8005ac6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005aca:	42a8      	cmp	r0, r5
 8005acc:	d00b      	beq.n	8005ae6 <LL_TIM_OC_Init+0x2ae>
 8005ace:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	d007      	beq.n	8005ae6 <LL_TIM_OC_Init+0x2ae>
 8005ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ada:	42a8      	cmp	r0, r5
 8005adc:	d003      	beq.n	8005ae6 <LL_TIM_OC_Init+0x2ae>
 8005ade:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ae2:	42a8      	cmp	r0, r5
 8005ae4:	d113      	bne.n	8005b0e <LL_TIM_OC_Init+0x2d6>
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8005ae6:	6955      	ldr	r5, [r2, #20]
 8005ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aec:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005af0:	6995      	ldr	r5, [r2, #24]
 8005af2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8005af6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8005afa:	6895      	ldr	r5, [r2, #8]
 8005afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b00:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8005b04:	69d5      	ldr	r5, [r2, #28]
 8005b06:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8005b0a:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005b0e:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005b10:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005b12:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005b14:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005b16:	6405      	str	r5, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005b18:	6203      	str	r3, [r0, #32]
}
 8005b1a:	bc30      	pop	{r4, r5}
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4770      	bx	lr
 8005b20:	40012c00 	.word	0x40012c00
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005b24:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005b26:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005b28:	f023 0310 	bic.w	r3, r3, #16
 8005b2c:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005b2e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005b30:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005b32:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005b34:	f023 0320 	bic.w	r3, r3, #32
 8005b38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005b3c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005b40:	6815      	ldr	r5, [r2, #0]
 8005b42:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8005b46:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005b4a:	6855      	ldr	r5, [r2, #4]
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	4d19      	ldr	r5, [pc, #100]	; (8005bbc <LL_TIM_OC_Init+0x384>)
 8005b56:	42a8      	cmp	r0, r5
 8005b58:	d013      	beq.n	8005b82 <LL_TIM_OC_Init+0x34a>
 8005b5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b5e:	42a8      	cmp	r0, r5
 8005b60:	d00f      	beq.n	8005b82 <LL_TIM_OC_Init+0x34a>
 8005b62:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b66:	42a8      	cmp	r0, r5
 8005b68:	d00b      	beq.n	8005b82 <LL_TIM_OC_Init+0x34a>
 8005b6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b6e:	42a8      	cmp	r0, r5
 8005b70:	d007      	beq.n	8005b82 <LL_TIM_OC_Init+0x34a>
 8005b72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b76:	42a8      	cmp	r0, r5
 8005b78:	d003      	beq.n	8005b82 <LL_TIM_OC_Init+0x34a>
 8005b7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b7e:	42a8      	cmp	r0, r5
 8005b80:	d113      	bne.n	8005baa <LL_TIM_OC_Init+0x372>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005b82:	6955      	ldr	r5, [r2, #20]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005b8c:	6995      	ldr	r5, [r2, #24]
 8005b8e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005b92:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005b96:	6895      	ldr	r5, [r2, #8]
 8005b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005ba0:	69d5      	ldr	r5, [r2, #28]
 8005ba2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8005ba6:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005baa:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005bac:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005bae:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005bb0:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005bb2:	6385      	str	r5, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005bb4:	6203      	str	r3, [r0, #32]
}
 8005bb6:	bc30      	pop	{r4, r5}
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4770      	bx	lr
 8005bbc:	40012c00 	.word	0x40012c00

08005bc0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005bc2:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	d431      	bmi.n	8005c2c <LL_USART_Init+0x6c>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005bc8:	4604      	mov	r4, r0
 8005bca:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 8005bce:	688b      	ldr	r3, [r1, #8]
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	4303      	orrs	r3, r0
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	69ea      	ldr	r2, [r5, #28]
 8005bd8:	6821      	ldr	r1, [r4, #0]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <LL_USART_Init+0xf0>)
 8005bde:	400a      	ands	r2, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	68ea      	ldr	r2, [r5, #12]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005be8:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005bea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005bf2:	68a3      	ldr	r3, [r4, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005bf4:	4a2f      	ldr	r2, [pc, #188]	; (8005cb4 <LL_USART_Init+0xf4>)
 8005bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	4294      	cmp	r4, r2
 8005bfe:	60a3      	str	r3, [r4, #8]
 8005c00:	d016      	beq.n	8005c30 <LL_USART_Init+0x70>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8005c02:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <LL_USART_Init+0xf8>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	d02f      	beq.n	8005c68 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8005c08:	4b2c      	ldr	r3, [pc, #176]	; (8005cbc <LL_USART_Init+0xfc>)
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d030      	beq.n	8005c70 <LL_USART_Init+0xb0>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8005c0e:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <LL_USART_Init+0x100>)
 8005c10:	429c      	cmp	r4, r3
 8005c12:	d038      	beq.n	8005c86 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005c14:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <LL_USART_Init+0x104>)
 8005c16:	429c      	cmp	r4, r3
 8005c18:	d02e      	beq.n	8005c78 <LL_USART_Init+0xb8>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8005c1a:	682a      	ldr	r2, [r5, #0]
  ErrorStatus status = ERROR;
 8005c1c:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005c1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c20:	b292      	uxth	r2, r2
 8005c22:	f023 030f 	bic.w	r3, r3, #15
 8005c26:	4313      	orrs	r3, r2
 8005c28:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 8005c2c:	2001      	movs	r0, #1
}
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005c30:	2003      	movs	r0, #3
 8005c32:	f7ff fbbb 	bl	80053ac <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0ef      	beq.n	8005c1a <LL_USART_Init+0x5a>
        && (USART_InitStruct->BaudRate != 0U))
 8005c3a:	6869      	ldr	r1, [r5, #4]
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d0ec      	beq.n	8005c1a <LL_USART_Init+0x5a>
      LL_USART_SetBaudRate(USARTx,
 8005c40:	682a      	ldr	r2, [r5, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005c42:	2a0b      	cmp	r2, #11
 8005c44:	d81d      	bhi.n	8005c82 <LL_USART_Init+0xc2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005c46:	69eb      	ldr	r3, [r5, #28]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <LL_USART_Init+0x108>)
 8005c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005c52:	d01c      	beq.n	8005c8e <LL_USART_Init+0xce>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c58:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8005c5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8005c64:	2000      	movs	r0, #0
 8005c66:	e7da      	b.n	8005c1e <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005c68:	200c      	movs	r0, #12
 8005c6a:	f7ff fb9f 	bl	80053ac <LL_RCC_GetUSARTClockFreq>
 8005c6e:	e7e2      	b.n	8005c36 <LL_USART_Init+0x76>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005c70:	2030      	movs	r0, #48	; 0x30
 8005c72:	f7ff fb9b 	bl	80053ac <LL_RCC_GetUSARTClockFreq>
 8005c76:	e7de      	b.n	8005c36 <LL_USART_Init+0x76>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005c78:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005c7c:	f7ff fcac 	bl	80055d8 <LL_RCC_GetUARTClockFreq>
 8005c80:	e7d9      	b.n	8005c36 <LL_USART_Init+0x76>
      status = SUCCESS;
 8005c82:	2000      	movs	r0, #0
 8005c84:	e7cb      	b.n	8005c1e <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005c86:	20c0      	movs	r0, #192	; 0xc0
 8005c88:	f7ff fca6 	bl	80055d8 <LL_RCC_GetUARTClockFreq>
 8005c8c:	e7d3      	b.n	8005c36 <LL_USART_Init+0x76>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005c8e:	fbb0 f0f3 	udiv	r0, r0, r3
    brrtemp = usartdiv & 0xFFF0U;
 8005c92:	f64f 75f0 	movw	r5, #65520	; 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005c96:	084b      	lsrs	r3, r1, #1
 8005c98:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005c9c:	fbb0 f3f1 	udiv	r3, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 8005ca0:	ea03 0105 	and.w	r1, r3, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005ca8:	430b      	orrs	r3, r1
    USARTx->BRR = brrtemp;
 8005caa:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7b6      	b.n	8005c1e <LL_USART_Init+0x5e>
 8005cb0:	efff69f3 	.word	0xefff69f3
 8005cb4:	40013800 	.word	0x40013800
 8005cb8:	40004400 	.word	0x40004400
 8005cbc:	40004800 	.word	0x40004800
 8005cc0:	40004c00 	.word	0x40004c00
 8005cc4:	40005000 	.word	0x40005000
 8005cc8:	0800b8e8 	.word	0x0800b8e8

08005ccc <LED_init>:
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Spodaj imate primer za inicializacijo LEDice LED0.


		// LEDice na portu F
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8005ccc:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <LED_init+0x48>)
		LED_group.LEDs[LED0].port = GPIOF;
 8005cce:	4912      	ldr	r1, [pc, #72]	; (8005d18 <LED_init+0x4c>)
{
 8005cd0:	b430      	push	{r4, r5}

		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 8005cd2:	2008      	movs	r0, #8
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8005cd4:	2404      	movs	r4, #4
		LED_group.LEDs[LED1].port = GPIOF;

		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 8005cd6:	2210      	movs	r2, #16
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8005cd8:	e9c3 1400 	strd	r1, r4, [r3]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005cdc:	628c      	str	r4, [r1, #40]	; 0x28
		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 8005cde:	60d8      	str	r0, [r3, #12]
 8005ce0:	6288      	str	r0, [r1, #40]	; 0x28
		LED_group.LEDs[LED1].port = GPIOF;
 8005ce2:	6099      	str	r1, [r3, #8]
 8005ce4:	628a      	str	r2, [r1, #40]	; 0x28
		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 8005ce6:	615a      	str	r2, [r3, #20]
		LED_group.LEDs[LED2].port = GPIOF;

		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 8005ce8:	2220      	movs	r2, #32
 8005cea:	628a      	str	r2, [r1, #40]	; 0x28
 8005cec:	61da      	str	r2, [r3, #28]


		// LEDice na portu C

		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
		LED_group.LEDs[LED4].port = GPIOC;
 8005cee:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <LED_init+0x50>)
		LED_group.LEDs[LED2].port = GPIOF;
 8005cf0:	6119      	str	r1, [r3, #16]
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 8005cf2:	2501      	movs	r5, #1
 8005cf4:	6295      	str	r5, [r2, #40]	; 0x28
		LED_group.LEDs[LED3].port = GPIOF;
 8005cf6:	6199      	str	r1, [r3, #24]

		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 8005cf8:	2102      	movs	r1, #2
		LED_group.LEDs[LED5].port = GPIOC;

		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
		LED_group.LEDs[LED6].port = GPIOC;
 8005cfa:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 8005cfe:	625d      	str	r5, [r3, #36]	; 0x24

		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
		LED_group.LEDs[LED7].port = GPIOC;
 8005d00:	e9c3 200e 	strd	r2, r0, [r3, #56]	; 0x38
		LED_group.LEDs[LED4].port = GPIOC;
 8005d04:	621a      	str	r2, [r3, #32]
		LED_group.LEDs[LED5].port = GPIOC;
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28
 8005d08:	6291      	str	r1, [r2, #40]	; 0x28
		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 8005d0a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005d0c:	6294      	str	r4, [r2, #40]	; 0x28

		// Na začetku po inicializaciji želimo imeti vse LEDice ugasnjene.
		// Uporabi se lahko kar LEDs_write() funkcijo.
		LEDs_write(0x00);

}
 8005d0e:	bc30      	pop	{r4, r5}
 8005d10:	6290      	str	r0, [r2, #40]	; 0x28
 8005d12:	4770      	bx	lr
 8005d14:	20000370 	.word	0x20000370
 8005d18:	48001400 	.word	0x48001400
 8005d1c:	48000800 	.word	0x48000800

08005d20 <LED_on>:
{
	// Za prižig LEDice uporabimo sledečo nizko-nivojsko LL funkcijo:
	//
	//		void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
	//
	LL_GPIO_SetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8005d20:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <LED_on+0x10>)
 8005d22:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8005d26:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8005d2a:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005d2c:	619a      	str	r2, [r3, #24]
	// zamenjate z npr. LED3 iz seznama naštevnega tipa; in tako boste s klicem zgornje
	// funkcijo postavili na visoko stanje prav tisti digitalni izhod, ki pripada
	// portu in pinu LEDice LED3.


}
 8005d2e:	4770      	bx	lr
 8005d30:	20000370 	.word	0x20000370

08005d34 <LED_off>:
// Funkcija LED_on() ugasne tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_off(LEDs_enum_t LEDn)
{
	LL_GPIO_ResetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <LED_off+0x10>)
 8005d36:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8005d3a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8005d3e:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28
	// DOPOLNI
}
 8005d42:	4770      	bx	lr
 8005d44:	20000370 	.word	0x20000370

08005d48 <LED_toggle>:
// Funkcija LED_toggle() invertira stanje tiste LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_toggle( LEDs_enum_t LEDn )
{
	LL_GPIO_TogglePin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <LED_toggle+0x20>)
 8005d4a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8005d4e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8005d52:	684b      	ldr	r3, [r1, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 8005d54:	6951      	ldr	r1, [r2, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8005d56:	ea03 0001 	and.w	r0, r3, r1
 8005d5a:	ea23 0301 	bic.w	r3, r3, r1
 8005d5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d62:	6193      	str	r3, [r2, #24]
	// DOPOLNI
}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000370 	.word	0x20000370

08005d6c <SCI_init>:
		// standardni izhod "stdout" s pomočjo printf() funkcije,
		// bomo nastavili na 0. Na ta način dosežemo najboljšo odzivnost
		// printf() funkcije, saj se tako ne čaka, da se medpomnilnik napolne,
		// preden se pošlje sporočilo. Sporočila bodo tako poslana takoj, ko se
		// prejme vsaj en znak.
		setvbuf(stdout, NULL, _IONBF, 0);
 8005d6c:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <SCI_init+0x44>)
 8005d6e:	6810      	ldr	r0, [r2, #0]
{
 8005d70:	b538      	push	{r3, r4, r5, lr}
		setvbuf(stdout, NULL, _IONBF, 0);
 8005d72:	2300      	movs	r3, #0
		SCI.enota = USART3;
 8005d74:	4c0f      	ldr	r4, [pc, #60]	; (8005db4 <SCI_init+0x48>)
 8005d76:	4d10      	ldr	r5, [pc, #64]	; (8005db8 <SCI_init+0x4c>)
		setvbuf(stdout, NULL, _IONBF, 0);
 8005d78:	6880      	ldr	r0, [r0, #8]
		SCI.enota = USART3;
 8005d7a:	6025      	str	r5, [r4, #0]
		setvbuf(stdout, NULL, _IONBF, 0);
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f001 f98c 	bl	800709c <setvbuf>
		// s katero specificiramo dolžino medpomnilnika za standardni izhod "stdout" (prvi argument funkcije).
		// Za 3. vhodni parameter uporabimo že pred-definirani makro _IONBF (I/O No Buffer), ki bo povzročil,
		// da se za standardni izhod "stdout" ne uporablja medpomnilnika, temveč
		// se znake takoj pošlje na standardni izhod.

		BUF_init( &SCI_RX_buf_handle, SCI_RX_buffer, SCI_RX_BUF_LEN);	// RX SCI medpomnilnik
 8005d84:	490d      	ldr	r1, [pc, #52]	; (8005dbc <SCI_init+0x50>)
 8005d86:	480e      	ldr	r0, [pc, #56]	; (8005dc0 <SCI_init+0x54>)
 8005d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8c:	f000 f862 	bl	8005e54 <BUF_init>
		BUF_init( &SCI_TX_buf_handle, SCI_TX_buffer, SCI_TX_BUF_LEN);	// TX SCI medpomnilnik
 8005d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d94:	490b      	ldr	r1, [pc, #44]	; (8005dc4 <SCI_init+0x58>)
 8005d96:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <SCI_init+0x5c>)
 8005d98:	f000 f85c 	bl	8005e54 <BUF_init>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	e852 3f00 	ldrex	r3, [r2]
 8005da2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	e842 3100 	strex	r1, r3, [r2]
 8005daa:	2900      	cmp	r1, #0
 8005dac:	d1f7      	bne.n	8005d9e <SCI_init+0x32>
		LL_USART_EnableIT_RXNE_RXFNE (SCI.enota); //omogoci prekinitev

}
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	20000080 	.word	0x20000080
 8005db4:	200003b0 	.word	0x200003b0
 8005db8:	40004800 	.word	0x40004800
 8005dbc:	200003cc 	.word	0x200003cc
 8005dc0:	200003b4 	.word	0x200003b4
 8005dc4:	200005e4 	.word	0x200005e4
 8005dc8:	200005cc 	.word	0x200005cc

08005dcc <_write>:
// Funkcija SCI_send_bytes() pošlje zaporedje bajtov preko SCI vmesnika.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes(uint8_t *data, uint32_t size)
{
	for( int i = 0; i< size; i++ )
 8005dcc:	4610      	mov	r0, r2
 8005dce:	b17a      	cbz	r2, 8005df0 <_write+0x24>
	while( LL_USART_IsActiveFlag_TXE_TXFNF(SCI.enota) == 0 );
 8005dd0:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <_write+0x28>)
// redefiniramo _write() funkcijo pravzaprav priredimo uporabo printf() funkcije
// tako, da pošilja sporočila na točno tak način, kakor to sami želimo.
// In mi želimo uporabljati funkcijo printf() tako, da bomo s pomočjo nje
// pošiljali formatirana sporočila preko SCI vmesnika.
int _write(int file, char *ptr, int len)
{
 8005dd2:	b430      	push	{r4, r5}
 8005dd4:	3901      	subs	r1, #1
	while( LL_USART_IsActiveFlag_TXE_TXFNF(SCI.enota) == 0 );
 8005dd6:	681c      	ldr	r4, [r3, #0]
 8005dd8:	eb01 0c02 	add.w	ip, r1, r2
		SCI_send_byte(*(data+i));
 8005ddc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005de0:	69e3      	ldr	r3, [r4, #28]
 8005de2:	061b      	lsls	r3, r3, #24
 8005de4:	d5fc      	bpl.n	8005de0 <_write+0x14>
	for( int i = 0; i< size; i++ )
 8005de6:	458c      	cmp	ip, r1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8005de8:	62a5      	str	r5, [r4, #40]	; 0x28
 8005dea:	d1f7      	bne.n	8005ddc <_write+0x10>

	// Funkcija _write() mora vrniti število uspešno poslanih
	// znakov. Tu poenostavimo in privzamemo, da je bilo uspešno
	// poslanih vseh "len" znakov.
	return len;
}
 8005dec:	bc30      	pop	{r4, r5}
 8005dee:	4770      	bx	lr
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	200003b0 	.word	0x200003b0

08005df8 <SCI_receive_char_Callback>:

	// Ko preko USART vmesnika prejmemo nov podatek, ga shranimo v sprejemni RX medpomnilnik SCI vmesnika.


	// Najprej z uporabo LL funkcije preberemo novo-sprejeti podatek in ga shranimo v pomožno spremenljivko.
	received_data = LL_USART_ReceiveData8(SCI.enota);
 8005df8:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <SCI_receive_char_Callback+0x10>)

	// Nato pa ta podatek shranimo v sprejemni RX medpomnilnik SCI vmesnika za nadaljno obdelavo kasneje.
	BUF_store_byte( &SCI_RX_buf_handle, received_data );
 8005dfa:	4804      	ldr	r0, [pc, #16]	; (8005e0c <SCI_receive_char_Callback+0x14>)
	received_data = LL_USART_ReceiveData8(SCI.enota);
 8005dfc:	681b      	ldr	r3, [r3, #0]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8005dfe:	6a59      	ldr	r1, [r3, #36]	; 0x24
	BUF_store_byte( &SCI_RX_buf_handle, received_data );
 8005e00:	b2c9      	uxtb	r1, r1
 8005e02:	f000 b82f 	b.w	8005e64 <BUF_store_byte>
 8005e06:	bf00      	nop
 8005e08:	200003b0 	.word	0x200003b0
 8005e0c:	200003b4 	.word	0x200003b4

08005e10 <SCI_transmit_char_Callback>:
}


void SCI_transmit_char_Callback(void)
{
 8005e10:	b500      	push	{lr}
 8005e12:	b083      	sub	sp, #12
	buf_rtrn_codes_t	return_code;			// sem shranimo rezultat poskusa branja iz medpomnilnika


	// Najprej poskusimo prebrati naslednji podatek, ki ga želimo poslati.
	// Zapomnimo si "vrnjeno kodo" (angl. return code), ki jo vrne BUF_ funkcija.
	return_code = BUF_get_byte( &SCI_TX_buf_handle, &data_to_transmit );
 8005e14:	480d      	ldr	r0, [pc, #52]	; (8005e4c <SCI_transmit_char_Callback+0x3c>)
 8005e16:	f10d 0107 	add.w	r1, sp, #7
 8005e1a:	f000 f841 	bl	8005ea0 <BUF_get_byte>

	// S pomočjo "vrnjene kode" ugotovimo, če sedaj imamo na voljo naslednji podatek za pošiljanje.
	if ( return_code == BUFFER_OK )
 8005e1e:	b920      	cbnz	r0, 8005e2a <SCI_transmit_char_Callback+0x1a>
	{
		// In če je na voljo naslednji podatek, ga kar vpišemo v oddajni podatkovni register
		// USART vmesnika s pomočjo LL funkcije.

		LL_USART_TransmitData8(SCI.enota, data_to_transmit);
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <SCI_transmit_char_Callback+0x40>)
  USARTx->TDR = Value;
 8005e22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	629a      	str	r2, [r3, #40]	; 0x28


	// Po vsakem podatku, ki ga pošljemo, je potrebno preveriti, če smo morda
	// poslali zadnji podatek. To je pomembno, saj moramo v tem primeru ustaviti
	// "avtomatsko" pošiljanje podatkov s pomočjo prekinitev.
	if ( BUF_get_data_size( &SCI_TX_buf_handle ) == 0)
 8005e2a:	4808      	ldr	r0, [pc, #32]	; (8005e4c <SCI_transmit_char_Callback+0x3c>)
 8005e2c:	f000 f852 	bl	8005ed4 <BUF_get_data_size>
 8005e30:	b948      	cbnz	r0, 8005e46 <SCI_transmit_char_Callback+0x36>
		// prekinitve ob sprostitvi oddajnega podatkovnega registra (TXE),
		// saj nimamo več kaj pošiljati. Tako onemogočimo avtomatsko
		// pošiljanje iz oddajnega TX medpomnilnika SCI vmesnika s pomočjo prekinitev.
		// Uporabimo ustrezno LL funkcijo za onemogočitev prekinitve.

		LL_USART_DisableIT_TXE_TXFNF (SCI.enota);
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <SCI_transmit_char_Callback+0x40>)
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005e34:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	e852 3f00 	ldrex	r3, [r2]
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	e842 3100 	strex	r1, r3, [r2]
 8005e42:	2900      	cmp	r1, #0
 8005e44:	d1f7      	bne.n	8005e36 <SCI_transmit_char_Callback+0x26>
	}

}
 8005e46:	b003      	add	sp, #12
 8005e48:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e4c:	200005cc 	.word	0x200005cc
 8005e50:	200003b0 	.word	0x200003b0

08005e54 <BUF_init>:
}


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
	buf_handle->front = 0;
 8005e54:	2300      	movs	r3, #0
	buf_handle->length = buf_length;
 8005e56:	e9c0 1200 	strd	r1, r2, [r0]
	buf_handle->rear = 0;
 8005e5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	buf_handle->data_size = 0;
	buf_handle->free_size = buf_handle->length;
 8005e5e:	e9c0 3204 	strd	r3, r2, [r0, #16]
}
 8005e62:	4770      	bx	lr

08005e64 <BUF_store_byte>:

// Store one byte of data.
buf_rtrn_codes_t BUF_store_byte(buf_handle_t *buf_handle, uint8_t data)
{
	// check if buffer already full
	if (buf_handle->data_size >= buf_handle->length)
 8005e64:	6902      	ldr	r2, [r0, #16]
{
 8005e66:	4603      	mov	r3, r0
	if (buf_handle->data_size >= buf_handle->length)
 8005e68:	6840      	ldr	r0, [r0, #4]
 8005e6a:	4282      	cmp	r2, r0
 8005e6c:	d213      	bcs.n	8005e96 <BUF_store_byte+0x32>
{
 8005e6e:	b410      	push	{r4}
		return BUFFER_FULL;	//-> if so, return error
	}
	else
	{
		// check special case: buffer empty
		if (buf_handle->data_size == 0)
 8005e70:	b19a      	cbz	r2, 8005e9a <BUF_store_byte+0x36>
			buf_handle->rear = 0;
		}
		else
		{
			// increase rear pointer and apply modular arithmetics
			buf_handle->rear++;
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	3201      	adds	r2, #1

			if (buf_handle->rear >= buf_handle->length)
 8005e76:	4290      	cmp	r0, r2
			{
				buf_handle->rear = 0;
 8005e78:	bf98      	it	ls
 8005e7a:	2200      	movls	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
			}
		}


		// by now rear pointer is ready for new data -> store data
		buf_handle->buffer[buf_handle->rear] = data;
 8005e7e:	681c      	ldr	r4, [r3, #0]
 8005e80:	54a1      	strb	r1, [r4, r2]

		// update data size and free size
		buf_handle->data_size++;
		buf_handle->free_size--;
 8005e82:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
		buf_handle->data_size++;
 8005e86:	3101      	adds	r1, #1
		buf_handle->free_size--;
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e9c3 1204 	strd	r1, r2, [r3, #16]

		return BUFFER_OK;
	}

}
 8005e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e94:	4770      	bx	lr
		return BUFFER_FULL;	//-> if so, return error
 8005e96:	2001      	movs	r0, #1
}
 8005e98:	4770      	bx	lr
			buf_handle->rear = 0;
 8005e9a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8005e9e:	e7ee      	b.n	8005e7e <BUF_store_byte+0x1a>

08005ea0 <BUF_get_byte>:

// Read one byte of data and store it to the given location.
buf_rtrn_codes_t BUF_get_byte(buf_handle_t *buf_handle, uint8_t *data)
{
	// first check if buffer empty
	if (buf_handle->data_size == 0)
 8005ea0:	6903      	ldr	r3, [r0, #16]
 8005ea2:	b1ab      	cbz	r3, 8005ed0 <BUF_get_byte+0x30>
	{
		return BUFFER_EMPTY;	// return error code and exit this function
	}

	// else read and return data from the buffer "front"
	*data = buf_handle->buffer[buf_handle->front];	//Get data from the queue "front"
 8005ea4:	68c3      	ldr	r3, [r0, #12]
 8005ea6:	6802      	ldr	r2, [r0, #0]
 8005ea8:	5cd3      	ldrb	r3, [r2, r3]
 8005eaa:	700b      	strb	r3, [r1, #0]

	// update data size and free size
	buf_handle->data_size--;
	buf_handle->free_size++;
 8005eac:	e9d0 1204 	ldrd	r1, r2, [r0, #16]


	// update the "front" value NOT using the modulo arithmetics but
	// using if-then instead because it is faster on uC
	buf_handle->front++;
 8005eb0:	68c3      	ldr	r3, [r0, #12]
	buf_handle->free_size++;
 8005eb2:	3201      	adds	r2, #1
	buf_handle->data_size--;
 8005eb4:	3901      	subs	r1, #1
	buf_handle->free_size++;
 8005eb6:	e9c0 1204 	strd	r1, r2, [r0, #16]

	if (buf_handle->front >= buf_handle->length)
 8005eba:	6842      	ldr	r2, [r0, #4]
	buf_handle->front++;
 8005ebc:	3301      	adds	r3, #1
	if (buf_handle->front >= buf_handle->length)
 8005ebe:	4293      	cmp	r3, r2
	buf_handle->front++;
 8005ec0:	60c3      	str	r3, [r0, #12]
	if (buf_handle->front >= buf_handle->length)
 8005ec2:	d303      	bcc.n	8005ecc <BUF_get_byte+0x2c>
	{
		buf_handle->front = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60c3      	str	r3, [r0, #12]
	}

	return BUFFER_OK;	// return BUFFER_OK error code
 8005ec8:	4618      	mov	r0, r3
 8005eca:	4770      	bx	lr
 8005ecc:	2000      	movs	r0, #0

}
 8005ece:	4770      	bx	lr
		return BUFFER_EMPTY;	// return error code and exit this function
 8005ed0:	2002      	movs	r0, #2
 8005ed2:	4770      	bx	lr

08005ed4 <BUF_get_data_size>:

// Get the number of bytes currently in the buffer queue.
uint32_t BUF_get_data_size(buf_handle_t *buf_handle)
{
	return buf_handle->data_size;
}
 8005ed4:	6900      	ldr	r0, [r0, #16]
 8005ed6:	4770      	bx	lr

08005ed8 <JOY_init>:
// merjenje signalov "joysticka".
// Mimogrede: inicializacijska funkcija se razlikuje od prejšnjih inicializacijskih funkcij
// v tem, da za vhodna argumenta funkcije prejme kazalce na "handle" strukture, ki so
// potrebne za delo s HAL funkcijami.
void JOY_init(ADC_HandleTypeDef *ADC_handle, TIM_HandleTypeDef *timer_handle)
{
 8005ed8:	b538      	push	{r3, r4, r5, lr}
		// Definirajte, kako so posamezne tipke povezane na GPIO pine in porte.
		// To storite tako, da pravilno inicializirate "handle" strukturo tipke "joysticka".
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Postopate popolnoma enako, kot smo to storili v primeru tipkovnice.

		joystick.button.port = GPIOC;
 8005eda:	4c15      	ldr	r4, [pc, #84]	; (8005f30 <JOY_init+0x58>)
 8005edc:	4d15      	ldr	r5, [pc, #84]	; (8005f34 <JOY_init+0x5c>)
		joystick.position_raw_range[Y] = joystick.position_raw_max[Y] - joystick.position_raw_min[Y];

		// Shranimo si kazalce na "handle" strukturi za AD pretvornik in časovnik,
		// ki ju uporabljamo pri implementaciji "joystick" modula.
		// Ti dve infromaciji seveda shranimo v spremenljivki "joystick handle" strukture.
		joystick.ADC = ADC_handle;
 8005ede:	6220      	str	r0, [r4, #32]
		joystick.position_raw_min[X] = 916;
 8005ee0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8005f28 <JOY_init+0x50>
		joystick.button.pin =  LL_GPIO_PIN_13;
 8005ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ee8:	e9c4 5300 	strd	r5, r3, [r4]
		joystick.button.state_new = 0;
 8005eec:	2300      	movs	r3, #0

	// 3. Inicializiramo medpomnilnik za tipke "joysticka"

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 8005eee:	2210      	movs	r2, #16
		joystick.button.state_new = 0;
 8005ef0:	8123      	strh	r3, [r4, #8]
		joystick.timer = timer_handle;
 8005ef2:	61e1      	str	r1, [r4, #28]
		joystick.position_raw_range[X] = joystick.position_raw_max[X] - joystick.position_raw_min[X];
 8005ef4:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <JOY_init+0x60>)
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 8005ef6:	4911      	ldr	r1, [pc, #68]	; (8005f3c <JOY_init+0x64>)
 8005ef8:	4811      	ldr	r0, [pc, #68]	; (8005f40 <JOY_init+0x68>)
		joystick.position_raw_range[X] = joystick.position_raw_max[X] - joystick.position_raw_min[X];
 8005efa:	61a3      	str	r3, [r4, #24]
		joystick.position_raw_min[X] = 916;
 8005efc:	ed84 7b04 	vstr	d7, [r4, #16]
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 8005f00:	f7ff ffa8 	bl	8005e54 <BUF_init>
		// Pri tem uporabljamo funkcije HAL knjižnice.


		// Najprej kalibriramo AD pretvornik, da bodo meritve pozicije "joysticka" bolj točne.
		// Kalibracijo izvedemo za "single-ended" vhodne signale.
		HAL_ADCEx_Calibration_Start( joystick.ADC, ADC_SINGLE_ENDED );
 8005f04:	6a20      	ldr	r0, [r4, #32]
 8005f06:	217f      	movs	r1, #127	; 0x7f
 8005f08:	f7fd fc70 	bl	80037ec <HAL_ADCEx_Calibration_Start>
		// AD pretovrnik v DMA načinu).
		// To storimo s klicem spodnje HAL funkcije, ki DMA enoti
		// "sporoči", s katerim AD pretvornikom bo delala, na katero mesto v pomnilniku
		// naj shranjuje rezultate AD pretvorbe ter koliko teh rezultatov bo morala prenesti
		// ob vsaki končani AD pretvorbi.
		HAL_ADC_Start_DMA( joystick.ADC, (uint32_t *) joystick.position_raw, 2 );
 8005f0c:	f104 010c 	add.w	r1, r4, #12
 8005f10:	6a20      	ldr	r0, [r4, #32]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f7fd fba8 	bl	8003668 <HAL_ADC_Start_DMA>


		// Na koncu pa še zaženemo časovnik, ki bo prožil AD pretvorbe.
		// S tem smo pravzaprav sprožili "avtomatsko" merjenje pozicije "joysticka".
		HAL_TIM_Base_Start( joystick.timer );
 8005f18:	69e0      	ldr	r0, [r4, #28]
 8005f1a:	f7fe ff15 	bl	8004d48 <HAL_TIM_Base_Start>
		// Torej je smiselno počakati milisekundo dlje.

	HAL_Delay(11);


}
 8005f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(11);
 8005f22:	200b      	movs	r0, #11
 8005f24:	f7fc bf44 	b.w	8002db0 <HAL_Delay>
 8005f28:	02cb0394 	.word	0x02cb0394
 8005f2c:	0cef0d02 	.word	0x0cef0d02
 8005f30:	20000810 	.word	0x20000810
 8005f34:	48000800 	.word	0x48000800
 8005f38:	0a24096e 	.word	0x0a24096e
 8005f3c:	200007fc 	.word	0x200007fc
 8005f40:	200007e4 	.word	0x200007e4

08005f44 <JOY_get_axis_position>:
	int16_t	relative_position;


	// Izračun relativne pozicije osi na procent natančno.
	// Pazite: uporablja se celoštevilska aritmetika! Operacija deljenja vrne celoštevilski količnik brez deleža zaradi ostanka!
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8005f44:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <JOY_get_axis_position+0x60>)
 8005f46:	f100 0108 	add.w	r1, r0, #8
 8005f4a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005f4e:	f832 c011 	ldrh.w	ip, [r2, r1, lsl #1]
 8005f52:	899b      	ldrh	r3, [r3, #12]


	// Poskrbimo še, da se vrnjena vrednost nahaja na smiselnem intervalu [0..100].

		// Obravnavamo primer, ko je trenutna meritev pozicije manjša od kalibrirane minimalne vrednosti.
		if ( joystick.position_raw[axis] < joystick.position_raw_min[axis] )
 8005f54:	4563      	cmp	r3, ip
 8005f56:	d322      	bcc.n	8005f9e <JOY_get_axis_position+0x5a>
		{
			return 0 ;
		}

		// Obravnavamo primer, ko je trenutna meritev pozicije večja od kalibrirane maksimalne vrednosti.
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 8005f58:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8005f5c:	300c      	adds	r0, #12
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 8005f5e:	8889      	ldrh	r1, [r1, #4]
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8005f60:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d318      	bcc.n	8005f9a <JOY_get_axis_position+0x56>
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8005f68:	eba3 030c 	sub.w	r3, r3, ip
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	ee07 2a10 	vmov	s14, r2
 8005f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f7c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005fa8 <JOY_get_axis_position+0x64>
 8005f80:	eec7 6a87 	vdiv.f32	s13, s15, s14
{
 8005f84:	b082      	sub	sp, #8
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8005f86:	ee66 7a86 	vmul.f32	s15, s13, s12
 8005f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f8e:	edcd 7a01 	vstr	s15, [sp, #4]
		}

		// Ostane le še primer, ko se izračunana relativna pozicija nahaja na intervalu [0..100].
		else
		{
			return relative_position;
 8005f92:	f89d 0004 	ldrb.w	r0, [sp, #4]
		}

}
 8005f96:	b002      	add	sp, #8
 8005f98:	4770      	bx	lr
			return 100 ;
 8005f9a:	2064      	movs	r0, #100	; 0x64
}
 8005f9c:	4770      	bx	lr
			return 0 ;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000810 	.word	0x20000810
 8005fa8:	42c80000 	.word	0x42c80000

08005fac <KBD_init>:
	// To storite tako, da pravilno inicializirate "handle" strukture posameznih tipk.
	// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.


	// buttons on port G
	keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <KBD_init+0x5c>)
	// DOPOLNI


	// buttons on port C
	keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
	keyboard.buttons[ BTN_ESC ].port = GPIOC;
 8005fae:	4817      	ldr	r0, [pc, #92]	; (800600c <KBD_init+0x60>)
	keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 8005fb0:	4a17      	ldr	r2, [pc, #92]	; (8006010 <KBD_init+0x64>)
	keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8005fb2:	2140      	movs	r1, #64	; 0x40
{
 8005fb4:	b410      	push	{r4}
	keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8005fb6:	6419      	str	r1, [r3, #64]	; 0x40
	keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8 ;
 8005fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fbc:	6359      	str	r1, [r3, #52]	; 0x34
	keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 8005fbe:	2101      	movs	r1, #1
		// in trenutnega stanja tipk! In te vrednosti je potrebno na začetku nastaviti.
		// Smiselno jih je nastaviti na tako vrednost, kot da so tipke na začetku v sproščenem,
		// nestisnjenem stanju. In tu si lahko pomagate s pomožnim naštevnim tipom button_sig_value_t.

		keyboard.buttons[i].state_new = BTN_SIG_VALUE_RELEASED;
		keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8005fc0:	f240 1c01 	movw	ip, #257	; 0x101
	keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 8005fc4:	61d9      	str	r1, [r3, #28]
	keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8005fc6:	2102      	movs	r1, #2
	keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
 8005fc8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8005fcc:	6299      	str	r1, [r3, #40]	; 0x28
		keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8005fce:	f8a3 c008 	strh.w	ip, [r3, #8]
	keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
 8005fd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
		keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8005fd6:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005fda:	f8a3 c020 	strh.w	ip, [r3, #32]
 8005fde:	f8a3 c02c 	strh.w	ip, [r3, #44]	; 0x2c
 8005fe2:	f8a3 c038 	strh.w	ip, [r3, #56]	; 0x38
 8005fe6:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
	keyboard.buttons[ BTN_OK ].port = GPIOC;
 8005fea:	e9c3 0400 	strd	r0, r4, [r3]
	keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 8005fee:	63da      	str	r2, [r3, #60]	; 0x3c
	keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
	keyboard.buttons[ BTN_UP ].port = GPIOG;
 8005ff2:	619a      	str	r2, [r3, #24]
	keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24
	keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
 8005ff6:	6119      	str	r1, [r3, #16]
	keyboard.buttons[ BTN_ESC ].port = GPIOC;
 8005ff8:	60d8      	str	r0, [r3, #12]

	// 3. Inicializiramo še medpomnilnik tipkovnice.

	// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
	// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
	BUF_init( &kbd_buf_handle, kbd_buffer, NUM_OF_BTN);
 8005ffa:	4906      	ldr	r1, [pc, #24]	; (8006014 <KBD_init+0x68>)
 8005ffc:	4806      	ldr	r0, [pc, #24]	; (8006018 <KBD_init+0x6c>)

}
 8005ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
	BUF_init( &kbd_buf_handle, kbd_buffer, NUM_OF_BTN);
 8006002:	2206      	movs	r2, #6
 8006004:	f7ff bf26 	b.w	8005e54 <BUF_init>
 8006008:	2000086c 	.word	0x2000086c
 800600c:	48000800 	.word	0x48000800
 8006010:	48001800 	.word	0x48001800
 8006014:	2000084c 	.word	0x2000084c
 8006018:	20000834 	.word	0x20000834

0800601c <KBD_scan>:
// Funkcija KBD_scan() prebere trenutno stanje tipk v tipkovnici; ugotovi,
// katere tipke so bile pritisnjene ter shrani to informacijo v medpomnilnik
// tipkovnice, da se bo kasneje lahko sistem odzval na pritisk teh tipk.
//
void KBD_scan(void)
{
 800601c:	b510      	push	{r4, lr}
	for(int i=0; i < NUM_OF_BTN; i++)
	{
		// Znotraj zanke delamo trenutno z i-to tipko. Spremenljivka "i" je pomožni števec zanke.

		// Trenutno, novo stanje tipke postane sedaj staro stanje tipke
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 800601e:	4c41      	ldr	r4, [pc, #260]	; (8006124 <KBD_scan+0x108>)

		// in novo, trenutno stanje tipke se prebere iz ustreznega digitalne GPIO vhoda.
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006020:	e9d4 3200 	ldrd	r3, r2, [r4]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8006024:	6919      	ldr	r1, [r3, #16]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8006026:	7a63      	ldrb	r3, [r4, #9]
 8006028:	7223      	strb	r3, [r4, #8]
 800602a:	438a      	bics	r2, r1
 800602c:	d04a      	beq.n	80060c4 <KBD_scan+0xa8>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800602e:	2100      	movs	r1, #0



		// Sedaj je potrebno preveriti, ali se je za i-to tipko zgodil pritisk. Pri tem si pomagajte s starim in
		// trenutnim stanjem tipke. Pomaga vam lahko tudi pomožni naštevni tip button_sig_value_t.
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006030:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006032:	7261      	strb	r1, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006034:	d05f      	beq.n	80060f6 <KBD_scan+0xda>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006036:	68e3      	ldr	r3, [r4, #12]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8006038:	7d61      	ldrb	r1, [r4, #21]
 800603a:	7521      	strb	r1, [r4, #20]
 800603c:	691a      	ldr	r2, [r3, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	4393      	bics	r3, r2
 8006042:	d03c      	beq.n	80060be <KBD_scan+0xa2>
 8006044:	2300      	movs	r3, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006046:	2901      	cmp	r1, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006048:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800604a:	d058      	beq.n	80060fe <KBD_scan+0xe2>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800604c:	69a2      	ldr	r2, [r4, #24]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 800604e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8006052:	f884 3020 	strb.w	r3, [r4, #32]
 8006056:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006058:	69e2      	ldr	r2, [r4, #28]
 800605a:	438a      	bics	r2, r1
 800605c:	d039      	beq.n	80060d2 <KBD_scan+0xb6>
 800605e:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006060:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006062:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006066:	d04e      	beq.n	8006106 <KBD_scan+0xea>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006068:	6a62      	ldr	r2, [r4, #36]	; 0x24
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 800606a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800606e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006072:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006074:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006076:	438a      	bics	r2, r1
 8006078:	d027      	beq.n	80060ca <KBD_scan+0xae>
 800607a:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800607c:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800607e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006082:	d045      	beq.n	8006110 <KBD_scan+0xf4>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006084:	6b22      	ldr	r2, [r4, #48]	; 0x30
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8006086:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800608a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800608e:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006090:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006092:	438a      	bics	r2, r1
 8006094:	d025      	beq.n	80060e2 <KBD_scan+0xc6>
 8006096:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006098:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800609a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800609e:	d03c      	beq.n	800611a <KBD_scan+0xfe>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 80060a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80060a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80060aa:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060ae:	438a      	bics	r2, r1
 80060b0:	d013      	beq.n	80060da <KBD_scan+0xbe>
 80060b2:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060b4:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060b6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060ba:	d016      	beq.n	80060ea <KBD_scan+0xce>

		}

	}

}
 80060bc:	bd10      	pop	{r4, pc}
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060be:	2301      	movs	r3, #1
 80060c0:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060c2:	e7c3      	b.n	800604c <KBD_scan+0x30>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060c4:	2301      	movs	r3, #1
 80060c6:	7263      	strb	r3, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060c8:	e7b5      	b.n	8006036 <KBD_scan+0x1a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060ca:	2301      	movs	r3, #1
 80060cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060d0:	e7d8      	b.n	8006084 <KBD_scan+0x68>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060d2:	2301      	movs	r3, #1
 80060d4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060d8:	e7c6      	b.n	8006068 <KBD_scan+0x4c>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060da:	2301      	movs	r3, #1
 80060dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80060e0:	bd10      	pop	{r4, pc}
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80060e2:	2301      	movs	r3, #1
 80060e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80060e8:	e7da      	b.n	80060a0 <KBD_scan+0x84>
}
 80060ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			BUF_store_byte( &kbd_buf_handle, i);
 80060ee:	480e      	ldr	r0, [pc, #56]	; (8006128 <KBD_scan+0x10c>)
 80060f0:	2105      	movs	r1, #5
 80060f2:	f7ff beb7 	b.w	8005e64 <BUF_store_byte>
 80060f6:	480c      	ldr	r0, [pc, #48]	; (8006128 <KBD_scan+0x10c>)
 80060f8:	f7ff feb4 	bl	8005e64 <BUF_store_byte>
 80060fc:	e79b      	b.n	8006036 <KBD_scan+0x1a>
 80060fe:	480a      	ldr	r0, [pc, #40]	; (8006128 <KBD_scan+0x10c>)
 8006100:	f7ff feb0 	bl	8005e64 <BUF_store_byte>
 8006104:	e7a2      	b.n	800604c <KBD_scan+0x30>
 8006106:	2102      	movs	r1, #2
 8006108:	4807      	ldr	r0, [pc, #28]	; (8006128 <KBD_scan+0x10c>)
 800610a:	f7ff feab 	bl	8005e64 <BUF_store_byte>
 800610e:	e7ab      	b.n	8006068 <KBD_scan+0x4c>
 8006110:	2103      	movs	r1, #3
 8006112:	4805      	ldr	r0, [pc, #20]	; (8006128 <KBD_scan+0x10c>)
 8006114:	f7ff fea6 	bl	8005e64 <BUF_store_byte>
 8006118:	e7b4      	b.n	8006084 <KBD_scan+0x68>
 800611a:	2104      	movs	r1, #4
 800611c:	4802      	ldr	r0, [pc, #8]	; (8006128 <KBD_scan+0x10c>)
 800611e:	f7ff fea1 	bl	8005e64 <BUF_store_byte>
 8006122:	e7bd      	b.n	80060a0 <KBD_scan+0x84>
 8006124:	2000086c 	.word	0x2000086c
 8006128:	20000834 	.word	0x20000834

0800612c <KBD_get_button_state>:
	// je parameter "state_new" za posamezne tipke vedno pravilno določen in smiseln.

	// Torej trenutno stanje tipke vam je že na voljo in je shranjeno v "state_new"
	// parametru ustrezne "handle" strukture tipke.

	return keyboard.buttons[button].state_new;
 800612c:	4b03      	ldr	r3, [pc, #12]	; (800613c <KBD_get_button_state+0x10>)
 800612e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006132:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
 8006136:	7a40      	ldrb	r0, [r0, #9]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	2000086c 	.word	0x2000086c

08006140 <KBD_demo_toggle_LEDs_if_buttons_pressed>:
// in se na te pritiske odzove s spremembo stanja ustrezne LEDice ("toggle").
//
// PAZITE: demo funkcija ne izvaja skeniranja tipkovnice! To je potrebno
// izvesti zunaj te funkcije.
void KBD_demo_toggle_LEDs_if_buttons_pressed(void)
{
 8006140:	b510      	push	{r4, lr}
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8006142:	4c5d      	ldr	r4, [pc, #372]	; (80062b8 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x178>)
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006144:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006148:	6919      	ldr	r1, [r3, #16]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 800614a:	7a63      	ldrb	r3, [r4, #9]
 800614c:	7223      	strb	r3, [r4, #8]
 800614e:	438a      	bics	r2, r1
{
 8006150:	b082      	sub	sp, #8
 8006152:	f000 8082 	beq.w	800625a <KBD_demo_toggle_LEDs_if_buttons_pressed+0x11a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006156:	2100      	movs	r1, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006158:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800615a:	7261      	strb	r1, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800615c:	f000 8095 	beq.w	800628a <KBD_demo_toggle_LEDs_if_buttons_pressed+0x14a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006160:	68e3      	ldr	r3, [r4, #12]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8006162:	7d61      	ldrb	r1, [r4, #21]
 8006164:	7521      	strb	r1, [r4, #20]
 8006166:	691a      	ldr	r2, [r3, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	4393      	bics	r3, r2
 800616c:	d072      	beq.n	8006254 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x114>
 800616e:	2300      	movs	r3, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006170:	2901      	cmp	r1, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006172:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006174:	f000 808d 	beq.w	8006292 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x152>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006178:	69a2      	ldr	r2, [r4, #24]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 800617a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800617e:	f884 3020 	strb.w	r3, [r4, #32]
 8006182:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006184:	69e2      	ldr	r2, [r4, #28]
 8006186:	438a      	bics	r2, r1
 8006188:	d06e      	beq.n	8006268 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x128>
 800618a:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800618c:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800618e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006192:	f000 8082 	beq.w	800629a <KBD_demo_toggle_LEDs_if_buttons_pressed+0x15a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006196:	6a62      	ldr	r2, [r4, #36]	; 0x24
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8006198:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800619c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80061a0:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80061a4:	438a      	bics	r2, r1
 80061a6:	d05b      	beq.n	8006260 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x120>
 80061a8:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80061aa:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061ac:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80061b0:	d078      	beq.n	80062a4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x164>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 80061b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80061b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80061bc:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80061c0:	438a      	bics	r2, r1
 80061c2:	d059      	beq.n	8006278 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x138>
 80061c4:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80061c6:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061c8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80061cc:	d06f      	beq.n	80062ae <KBD_demo_toggle_LEDs_if_buttons_pressed+0x16e>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 80061d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80061d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80061d8:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061dc:	438a      	bics	r2, r1
 80061de:	d047      	beq.n	8006270 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x130>
 80061e0:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80061e2:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80061e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80061e8:	d04a      	beq.n	8006280 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x140>
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 80061ea:	4834      	ldr	r0, [pc, #208]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 80061ec:	f10d 0107 	add.w	r1, sp, #7
 80061f0:	f7ff fe56 	bl	8005ea0 <BUF_get_byte>
 80061f4:	b9c0      	cbnz	r0, 8006228 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xe8>
		return pressed_button;
 80061f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	// (uporabite ustrezno KBD_ funkcijo).
	pressed_key = KBD_get_pressed_key() ;


	// Če je v pomožni spremenljivki informacija o pritisku dejanske tipke,
	while (pressed_key != BTN_NONE)
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	d014      	beq.n	8006228 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xe8>
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 80061fe:	4c2f      	ldr	r4, [pc, #188]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
	{
		// spremenimo stanje ustrezne LEDice glede na to, katera tipka
		// je bila pritisnjena.
		switch ( pressed_key )
 8006200:	2b05      	cmp	r3, #5
 8006202:	d807      	bhi.n	8006214 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
 8006204:	e8df f003 	tbb	[pc, r3]
 8006208:	1a031e22 	.word	0x1a031e22
 800620c:	1216      	.short	0x1216
		{
		case BTN_UP:
			LED_toggle(LED0);
 800620e:	2000      	movs	r0, #0
 8006210:	f7ff fd9a 	bl	8005d48 <LED_toggle>
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 8006214:	f10d 0107 	add.w	r1, sp, #7
 8006218:	4620      	mov	r0, r4
 800621a:	f7ff fe41 	bl	8005ea0 <BUF_get_byte>
 800621e:	b918      	cbnz	r0, 8006228 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xe8>
		return pressed_button;
 8006220:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (pressed_key != BTN_NONE)
 8006224:	2b07      	cmp	r3, #7
 8006226:	d1eb      	bne.n	8006200 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xc0>
		// ki še ni bila obdelana.
		pressed_key = KBD_get_pressed_key() ;

	}

}
 8006228:	b002      	add	sp, #8
 800622a:	bd10      	pop	{r4, pc}
			LED_toggle(LED2);
 800622c:	2002      	movs	r0, #2
 800622e:	f7ff fd8b 	bl	8005d48 <LED_toggle>
			break;
 8006232:	e7ef      	b.n	8006214 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED3);
 8006234:	2003      	movs	r0, #3
 8006236:	f7ff fd87 	bl	8005d48 <LED_toggle>
			break;
 800623a:	e7eb      	b.n	8006214 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED1);
 800623c:	2001      	movs	r0, #1
 800623e:	f7ff fd83 	bl	8005d48 <LED_toggle>
			break;
 8006242:	e7e7      	b.n	8006214 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED4);
 8006244:	2004      	movs	r0, #4
 8006246:	f7ff fd7f 	bl	8005d48 <LED_toggle>
			break;
 800624a:	e7e3      	b.n	8006214 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED5);
 800624c:	2005      	movs	r0, #5
 800624e:	f7ff fd7b 	bl	8005d48 <LED_toggle>
			break;
 8006252:	e7df      	b.n	8006214 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006254:	2301      	movs	r3, #1
 8006256:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006258:	e78e      	b.n	8006178 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x38>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 800625a:	2301      	movs	r3, #1
 800625c:	7263      	strb	r3, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800625e:	e77f      	b.n	8006160 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x20>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006260:	2301      	movs	r3, #1
 8006262:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006266:	e7a4      	b.n	80061b2 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x72>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006268:	2301      	movs	r3, #1
 800626a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800626e:	e792      	b.n	8006196 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x56>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006270:	2301      	movs	r3, #1
 8006272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8006276:	e7b8      	b.n	80061ea <KBD_demo_toggle_LEDs_if_buttons_pressed+0xaa>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8006278:	2301      	movs	r3, #1
 800627a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 800627e:	e7a6      	b.n	80061ce <KBD_demo_toggle_LEDs_if_buttons_pressed+0x8e>
			BUF_store_byte( &kbd_buf_handle, i);
 8006280:	2105      	movs	r1, #5
 8006282:	480e      	ldr	r0, [pc, #56]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8006284:	f7ff fdee 	bl	8005e64 <BUF_store_byte>
 8006288:	e7af      	b.n	80061ea <KBD_demo_toggle_LEDs_if_buttons_pressed+0xaa>
 800628a:	480c      	ldr	r0, [pc, #48]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 800628c:	f7ff fdea 	bl	8005e64 <BUF_store_byte>
 8006290:	e766      	b.n	8006160 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x20>
 8006292:	480a      	ldr	r0, [pc, #40]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8006294:	f7ff fde6 	bl	8005e64 <BUF_store_byte>
 8006298:	e76e      	b.n	8006178 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x38>
 800629a:	2102      	movs	r1, #2
 800629c:	4807      	ldr	r0, [pc, #28]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 800629e:	f7ff fde1 	bl	8005e64 <BUF_store_byte>
 80062a2:	e778      	b.n	8006196 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x56>
 80062a4:	2103      	movs	r1, #3
 80062a6:	4805      	ldr	r0, [pc, #20]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 80062a8:	f7ff fddc 	bl	8005e64 <BUF_store_byte>
 80062ac:	e781      	b.n	80061b2 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x72>
 80062ae:	2104      	movs	r1, #4
 80062b0:	4802      	ldr	r0, [pc, #8]	; (80062bc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 80062b2:	f7ff fdd7 	bl	8005e64 <BUF_store_byte>
 80062b6:	e78a      	b.n	80061ce <KBD_demo_toggle_LEDs_if_buttons_pressed+0x8e>
 80062b8:	2000086c 	.word	0x2000086c
 80062bc:	20000834 	.word	0x20000834

080062c0 <UserPixelSetFunction>:
// ------ Definicija dveh temeljnih funkcij za risanje na zaslon -------


// Implementacija funkcije za izris enega samega piksla na zaslon.
void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80062c0:	b500      	push	{lr}
 80062c2:	b083      	sub	sp, #12
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 80062c4:	2301      	movs	r3, #1
{
 80062c6:	9201      	str	r2, [sp, #4]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 80062c8:	461a      	mov	r2, r3
 80062ca:	f000 f905 	bl	80064d8 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 80062ce:	2101      	movs	r1, #1
 80062d0:	a801      	add	r0, sp, #4
 80062d2:	f000 f8ab 	bl	800642c <ILI9341_SendData>
}
 80062d6:	b003      	add	sp, #12
 80062d8:	f85d fb04 	ldr.w	pc, [sp], #4

080062dc <_HW_FillFrame_>:

// Implementacija funkcije za izris pravokotnika na zaslon.
static inline UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
	UG_S16 w,h;
	if (x2 > x1) w = x2 - x1;
 80062dc:	4282      	cmp	r2, r0
{
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (x2 > x1) w = x2 - x1;
 80062e0:	bfcc      	ite	gt
 80062e2:	1a16      	subgt	r6, r2, r0
	else
	{
		w = x1 - x2;
 80062e4:	1a86      	suble	r6, r0, r2
{
 80062e6:	4604      	mov	r4, r0
		w = x1 - x2;
 80062e8:	bfd8      	it	le
 80062ea:	4614      	movle	r4, r2
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 80062ec:	2002      	movs	r0, #2
		x1 = x2;
	}
	if (y2 > y1) h = y2 - y1;
 80062ee:	428b      	cmp	r3, r1
 80062f0:	bfcc      	ite	gt
 80062f2:	1a5f      	subgt	r7, r3, r1
	else
	{
		h = y1 - y2;
 80062f4:	1acf      	suble	r7, r1, r3
{
 80062f6:	460d      	mov	r5, r1
		h = y1 - y2;
 80062f8:	bfd8      	it	le
 80062fa:	461d      	movle	r5, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 80062fc:	f000 f9f8 	bl	80066f0 <ILI9341_GetParam>
 8006300:	4684      	mov	ip, r0
	ILI9341_SetDisplayWindow(x, y, w, h);
 8006302:	4620      	mov	r0, r4
	uint32_t pixel_count = w * h;  /* Dejansko št. pikslov */
 8006304:	fb07 f406 	mul.w	r4, r7, r6
	if(pixel_count > max_count)
 8006308:	4564      	cmp	r4, ip
	ILI9341_SetDisplayWindow(x, y, w, h);
 800630a:	4629      	mov	r1, r5
 800630c:	463b      	mov	r3, r7
 800630e:	4632      	mov	r2, r6
 8006310:	bf28      	it	cs
 8006312:	4664      	movcs	r4, ip
 8006314:	f000 f8e0 	bl	80064d8 <ILI9341_SetDisplayWindow>
	ILI9341_SendRepeatedData(c, pixel_count);
 8006318:	9b06      	ldr	r3, [sp, #24]
 800631a:	4621      	mov	r1, r4
 800631c:	b298      	uxth	r0, r3
 800631e:	f000 f8cd 	bl	80064bc <ILI9341_SendRepeatedData>
	}

	LCD_FillRect(x1, y1, w, h, c);

	return UG_RESULT_OK;
}
 8006322:	2000      	movs	r0, #0
 8006324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006326:	bf00      	nop

08006328 <LCD_Init>:
{
 8006328:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 800632a:	4c18      	ldr	r4, [pc, #96]	; (800638c <LCD_Init+0x64>)
 800632c:	2508      	movs	r5, #8
 800632e:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 8006330:	2078      	movs	r0, #120	; 0x78
 8006332:	f7fc fd3d 	bl	8002db0 <HAL_Delay>
	LCD_RST_HIGH();
 8006336:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 8006338:	2078      	movs	r0, #120	; 0x78
 800633a:	f7fc fd39 	bl	8002db0 <HAL_Delay>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800633e:	2103      	movs	r1, #3
 8006340:	2055      	movs	r0, #85	; 0x55
 8006342:	f000 f919 	bl	8006578 <ILI9341_Init>
	ILI9341_DisplayOn();
 8006346:	f000 f9c5 	bl	80066d4 <ILI9341_DisplayOn>
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 800634a:	2000      	movs	r0, #0
 800634c:	f000 f9d0 	bl	80066f0 <ILI9341_GetParam>
 8006350:	4604      	mov	r4, r0
 8006352:	2001      	movs	r0, #1
 8006354:	f000 f9cc 	bl	80066f0 <ILI9341_GetParam>
 8006358:	4605      	mov	r5, r0
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 800635a:	2002      	movs	r0, #2
 800635c:	f000 f9c8 	bl	80066f0 <ILI9341_GetParam>
	uint32_t pixel_count = w * h;  /* Dejansko št. pikslov */
 8006360:	fb05 f104 	mul.w	r1, r5, r4
	if(pixel_count > max_count)
 8006364:	4288      	cmp	r0, r1
 8006366:	bf28      	it	cs
 8006368:	4608      	movcs	r0, r1
	ILI9341_SetDisplayWindow(x, y, w, h);
 800636a:	2100      	movs	r1, #0
 800636c:	462b      	mov	r3, r5
 800636e:	4622      	mov	r2, r4
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	f000 f8b0 	bl	80064d8 <ILI9341_SetDisplayWindow>
	ILI9341_SendRepeatedData(c, pixel_count);
 8006378:	4621      	mov	r1, r4
 800637a:	2000      	movs	r0, #0
 800637c:	f000 f89e 	bl	80064bc <ILI9341_SendRepeatedData>
	ILI9341_WaitTransfer();
 8006380:	f000 f9a4 	bl	80066cc <ILI9341_WaitTransfer>
}
 8006384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD_BKLT_init();
 8006388:	f000 b832 	b.w	80063f0 <LCD_BKLT_init>
 800638c:	48000c00 	.word	0x48000c00

08006390 <LCD_uGUI_init>:
// ------------ Inicializacija uGUI za delo z našim zaslonom -------------------


// Inicializacija uGUI knjižnice za delo z našim LCD zaslonom.
void LCD_uGUI_init(void)
{
 8006390:	b500      	push	{lr}
	// Inicializacija uGUI knjižnice: registracija funkcije za izris enega piksla na zaslon,
	// specifikacija resolucije zaslona.
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8006392:	2000      	movs	r0, #0
{
 8006394:	b083      	sub	sp, #12
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8006396:	f000 f9ab 	bl	80066f0 <ILI9341_GetParam>
 800639a:	9001      	str	r0, [sp, #4]
 800639c:	2001      	movs	r0, #1
 800639e:	f000 f9a7 	bl	80066f0 <ILI9341_GetParam>
 80063a2:	9a01      	ldr	r2, [sp, #4]
 80063a4:	490c      	ldr	r1, [pc, #48]	; (80063d8 <LCD_uGUI_init+0x48>)
 80063a6:	4603      	mov	r3, r0
 80063a8:	480c      	ldr	r0, [pc, #48]	; (80063dc <LCD_uGUI_init+0x4c>)
 80063aa:	f000 fae3 	bl	8006974 <UG_Init>

	// Nastavitev "default" fontov in barv za besedilo in ozadje.
	UG_FontSelect(&FONT_8X12);
 80063ae:	480c      	ldr	r0, [pc, #48]	; (80063e0 <LCD_uGUI_init+0x50>)
 80063b0:	f000 fb14 	bl	80069dc <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 80063b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80063b8:	f000 fb5a 	bl	8006a70 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 80063bc:	2000      	movs	r0, #0
 80063be:	f000 fb5d 	bl	8006a7c <UG_SetBackcolor>

	// Registracija funkcij za izris pravokotnika.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 80063c2:	4908      	ldr	r1, [pc, #32]	; (80063e4 <LCD_uGUI_init+0x54>)
 80063c4:	2001      	movs	r0, #1
 80063c6:	f000 fd5f 	bl	8006e88 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 80063ca:	2001      	movs	r0, #1
}
 80063cc:	b003      	add	sp, #12
 80063ce:	f85d eb04 	ldr.w	lr, [sp], #4
	UG_DriverEnable(DRIVER_FILL_FRAME);
 80063d2:	f000 bd67 	b.w	8006ea4 <UG_DriverEnable>
 80063d6:	bf00      	nop
 80063d8:	080062c1 	.word	0x080062c1
 80063dc:	200008b4 	.word	0x200008b4
 80063e0:	08017928 	.word	0x08017928
 80063e4:	080062dd 	.word	0x080062dd

080063e8 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063e8:	6341      	str	r1, [r0, #52]	; 0x34
}
 80063ea:	4770      	bx	lr

080063ec <LL_TIM_OC_GetCompareCH1>:
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80063ec:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 80063ee:	4770      	bx	lr

080063f0 <LCD_BKLT_init>:
		// --- Specifikacija časovnika ter kanala časovnika ---
		//
		// Ti dva parametra strukture določimo s pred-definiranima makrojema iz LL knjižnice,
		// podobno kot smo to storili v prejšnjih vajah.
		// Pozor: kanala ne podamo s številko, temveč z masko.
		LCD_backlight.timer = TIM4 ;
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <LCD_BKLT_init+0x2c>)
 80063f2:	4a0b      	ldr	r2, [pc, #44]	; (8006420 <LCD_BKLT_init+0x30>)
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80063f4:	6819      	ldr	r1, [r3, #0]
{
 80063f6:	b430      	push	{r4, r5}
		LCD_backlight.GetCompare = LL_TIM_OC_GetCompareCH1;


		// --- Specifikacija privzete vrednosti za osvetlitev zaslona ---
		//
		LCD_backlight.default_brightness = 50;		// podano v procentih
 80063f8:	2032      	movs	r0, #50	; 0x32
 80063fa:	f041 0101 	orr.w	r1, r1, #1
		LCD_backlight.timer = TIM4 ;
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	6019      	str	r1, [r3, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006402:	6358      	str	r0, [r3, #52]	; 0x34
  SET_BIT(TIMx->CCER, Channels);
 8006404:	6a19      	ldr	r1, [r3, #32]
		LCD_backlight.SetCompare = LL_TIM_OC_SetCompareCH1;
 8006406:	4c07      	ldr	r4, [pc, #28]	; (8006424 <LCD_BKLT_init+0x34>)
 8006408:	6094      	str	r4, [r2, #8]
		LCD_backlight.timer_channel = 1 ;		// namig: poglejte komentar pri implementaciji funkcije LL_TIM_CC_EnableChannel()
 800640a:	2501      	movs	r5, #1
		LCD_backlight.GetCompare = LL_TIM_OC_GetCompareCH1;
 800640c:	4c06      	ldr	r4, [pc, #24]	; (8006428 <LCD_BKLT_init+0x38>)
		LCD_backlight.default_brightness = 50;		// podano v procentih
 800640e:	7410      	strb	r0, [r2, #16]
 8006410:	4329      	orrs	r1, r5
		LCD_backlight.timer_channel = 1 ;		// namig: poglejte komentar pri implementaciji funkcije LL_TIM_CC_EnableChannel()
 8006412:	6055      	str	r5, [r2, #4]
		LCD_backlight.GetCompare = LL_TIM_OC_GetCompareCH1;
 8006414:	60d4      	str	r4, [r2, #12]
		// Uporabite ustrezno LL funkcijo.

			// DOPOLNI
		LL_TIM_CC_EnableChannel(LCD_backlight.timer, LCD_backlight.timer_channel);

}
 8006416:	bc30      	pop	{r4, r5}
 8006418:	6219      	str	r1, [r3, #32]
 800641a:	4770      	bx	lr
 800641c:	40000800 	.word	0x40000800
 8006420:	20000940 	.word	0x20000940
 8006424:	080063e9 	.word	0x080063e9
 8006428:	080063ed 	.word	0x080063ed

0800642c <ILI9341_SendData>:
	FMC_BANK1_SetAddress(*address);
}
#ifdef hLCD_USE_DMA

int32_t ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len, remain;

	if (hLCDDMA.Init.PeriphInc != DMA_PINC_ENABLE)	//za Send data je potrebno omogočit peripheral increment
 8006430:	4c20      	ldr	r4, [pc, #128]	; (80064b4 <ILI9341_SendData+0x88>)
 8006432:	68e3      	ldr	r3, [r4, #12]
 8006434:	2b40      	cmp	r3, #64	; 0x40
{
 8006436:	4606      	mov	r6, r0
 8006438:	460d      	mov	r5, r1
	if (hLCDDMA.Init.PeriphInc != DMA_PINC_ENABLE)	//za Send data je potrebno omogočit peripheral increment
 800643a:	d009      	beq.n	8006450 <ILI9341_SendData+0x24>
	{
		//Cakaj, ce je slucajno sredi transferja
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 800643c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006440:	2b01      	cmp	r3, #1
 8006442:	d1fb      	bne.n	800643c <ILI9341_SendData+0x10>
		hLCDDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 8006444:	2340      	movs	r3, #64	; 0x40
		if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8006446:	481b      	ldr	r0, [pc, #108]	; (80064b4 <ILI9341_SendData+0x88>)
		hLCDDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 8006448:	60e3      	str	r3, [r4, #12]
		if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800644a:	f7fd fb5d 	bl	8003b08 <HAL_DMA_Init>
 800644e:	bb30      	cbnz	r0, 800649e <ILI9341_SendData+0x72>
			return 1;
		}
	}

	// vrni error, če DMA ni inicializiran
	if (hLCDDMA.State == HAL_DMA_STATE_RESET) return 1;
 8006450:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006454:	b31b      	cbz	r3, 800649e <ILI9341_SendData+0x72>

	// poslji podatke glede na sirino vodila
	switch (hLCDDMA.Init.PeriphDataAlignment)
 8006456:	6963      	ldr	r3, [r4, #20]
 8006458:	b34b      	cbz	r3, 80064ae <ILI9341_SendData+0x82>
 800645a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645e:	d024      	beq.n	80064aa <ILI9341_SendData+0x7e>
		}

		//Cakaj, ce je slucajno sredi transferja
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};

		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t)data, (uint32_t)FMC_BANK1_MEM, len) != HAL_OK)
 8006460:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80064b8 <ILI9341_SendData+0x8c>
 8006464:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80064b4 <ILI9341_SendData+0x88>
		if (len > DMA_MAX_LENGTH)
 8006468:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800646c:	d31a      	bcc.n	80064a4 <ILI9341_SendData+0x78>
			remain -= DMA_MAX_LENGTH;
 800646e:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
 8006472:	3dff      	subs	r5, #255	; 0xff
			len = DMA_MAX_LENGTH;
 8006474:	f64f 77ff 	movw	r7, #65535	; 0xffff
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8006478:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
 800647c:	f1bc 0f01 	cmp.w	ip, #1
 8006480:	d1fa      	bne.n	8006478 <ILI9341_SendData+0x4c>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t)data, (uint32_t)FMC_BANK1_MEM, len) != HAL_OK)
 8006482:	463b      	mov	r3, r7
 8006484:	464a      	mov	r2, r9
 8006486:	4631      	mov	r1, r6
 8006488:	4640      	mov	r0, r8
 800648a:	f7fd fbd3 	bl	8003c34 <HAL_DMA_Start_IT>
 800648e:	b930      	cbnz	r0, 800649e <ILI9341_SendData+0x72>
		{
			/* Transfer Error */
			return 1;
		}

		data += len;
 8006490:	eb06 0647 	add.w	r6, r6, r7, lsl #1
		len = remain;
	}
	while (remain > 0);
 8006494:	2d00      	cmp	r5, #0
 8006496:	d1e7      	bne.n	8006468 <ILI9341_SendData+0x3c>

	return 0;
 8006498:	4628      	mov	r0, r5
}
 800649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return 1;
 800649e:	2001      	movs	r0, #1
}
 80064a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a4:	462f      	mov	r7, r5
			remain = 0;
 80064a6:	2500      	movs	r5, #0
 80064a8:	e7e6      	b.n	8006478 <ILI9341_SendData+0x4c>
			len = (length / (2*LCD_IO_DATA_WRITE_CYCLES));
 80064aa:	086d      	lsrs	r5, r5, #1
			break;
 80064ac:	e7d8      	b.n	8006460 <ILI9341_SendData+0x34>
			len = 2*length/LCD_IO_DATA_WRITE_CYCLES;
 80064ae:	006d      	lsls	r5, r5, #1
			break;
 80064b0:	e7d6      	b.n	8006460 <ILI9341_SendData+0x34>
 80064b2:	bf00      	nop
 80064b4:	200001f8 	.word	0x200001f8
 80064b8:	60010000 	.word	0x60010000

080064bc <ILI9341_SendRepeatedData>:

int32_t ILI9341_SendRepeatedData(LCD_IO_Data_t data, uint32_t num_copies)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 80064bc:	b139      	cbz	r1, 80064ce <ILI9341_SendRepeatedData+0x12>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 80064be:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <ILI9341_SendRepeatedData+0x18>)
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 80064c0:	2300      	movs	r3, #0
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 80064c2:	8010      	strh	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064c4:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 80064c8:	3301      	adds	r3, #1
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d1f9      	bne.n	80064c2 <ILI9341_SendRepeatedData+0x6>
		FMC_BANK1_WriteData(data);

	return 0;
}
 80064ce:	2000      	movs	r0, #0
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	60010000 	.word	0x60010000

080064d8 <ILI9341_SetDisplayWindow>:
  * @param  Ypos   y koordinata izhodišča
  * @param  Height višina okna
  * @param  Width  širina okna
  */
void ILI9341_SetDisplayWindow(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	b082      	sub	sp, #8

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	command = ILI9341_CASET;
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 80064dc:	3a01      	subs	r2, #1
{
 80064de:	461e      	mov	r6, r3
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 80064e0:	b2c3      	uxtb	r3, r0
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 80064e2:	0a04      	lsrs	r4, r0, #8
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 80064e4:	f8ad 3002 	strh.w	r3, [sp, #2]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 80064e8:	1813      	adds	r3, r2, r0
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 80064ea:	fa12 f080 	uxtah	r0, r2, r0
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 80064ee:	f8ad 4000 	strh.w	r4, [sp]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 80064f2:	0a1b      	lsrs	r3, r3, #8
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 80064f4:	b2c0      	uxtb	r0, r0
 80064f6:	4c1f      	ldr	r4, [pc, #124]	; (8006574 <ILI9341_SetDisplayWindow+0x9c>)
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 80064f8:	f8ad 3004 	strh.w	r3, [sp, #4]
{
 80064fc:	460d      	mov	r5, r1
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 80064fe:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8006502:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8006506:	2a01      	cmp	r2, #1
 8006508:	d1fb      	bne.n	8006502 <ILI9341_SetDisplayWindow+0x2a>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800650a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800650e:	222a      	movs	r2, #42	; 0x2a
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 4);
 8006516:	2104      	movs	r1, #4
 8006518:	4668      	mov	r0, sp
 800651a:	f7ff ff87 	bl	800642c <ILI9341_SendData>

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	command = ILI9341_RASET;
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800651e:	0a2a      	lsrs	r2, r5, #8
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8006520:	1e73      	subs	r3, r6, #1
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 8006522:	f8ad 2000 	strh.w	r2, [sp]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8006526:	b2ea      	uxtb	r2, r5
 8006528:	f8ad 2002 	strh.w	r2, [sp, #2]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 800652c:	195a      	adds	r2, r3, r5
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800652e:	fa13 f585 	uxtah	r5, r3, r5
 8006532:	b2ed      	uxtb	r5, r5
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8006534:	0a13      	lsrs	r3, r2, #8
 8006536:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800653a:	f8ad 5006 	strh.w	r5, [sp, #6]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 800653e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006542:	2b01      	cmp	r3, #1
 8006544:	d1fb      	bne.n	800653e <ILI9341_SetDisplayWindow+0x66>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8006546:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800654a:	222b      	movs	r2, #43	; 0x2b
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 4);
 8006552:	2104      	movs	r1, #4
 8006554:	4668      	mov	r0, sp
 8006556:	f7ff ff69 	bl	800642c <ILI9341_SendData>
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 800655a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800655e:	2b01      	cmp	r3, #1
 8006560:	d1fb      	bne.n	800655a <ILI9341_SetDisplayWindow+0x82>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8006562:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8006566:	222c      	movs	r2, #44	; 0x2c
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	f3bf 8f4f 	dsb	sy

	// Zapusti nastavitev okna v načinu za vpis barve v GRAM
	command = ILI9341_GRAM;
	ILI9341_SetAddress(&command);
}
 800656e:	b002      	add	sp, #8
 8006570:	bd70      	pop	{r4, r5, r6, pc}
 8006572:	bf00      	nop
 8006574:	200001f8 	.word	0x200001f8

08006578 <ILI9341_Init>:
  * @param  color_space želen barvni prostor (ILI9341_COLORSPACE_RBG{565,666})
  * @param  orientation orientacija zaslona
  * @internal
  */
void ILI9341_Init(uint32_t color_space, uint32_t orientation)
{
 8006578:	b570      	push	{r4, r5, r6, lr}
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 800657a:	4b51      	ldr	r3, [pc, #324]	; (80066c0 <ILI9341_Init+0x148>)
 800657c:	4c51      	ldr	r4, [pc, #324]	; (80066c4 <ILI9341_Init+0x14c>)
 800657e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
{
 8006582:	b084      	sub	sp, #16
 8006584:	460d      	mov	r5, r1
 8006586:	4606      	mov	r6, r0
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8006588:	f8ad 3004 	strh.w	r3, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 800658c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006590:	2b01      	cmp	r3, #1
 8006592:	b2d9      	uxtb	r1, r3
 8006594:	d1fa      	bne.n	800658c <ILI9341_Init+0x14>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8006596:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800659a:	2236      	movs	r2, #54	; 0x36
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
	ILI9341_SendData(&parameter, 1);
 80065a2:	a801      	add	r0, sp, #4
 80065a4:	f7ff ff42 	bl	800642c <ILI9341_SendData>
		LCD.width  = ILI9341_WIDTH;
 80065a8:	4947      	ldr	r1, [pc, #284]	; (80066c8 <ILI9341_Init+0x150>)
	switch (orientation) {
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	d076      	beq.n	800669c <ILI9341_Init+0x124>
 80065ae:	2d03      	cmp	r5, #3
 80065b0:	d074      	beq.n	800669c <ILI9341_Init+0x124>
		LCD.width  = ILI9341_WIDTH;
 80065b2:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 80066b0 <ILI9341_Init+0x138>
 80065b6:	ed81 7b00 	vstr	d7, [r1]
		break;
 80065ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80065be:	22f0      	movs	r2, #240	; 0xf0
	LCD.orientation = orientation;
 80065c0:	608d      	str	r5, [r1, #8]
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[5];

	ILI9341_SetOrientation(orientation);
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 80065c2:	2100      	movs	r1, #0
 80065c4:	4608      	mov	r0, r1
 80065c6:	f7ff ff87 	bl	80064d8 <ILI9341_SetDisplayWindow>
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 80065ca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d1fb      	bne.n	80065ca <ILI9341_Init+0x52>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 80065d2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80065d6:	2211      	movs	r2, #17
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	f3bf 8f4f 	dsb	sy

	// Sleep out
	command = ILI9341_SLEEP_OUT;
	ILI9341_SetAddress(&command);
	HAL_Delay(200);
 80065de:	20c8      	movs	r0, #200	; 0xc8
 80065e0:	f7fc fbe6 	bl	8002db0 <HAL_Delay>
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 80065e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d1fb      	bne.n	80065e4 <ILI9341_Init+0x6c>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 80065ec:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80065f0:	2213      	movs	r2, #19
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy

	// Display Normal mode
	command = ILI9341_NORMAL_MODE_ON;
	ILI9341_SetAddress(&command);
	HAL_Delay(100);
 80065f8:	2064      	movs	r0, #100	; 0x64
 80065fa:	f7fc fbd9 	bl	8002db0 <HAL_Delay>

	// Pixel Format
	command = ILI9341_PIXEL_FORMAT;
	parameter[0] = color_space;
 80065fe:	f8ad 6004 	strh.w	r6, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8006602:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006606:	2b01      	cmp	r3, #1
 8006608:	b2d9      	uxtb	r1, r3
 800660a:	d1fa      	bne.n	8006602 <ILI9341_Init+0x8a>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800660c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8006610:	223a      	movs	r2, #58	; 0x3a
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 1);
 8006618:	a801      	add	r0, sp, #4
 800661a:	f7ff ff07 	bl	800642c <ILI9341_SendData>
	HAL_Delay(100);
 800661e:	2064      	movs	r0, #100	; 0x64
 8006620:	f7fc fbc6 	bl	8002db0 <HAL_Delay>

	// Update Interface control
	command = ILI9341_INTERFACE;
	parameter[0] = 0x49;
 8006624:	2249      	movs	r2, #73	; 0x49
	parameter[1] = 0;
	parameter[2] = 0x20;
 8006626:	2320      	movs	r3, #32
	parameter[0] = 0x49;
 8006628:	9201      	str	r2, [sp, #4]
	parameter[2] = 0x20;
 800662a:	f8ad 3008 	strh.w	r3, [sp, #8]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 800662e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006632:	2b01      	cmp	r3, #1
 8006634:	b2dd      	uxtb	r5, r3
 8006636:	d1fa      	bne.n	800662e <ILI9341_Init+0xb6>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8006638:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800663c:	22f6      	movs	r2, #246	; 0xf6
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 3);
 8006644:	2103      	movs	r1, #3
 8006646:	a801      	add	r0, sp, #4
 8006648:	f7ff fef0 	bl	800642c <ILI9341_SendData>

	// Enable TE
	command = ILI9341_TEON;
	parameter[0] = 1; /* VSYNC + HSYNC */
 800664c:	f8ad 5004 	strh.w	r5, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8006650:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006654:	2b01      	cmp	r3, #1
 8006656:	b2d9      	uxtb	r1, r3
 8006658:	d1fa      	bne.n	8006650 <ILI9341_Init+0xd8>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800665a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800665e:	2235      	movs	r2, #53	; 0x35
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 1);
 8006666:	a801      	add	r0, sp, #4
 8006668:	f7ff fee0 	bl	800642c <ILI9341_SendData>
	HAL_Delay(100);
 800666c:	2064      	movs	r0, #100	; 0x64
 800666e:	f7fc fb9f 	bl	8002db0 <HAL_Delay>

	// Enable TE scan line
	command = ILI9341_SET_TEAR_SCANLINE;
	parameter[0] = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	9301      	str	r3, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8006676:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800667a:	2b01      	cmp	r3, #1
 800667c:	d1fb      	bne.n	8006676 <ILI9341_Init+0xfe>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800667e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8006682:	2244      	movs	r2, #68	; 0x44
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	f3bf 8f4f 	dsb	sy
	parameter[1] = 0;
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 2);
 800668a:	2102      	movs	r1, #2
 800668c:	a801      	add	r0, sp, #4
 800668e:	f7ff fecd 	bl	800642c <ILI9341_SendData>
	HAL_Delay(100);
 8006692:	2064      	movs	r0, #100	; 0x64
 8006694:	f7fc fb8c 	bl	8002db0 <HAL_Delay>
}
 8006698:	b004      	add	sp, #16
 800669a:	bd70      	pop	{r4, r5, r6, pc}
		LCD.width  = ILI9341_HEIGHT;
 800669c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80066b8 <ILI9341_Init+0x140>
		break;
 80066a0:	23f0      	movs	r3, #240	; 0xf0
		LCD.width  = ILI9341_HEIGHT;
 80066a2:	ed81 7b00 	vstr	d7, [r1]
		break;
 80066a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80066aa:	e789      	b.n	80065c0 <ILI9341_Init+0x48>
 80066ac:	f3af 8000 	nop.w
 80066b0:	000000f0 	.word	0x000000f0
 80066b4:	00000140 	.word	0x00000140
 80066b8:	00000140 	.word	0x00000140
 80066bc:	000000f0 	.word	0x000000f0
 80066c0:	0800b918 	.word	0x0800b918
 80066c4:	200001f8 	.word	0x200001f8
 80066c8:	20000958 	.word	0x20000958

080066cc <ILI9341_WaitTransfer>:
//! @brief Počakaj na prenos podatka FSMC->Ili9341. Možne dodelave.
void ILI9341_WaitTransfer()
{
	// AddresSetupTime + 1 + DataSetupTime + 1. Glej `fmc.c'.
	// načeloma 6 + 1 + 5 + 1 ms (13 ms), vendar ni zadosti
	HAL_Delay(50);
 80066cc:	2032      	movs	r0, #50	; 0x32
 80066ce:	f7fc bb6f 	b.w	8002db0 <HAL_Delay>
 80066d2:	bf00      	nop

080066d4 <ILI9341_DisplayOn>:
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 80066d4:	4a05      	ldr	r2, [pc, #20]	; (80066ec <ILI9341_DisplayOn+0x18>)
 80066d6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d1fb      	bne.n	80066d6 <ILI9341_DisplayOn+0x2>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 80066de:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80066e2:	2229      	movs	r2, #41	; 0x29
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
	ILI9341_SetAddress(&command);
}
 80066ea:	4770      	bx	lr
 80066ec:	200001f8 	.word	0x200001f8

080066f0 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 80066f0:	2803      	cmp	r0, #3
 80066f2:	d80f      	bhi.n	8006714 <ILI9341_GetParam+0x24>
 80066f4:	e8df f000 	tbb	[pc, r0]
 80066f8:	0b020508 	.word	0x0b020508
 80066fc:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
 8006700:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
		break;
	case LCD_HEIGHT:
		value = LCD.height;
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <ILI9341_GetParam+0x28>)
 8006704:	6858      	ldr	r0, [r3, #4]
		break;
 8006706:	4770      	bx	lr
		value = LCD.width;
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <ILI9341_GetParam+0x28>)
 800670a:	6818      	ldr	r0, [r3, #0]
		break;
 800670c:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 800670e:	4b02      	ldr	r3, [pc, #8]	; (8006718 <ILI9341_GetParam+0x28>)
 8006710:	6898      	ldr	r0, [r3, #8]
		break;
 8006712:	4770      	bx	lr
	uint32_t value = 0;
 8006714:	2000      	movs	r0, #0
	default:
		break;
	}

	return value;
}
 8006716:	4770      	bx	lr
 8006718:	20000958 	.word	0x20000958

0800671c <PSERV_init>:

static periodic_services_handle_t periodic_services;

void PSERV_init(void)
{
	periodic_services.TIM = TIM6;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <PSERV_init+0x10>)
 800671e:	4a04      	ldr	r2, [pc, #16]	; (8006730 <PSERV_init+0x14>)
 8006720:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
	LL_TIM_EnableCounter(TIM6);
}
 800672a:	4770      	bx	lr
 800672c:	40001000 	.word	0x40001000
 8006730:	20000964 	.word	0x20000964

08006734 <PSERV_enable>:

void PSERV_enable(void)
{
	LL_TIM_EnableUpdateEvent(periodic_services.TIM);
 8006734:	4b03      	ldr	r3, [pc, #12]	; (8006744 <PSERV_enable+0x10>)
 8006736:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 8006738:	6813      	ldr	r3, [r2, #0]
 800673a:	f023 0302 	bic.w	r3, r3, #2
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000964 	.word	0x20000964

08006748 <PSERV_run_services_Callback>:
	LL_TIM_DisableUpdateEvent(periodic_services.TIM);
}

void PSERV_run_services_Callback(void)
{
	KBD_demo_toggle_LEDs_if_buttons_pressed();
 8006748:	f7ff bcfa 	b.w	8006140 <KBD_demo_toggle_LEDs_if_buttons_pressed>

0800674c <narisi_velik_kvadrat>:
#include "stdint.h"


void narisi_velik_kvadrat(int x, int y, __uint16_t c)
{
	pixels[(y)*240 + (x)] = c;
 800674c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8006750:	010b      	lsls	r3, r1, #4
{
 8006752:	b570      	push	{r4, r5, r6, lr}

	pixels[(y+1)*240 + (x)] = c;
	pixels[(y+1)*240 + (x+1)] = c;
	pixels[(y+1)*240 + (x+2)] = c;

	pixels[(y+2)*240 + (x)] = c;
 8006754:	f503 7cf0 	add.w	ip, r3, #480	; 0x1e0
	pixels[(y+1)*240 + (x)] = c;
 8006758:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
	pixels[(y)*240 + (x+2)] = c;
 800675c:	1c85      	adds	r5, r0, #2
 800675e:	f04f 0e00 	mov.w	lr, #0
	pixels[(y)*240 + (x)] = c;
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <narisi_velik_kvadrat+0x4c>)
	pixels[(y+2)*240 + (x)] = c;
 8006764:	4484      	add	ip, r0
	pixels[(y)*240 + (x)] = c;
 8006766:	eb00 1601 	add.w	r6, r0, r1, lsl #4
 800676a:	f362 0e0f 	bfi	lr, r2, #0, #16
	pixels[(y+1)*240 + (x)] = c;
 800676e:	4420      	add	r0, r4
	pixels[(y)*240 + (x+2)] = c;
 8006770:	eb05 1101 	add.w	r1, r5, r1, lsl #4
	pixels[(y+1)*240 + (x+2)] = c;
 8006774:	442c      	add	r4, r5
 8006776:	f362 4e1f 	bfi	lr, r2, #16, #16
	pixels[(y)*240 + (x)] = c;
 800677a:	f843 e016 	str.w	lr, [r3, r6, lsl #1]
	pixels[(y)*240 + (x+2)] = c;
 800677e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	pixels[(y+1)*240 + (x)] = c;
 8006782:	f843 e010 	str.w	lr, [r3, r0, lsl #1]
	pixels[(y+1)*240 + (x+2)] = c;
 8006786:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	pixels[(y+2)*240 + (x)] = c;
 800678a:	f843 e01c 	str.w	lr, [r3, ip, lsl #1]
	pixels[(y+2)*240 + (x+1)] = c;
	pixels[(y+2)*240 + (x)+2] = c;
 800678e:	f10c 0c02 	add.w	ip, ip, #2
 8006792:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]

}
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	20000968 	.word	0x20000968

0800679c <narisi_velik_kvadrat_stene>:
void narisi_velik_kvadrat_stene(int x, int y, __uint16_t c)
{
	pixels[(y)*240 + (x)] = c;
 800679c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80067a0:	f04f 0c00 	mov.w	ip, #0
{
 80067a4:	b530      	push	{r4, r5, lr}
 80067a6:	f362 0c0f 	bfi	ip, r2, #0, #16
 80067aa:	4c15      	ldr	r4, [pc, #84]	; (8006800 <narisi_velik_kvadrat_stene+0x64>)
	pixels[(y)*240 + (x)] = c;
 80067ac:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 80067b0:	f362 4c1f 	bfi	ip, r2, #16, #16
 80067b4:	f844 c01e 	str.w	ip, [r4, lr, lsl #1]
 80067b8:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80067bc:	010b      	lsls	r3, r1, #4
 80067be:	f8ce c004 	str.w	ip, [lr, #4]
	pixels[(y)*240 + (x+1)] = c;
	pixels[(y)*240 + (x+2)] = c;
	pixels[(y)*240 + (x+3)] = c;
	pixels[(y)*240 + (x+4)] = c;

	pixels[(y+1)*240 + (x)] = c;
 80067c2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
	pixels[(y)*240 + (x+4)] = c;
 80067c6:	f100 0e04 	add.w	lr, r0, #4
	pixels[(y+1)*240 + (x+1)] = c;
	pixels[(y+1)*240 + (x+2)] = c;
	pixels[(y+1)*240 + (x+3)] = c;
	pixels[(y+1)*240 + (x+4)] = c;

	pixels[(y+2)*240 + (x)] = c;
 80067ca:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80067ce:	4403      	add	r3, r0
	pixels[(y)*240 + (x+4)] = c;
 80067d0:	eb0e 1101 	add.w	r1, lr, r1, lsl #4
	pixels[(y+1)*240 + (x)] = c;
 80067d4:	4428      	add	r0, r5
	pixels[(y)*240 + (x+4)] = c;
 80067d6:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
	pixels[(y+1)*240 + (x+4)] = c;
 80067da:	44ae      	add	lr, r5
	pixels[(y+1)*240 + (x)] = c;
 80067dc:	f844 c010 	str.w	ip, [r4, r0, lsl #1]
 80067e0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80067e4:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 80067e8:	f8c0 c004 	str.w	ip, [r0, #4]
	pixels[(y+1)*240 + (x+4)] = c;
 80067ec:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
	pixels[(y+2)*240 + (x)] = c;
 80067f0:	f844 c013 	str.w	ip, [r4, r3, lsl #1]
	pixels[(y+2)*240 + (x+1)] = c;
	pixels[(y+2)*240 + (x)+2] = c;
	pixels[(y+2)*240 + (x)+3] = c;
	pixels[(y+2)*240 + (x)+4] = c;
 80067f4:	3304      	adds	r3, #4
	pixels[(y+2)*240 + (x)] = c;
 80067f6:	f8c1 c004 	str.w	ip, [r1, #4]
	pixels[(y+2)*240 + (x)+4] = c;
 80067fa:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
}
 80067fe:	bd30      	pop	{r4, r5, pc}
 8006800:	20000968 	.word	0x20000968

08006804 <create_rgb>:
	else if (kot > 2 * PI) return kot - 2 * PI;
	return kot;
}
unsigned long create_rgb(int r, int g, int b)
{
	return ((((r>>3)<<11) | ((g>>2)<<5) | (b>>3)));
 8006804:	1089      	asrs	r1, r1, #2
 8006806:	10d2      	asrs	r2, r2, #3
 8006808:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800680c:	10c0      	asrs	r0, r0, #3
}
 800680e:	ea42 20c0 	orr.w	r0, r2, r0, lsl #11
 8006812:	4770      	bx	lr
 8006814:	0000      	movs	r0, r0
	...

08006818 <drawGun>:

#include "t_gun.ppm"



void drawGun() {
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	ed2d 8b06 	vpush	{d8-d10}
 8006820:	b085      	sub	sp, #20
 8006822:	4b47      	ldr	r3, [pc, #284]	; (8006940 <drawGun+0x128>)
 8006824:	9303      	str	r3, [sp, #12]
		for (int x = 0;x < 128;x+=tx_step) {
			int pixel = ((y) * 128 + x) * 3;
			int red = t_guns[pixel + 0];
			int green = t_guns[pixel + 1];
			int blue = t_guns[pixel + 2];
			if ((float)(red+green+blue)/765 < 0.9) {
 8006826:	f20f 1b08 	addw	fp, pc, #264	; 0x108
 800682a:	e9db ab00 	ldrd	sl, fp, [fp]
	for (int y = 0;y < 128;y+=ty_step) {
 800682e:	2300      	movs	r3, #0
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8006830:	eddf 9a44 	vldr	s19, [pc, #272]	; 8006944 <drawGun+0x12c>
			if ((float)(red+green+blue)/765 < 0.9) {
 8006834:	ed9f 8a44 	vldr	s16, [pc, #272]	; 8006948 <drawGun+0x130>
	for (int y = 0;y < 128;y+=ty_step) {
 8006838:	9302      	str	r3, [sp, #8]
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 800683a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
 800683e:	eeb3 9a02 	vmov.f32	s18, #50	; 0x41900000  18.0
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8006842:	eddd 7a02 	vldr	s15, [sp, #8]

				gun_x *= s_scale;
				gun_x += s_offset;
				gun_y *= s_scale;
 8006846:	9c03      	ldr	r4, [sp, #12]
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8006848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		for (int x = 0;x < 128;x+=tx_step) {
 800684c:	2500      	movs	r5, #0
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 800684e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8006852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800685a:	ee77 7aa9 	vadd.f32	s15, s15, s19
				gun_y *= s_scale;
 800685e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006862:	ee17 0a90 	vmov	r0, s15
 8006866:	f7f9 fe29 	bl	80004bc <__aeabi_i2d>
 800686a:	a333      	add	r3, pc, #204	; (adr r3, 8006938 <drawGun+0x120>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 fe8e 	bl	8000590 <__aeabi_dmul>
 8006874:	f7fa f93c 	bl	8000af0 <__aeabi_d2iz>
 8006878:	ee0a 0a10 	vmov	s20, r0
 800687c:	e002      	b.n	8006884 <drawGun+0x6c>
		for (int x = 0;x < 128;x+=tx_step) {
 800687e:	3502      	adds	r5, #2
 8006880:	2d80      	cmp	r5, #128	; 0x80
 8006882:	d044      	beq.n	800690e <drawGun+0xf6>
			int red = t_guns[pixel + 0];
 8006884:	f894 8000 	ldrb.w	r8, [r4]
			int green = t_guns[pixel + 1];
 8006888:	f894 9001 	ldrb.w	r9, [r4, #1]
			int blue = t_guns[pixel + 2];
 800688c:	78a7      	ldrb	r7, [r4, #2]
			if ((float)(red+green+blue)/765 < 0.9) {
 800688e:	eb08 0309 	add.w	r3, r8, r9
 8006892:	443b      	add	r3, r7
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		for (int x = 0;x < 128;x+=tx_step) {
 800689c:	3406      	adds	r4, #6
			if ((float)(red+green+blue)/765 < 0.9) {
 800689e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80068a2:	ee17 0a90 	vmov	r0, s15
 80068a6:	f7f9 fe1b 	bl	80004e0 <__aeabi_f2d>
 80068aa:	4652      	mov	r2, sl
 80068ac:	465b      	mov	r3, fp
 80068ae:	f7fa f8e1 	bl	8000a74 <__aeabi_dcmplt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0e3      	beq.n	800687e <drawGun+0x66>
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
 80068b6:	ee07 5a90 	vmov	s15, r5
 80068ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		for (int x = 0;x < 128;x+=tx_step) {
 80068be:	3502      	adds	r5, #2
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
 80068c0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80068c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068cc:	ee77 7a89 	vadd.f32	s15, s15, s18
				gun_x *= s_scale;
 80068d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068d4:	ee17 0a90 	vmov	r0, s15
 80068d8:	f7f9 fdf0 	bl	80004bc <__aeabi_i2d>
 80068dc:	a316      	add	r3, pc, #88	; (adr r3, 8006938 <drawGun+0x120>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f7f9 fe55 	bl	8000590 <__aeabi_dmul>

				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 80068e6:	463a      	mov	r2, r7
				gun_x *= s_scale;
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7ff ff88 	bl	8006804 <create_rgb>
				gun_x *= s_scale;
 80068f4:	4639      	mov	r1, r7
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 80068f6:	b282      	uxth	r2, r0
				gun_x *= s_scale;
 80068f8:	4630      	mov	r0, r6
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 80068fa:	9201      	str	r2, [sp, #4]
				gun_x *= s_scale;
 80068fc:	f7fa f8f8 	bl	8000af0 <__aeabi_d2iz>
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 8006900:	9a01      	ldr	r2, [sp, #4]
 8006902:	ee1a 1a10 	vmov	r1, s20
 8006906:	f7ff ff21 	bl	800674c <narisi_velik_kvadrat>
		for (int x = 0;x < 128;x+=tx_step) {
 800690a:	2d80      	cmp	r5, #128	; 0x80
 800690c:	d1ba      	bne.n	8006884 <drawGun+0x6c>
	for (int y = 0;y < 128;y+=ty_step) {
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	9a03      	ldr	r2, [sp, #12]
 8006912:	3302      	adds	r3, #2
 8006914:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	9203      	str	r2, [sp, #12]
 800691e:	d190      	bne.n	8006842 <drawGun+0x2a>
			}
		}
	}
}
 8006920:	b005      	add	sp, #20
 8006922:	ecbd 8b06 	vpop	{d8-d10}
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
 8006930:	cccccccd 	.word	0xcccccccd
 8006934:	3feccccc 	.word	0x3feccccc
 8006938:	33333333 	.word	0x33333333
 800693c:	40033333 	.word	0x40033333
 8006940:	0800b928 	.word	0x0800b928
 8006944:	42300000 	.word	0x42300000
 8006948:	3aab5601 	.word	0x3aab5601

0800694c <TIMUT_stopwatch_set_time_mark>:
// Funkcija TIMUT_stopwatch_set_time_mark() si zabeleži trenutno
// vrednost SysTick števca in tako na nek način postavi "časovni zaznamek"
// (angl. time mark), v katerem trenutku smo z uro štoparico pričeli
// meriti čas (tj. "štopati").
void TIMUT_stopwatch_set_time_mark(stopwatch_handle_t *stopwatch)
{
 800694c:	b510      	push	{r4, lr}
 800694e:	4604      	mov	r4, r0
	stopwatch->time_mark = HAL_GetTick();
 8006950:	f7fc fa28 	bl	8002da4 <HAL_GetTick>
 8006954:	6020      	str	r0, [r4, #0]
}
 8006956:	bd10      	pop	{r4, pc}

08006958 <TIMUT_stopwatch_has_X_ms_passed>:
// Funkcija TIMUT_stopwatch_has_X_ms_passed() preveri, ali je od postavitve
// časovnega zaznamka že preteklo "x" milisekund, kjer pa je "x" vrednost
// vhodnega parametra funkcije. Funkcija vrne vrednost 1, če je že preteklo
// "x" milisekund, sicer pa vrne 0.
uint8_t TIMUT_stopwatch_has_X_ms_passed(stopwatch_handle_t *stopwatch, uint32_t x)
{
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	460d      	mov	r5, r1
	stopwatch->elapsed_time = HAL_GetTick() - stopwatch->time_mark;
 800695e:	f7fc fa21 	bl	8002da4 <HAL_GetTick>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	1ac0      	subs	r0, r0, r3
	else
	{
		return 0;	// pretečeni čas je manjši od "x" milisekund
	}

}
 8006966:	4285      	cmp	r5, r0
	stopwatch->elapsed_time = HAL_GetTick() - stopwatch->time_mark;
 8006968:	6060      	str	r0, [r4, #4]
}
 800696a:	bf2c      	ite	cs
 800696c:	2000      	movcs	r0, #0
 800696e:	2001      	movcc	r0, #1
 8006970:	bd38      	pop	{r3, r4, r5, pc}
 8006972:	bf00      	nop

08006974 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8006974:	b430      	push	{r4, r5}
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
   g->x_dim = x;
 8006976:	e9c0 1200 	strd	r1, r2, [r0]
   g->y_dim = y;
   g->console.x_start = 4;
 800697a:	2404      	movs	r4, #4
   g->console.y_start = 4;
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800697c:	1f51      	subs	r1, r2, #5
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800697e:	1f5a      	subs	r2, r3, #5
 8006980:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
   g->console.y_start = 4;
 8006984:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
   g->y_dim = y;
 8006988:	6083      	str	r3, [r0, #8]
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
   g->char_h_space = 1;
 800698a:	f240 1401 	movw	r4, #257	; 0x101
   g->char_v_space = 1;
   g->font.p = NULL;
 800698e:	2300      	movs	r3, #0
   g->console.x_pos = g->console.x_end;
 8006990:	6241      	str	r1, [r0, #36]	; 0x24
   {
      g->driver[i].driver = NULL;
      g->driver[i].state = 0;
   }

   gui = g;
 8006992:	4911      	ldr	r1, [pc, #68]	; (80069d8 <UG_Init+0x64>)
   g->console.y_pos = g->console.y_end;
 8006994:	6282      	str	r2, [r0, #40]	; 0x28
   g->desktop_color = 0x5C5D;
 8006996:	f645 455d 	movw	r5, #23645	; 0x5c5d
   g->char_h_space = 1;
 800699a:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
      g->driver[i].state = 0;
 800699e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 80069a2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80069a6:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
   g->fore_color = C_WHITE;
 80069aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   g->desktop_color = 0x5C5D;
 80069ae:	66c5      	str	r5, [r0, #108]	; 0x6c
   g->font.char_width = 0;
 80069b0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
   g->font.end_char = 0;
 80069b4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   g->back_color = C_BLACK;
 80069b8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
   g->active_window = NULL;
 80069bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
   gui = g;
 80069c0:	6008      	str	r0, [r1, #0]
   g->font.p = NULL;
 80069c2:	6443      	str	r3, [r0, #68]	; 0x44
   g->font.widths = NULL;
 80069c4:	65c3      	str	r3, [r0, #92]	; 0x5c
   g->last_window = NULL;
 80069c6:	6203      	str	r3, [r0, #32]
      g->driver[i].driver = NULL;
 80069c8:	6743      	str	r3, [r0, #116]	; 0x74
 80069ca:	67c3      	str	r3, [r0, #124]	; 0x7c
 80069cc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   return 1;
}
 80069d0:	bc30      	pop	{r4, r5}
 80069d2:	2001      	movs	r0, #1
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2001cbc0 	.word	0x2001cbc0

080069dc <UG_FontSelect>:
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
   gui->font = *font;
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <UG_FontSelect+0x20>)
 80069de:	681b      	ldr	r3, [r3, #0]
{
 80069e0:	b500      	push	{lr}
   gui->font = *font;
 80069e2:	4686      	mov	lr, r0
 80069e4:	f103 0c44 	add.w	ip, r3, #68	; 0x44
 80069e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80069ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80069f0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80069f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 80069f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80069fc:	2001cbc0 	.word	0x2001cbc0

08006a00 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	b083      	sub	sp, #12
   UG_S16 n,m;

   if ( x2 < x1 )
 8006a06:	4282      	cmp	r2, r0
{
 8006a08:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	4616      	mov	r6, r2
 8006a10:	468b      	mov	fp, r1
 8006a12:	469a      	mov	sl, r3
   if ( x2 < x1 )
 8006a14:	da01      	bge.n	8006a1a <UG_FillFrame+0x1a>
 8006a16:	4691      	mov	r9, r2
 8006a18:	4606      	mov	r6, r0
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 8006a1a:	45da      	cmp	sl, fp
 8006a1c:	da02      	bge.n	8006a24 <UG_FillFrame+0x24>
 8006a1e:	465b      	mov	r3, fp
 8006a20:	46d3      	mov	fp, sl
 8006a22:	469a      	mov	sl, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8006a24:	4f11      	ldr	r7, [pc, #68]	; (8006a6c <UG_FillFrame+0x6c>)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8006a2c:	0792      	lsls	r2, r2, #30
 8006a2e:	d50a      	bpl.n	8006a46 <UG_FillFrame+0x46>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8006a30:	f8cd 8000 	str.w	r8, [sp]
 8006a34:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8006a36:	4632      	mov	r2, r6
 8006a38:	4653      	mov	r3, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	4648      	mov	r0, r9
 8006a3e:	47a0      	blx	r4
 8006a40:	b188      	cbz	r0, 8006a66 <UG_FillFrame+0x66>
   }

   for( m=y1; m<=y2; m++ )
 8006a42:	45d3      	cmp	fp, sl
 8006a44:	dc0f      	bgt.n	8006a66 <UG_FillFrame+0x66>
 8006a46:	45b1      	cmp	r9, r6
 8006a48:	dc0d      	bgt.n	8006a66 <UG_FillFrame+0x66>
   if ( x2 < x1 )
 8006a4a:	464c      	mov	r4, r9
   {
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
 8006a4c:	683d      	ldr	r5, [r7, #0]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	682d      	ldr	r5, [r5, #0]
 8006a52:	4642      	mov	r2, r8
 8006a54:	4659      	mov	r1, fp
      for( n=x1; n<=x2; n++ )
 8006a56:	3401      	adds	r4, #1
         gui->pset(n,m,c);
 8006a58:	47a8      	blx	r5
      for( n=x1; n<=x2; n++ )
 8006a5a:	42a6      	cmp	r6, r4
 8006a5c:	daf6      	bge.n	8006a4c <UG_FillFrame+0x4c>
   for( m=y1; m<=y2; m++ )
 8006a5e:	f10b 0b01 	add.w	fp, fp, #1
 8006a62:	45d3      	cmp	fp, sl
 8006a64:	ddf1      	ble.n	8006a4a <UG_FillFrame+0x4a>
      }
   }
}
 8006a66:	b003      	add	sp, #12
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	2001cbc0 	.word	0x2001cbc0

08006a70 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 8006a70:	4b01      	ldr	r3, [pc, #4]	; (8006a78 <UG_SetForecolor+0x8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6658      	str	r0, [r3, #100]	; 0x64
}
 8006a76:	4770      	bx	lr
 8006a78:	2001cbc0 	.word	0x2001cbc0

08006a7c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 8006a7c:	4b01      	ldr	r3, [pc, #4]	; (8006a84 <UG_SetBackcolor+0x8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6698      	str	r0, [r3, #104]	; 0x68
}
 8006a82:	4770      	bx	lr
 8006a84:	2001cbc0 	.word	0x2001cbc0

08006a88 <_UG_PutChar>:

/* -------------------------------------------------------------------------------- */
/* -- INTERNAL FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */
void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	b08b      	sub	sp, #44	; 0x2c
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;

   switch ( bt )
 8006a8e:	28fc      	cmp	r0, #252	; 0xfc
{
 8006a90:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8006a94:	9102      	str	r1, [sp, #8]
 8006a96:	9206      	str	r2, [sp, #24]
 8006a98:	461f      	mov	r7, r3
   switch ( bt )
 8006a9a:	f200 80b9 	bhi.w	8006c10 <_UG_PutChar+0x188>
 8006a9e:	28d5      	cmp	r0, #213	; 0xd5
 8006aa0:	d92d      	bls.n	8006afe <_UG_PutChar+0x76>
 8006aa2:	f1a0 03d6 	sub.w	r3, r0, #214	; 0xd6
 8006aa6:	2b26      	cmp	r3, #38	; 0x26
 8006aa8:	f200 80b2 	bhi.w	8006c10 <_UG_PutChar+0x188>
 8006aac:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006ab0:	00b001d9 	.word	0x00b001d9
 8006ab4:	00b000b0 	.word	0x00b000b0
 8006ab8:	00b000b0 	.word	0x00b000b0
 8006abc:	00b00106 	.word	0x00b00106
 8006ac0:	00b000b0 	.word	0x00b000b0
 8006ac4:	00b000b0 	.word	0x00b000b0
 8006ac8:	00b000b0 	.word	0x00b000b0
 8006acc:	00b00108 	.word	0x00b00108
 8006ad0:	00b000b0 	.word	0x00b000b0
 8006ad4:	00b000b0 	.word	0x00b000b0
 8006ad8:	00b000b0 	.word	0x00b000b0
 8006adc:	00b000b0 	.word	0x00b000b0
 8006ae0:	00b000b0 	.word	0x00b000b0
 8006ae4:	00b000b0 	.word	0x00b000b0
 8006ae8:	00b000b0 	.word	0x00b000b0
 8006aec:	00b000b0 	.word	0x00b000b0
 8006af0:	00b001d7 	.word	0x00b001d7
 8006af4:	00b000b0 	.word	0x00b000b0
 8006af8:	00b000b0 	.word	0x00b000b0
 8006afc:	0104      	.short	0x0104
 8006afe:	28b5      	cmp	r0, #181	; 0xb5
 8006b00:	f000 8088 	beq.w	8006c14 <_UG_PutChar+0x18c>
 8006b04:	28c4      	cmp	r0, #196	; 0xc4
 8006b06:	bf08      	it	eq
 8006b08:	248e      	moveq	r4, #142	; 0x8e
 8006b0a:	d17c      	bne.n	8006c06 <_UG_PutChar+0x17e>
      case 0xC4: bt = 0x8E; break; // �
      case 0xB5: bt = 0xE6; break; // �
      case 0xB0: bt = 0xF8; break; // �
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8006b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d875      	bhi.n	8006c00 <_UG_PutChar+0x178>
 8006b14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b16:	6952      	ldr	r2, [r2, #20]
 8006b18:	42a2      	cmp	r2, r4
 8006b1a:	d371      	bcc.n	8006c00 <_UG_PutChar+0x178>
   
   yo = y;
   bn = font->char_width;
 8006b1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b1e:	6892      	ldr	r2, [r2, #8]
   if ( !bn ) return;
 8006b20:	2a00      	cmp	r2, #0
 8006b22:	d06d      	beq.n	8006c00 <_UG_PutChar+0x178>
   bn >>= 3;
 8006b24:	08d1      	lsrs	r1, r2, #3
   if ( font->char_width % 8 ) bn++;
 8006b26:	0750      	lsls	r0, r2, #29
   bn >>= 3;
 8006b28:	9104      	str	r1, [sp, #16]
   if ( font->char_width % 8 ) bn++;
 8006b2a:	bf1c      	itt	ne
 8006b2c:	3101      	addne	r1, #1
 8006b2e:	9104      	strne	r1, [sp, #16]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8006b30:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006b32:	6989      	ldr	r1, [r1, #24]
 8006b34:	2900      	cmp	r1, #0
 8006b36:	f000 80c5 	beq.w	8006cc4 <_UG_PutChar+0x23c>
 8006b3a:	1ae0      	subs	r0, r4, r3
 8006b3c:	5c09      	ldrb	r1, [r1, r0]
 8006b3e:	9103      	str	r1, [sp, #12]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8006b40:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8006e68 <_UG_PutChar+0x3e0>
 8006b44:	f8d9 0000 	ldr.w	r0, [r9]
 8006b48:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
 8006b4c:	f011 0102 	ands.w	r1, r1, #2
 8006b50:	d162      	bne.n	8006c18 <_UG_PutChar+0x190>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8006b52:	9815      	ldr	r0, [sp, #84]	; 0x54
   yo = y;
 8006b54:	f8dd b018 	ldr.w	fp, [sp, #24]
	   if (font->font_type == FONT_TYPE_1BPP)
 8006b58:	7900      	ldrb	r0, [r0, #4]
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	f040 8113 	bne.w	8006d86 <_UG_PutChar+0x2fe>
	   {
         index = (bt - font->start_char)* font->char_height * bn;
 8006b60:	1ae4      	subs	r4, r4, r3
 8006b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	fb03 f404 	mul.w	r4, r3, r4
         for( j=0;j<font->char_height;j++ )
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d048      	beq.n	8006c00 <_UG_PutChar+0x178>
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d045      	beq.n	8006c00 <_UG_PutChar+0x178>
 8006b74:	fb04 3203 	mla	r2, r4, r3, r3
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9006      	str	r0, [sp, #24]
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	9a04      	ldr	r2, [sp, #16]
         {
           xo = x;
 8006b84:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	9307      	str	r3, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 8006b8c:	9300      	str	r3, [sp, #0]
           c=actual_char_width;
           for( i=0;i<bn;i++ )
           {
             b = font->p[index++];
 8006b8e:	9900      	ldr	r1, [sp, #0]
 8006b90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b92:	460b      	mov	r3, r1
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	5c55      	ldrb	r5, [r2, r1]
 8006b9a:	9300      	str	r3, [sp, #0]
             for( k=0;(k<8) && c;k++ )
 8006b9c:	f104 0808 	add.w	r8, r4, #8
 8006ba0:	e008      	b.n	8006bb4 <_UG_PutChar+0x12c>
             {
               if( b & 0x01 )
               {
                  gui->pset(xo,yo,fc);
 8006ba2:	681b      	ldr	r3, [r3, #0]
               else
               {
                  gui->pset(xo,yo,bc);
               }
               b >>= 1;
               xo++;
 8006ba4:	3401      	adds	r4, #1
                  gui->pset(xo,yo,fc);
 8006ba6:	4798      	blx	r3
             for( k=0;(k<8) && c;k++ )
 8006ba8:	4544      	cmp	r4, r8
               b >>= 1;
 8006baa:	ea4f 0555 	mov.w	r5, r5, lsr #1
               c--;
 8006bae:	f106 36ff 	add.w	r6, r6, #4294967295
             for( k=0;(k<8) && c;k++ )
 8006bb2:	d014      	beq.n	8006bde <_UG_PutChar+0x156>
                  gui->pset(xo,yo,fc);
 8006bb4:	463a      	mov	r2, r7
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	4620      	mov	r0, r4
             for( k=0;(k<8) && c;k++ )
 8006bba:	b186      	cbz	r6, 8006bde <_UG_PutChar+0x156>
               if( b & 0x01 )
 8006bbc:	f015 0f01 	tst.w	r5, #1
                  gui->pset(xo,yo,fc);
 8006bc0:	f8d9 3000 	ldr.w	r3, [r9]
               if( b & 0x01 )
 8006bc4:	d1ed      	bne.n	8006ba2 <_UG_PutChar+0x11a>
                  gui->pset(xo,yo,bc);
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4652      	mov	r2, sl
 8006bcc:	4659      	mov	r1, fp
               xo++;
 8006bce:	3401      	adds	r4, #1
                  gui->pset(xo,yo,bc);
 8006bd0:	4798      	blx	r3
             for( k=0;(k<8) && c;k++ )
 8006bd2:	4544      	cmp	r4, r8
               b >>= 1;
 8006bd4:	ea4f 0555 	mov.w	r5, r5, lsr #1
               c--;
 8006bd8:	f106 36ff 	add.w	r6, r6, #4294967295
             for( k=0;(k<8) && c;k++ )
 8006bdc:	d1ea      	bne.n	8006bb4 <_UG_PutChar+0x12c>
           for( i=0;i<bn;i++ )
 8006bde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d1d3      	bne.n	8006b8e <_UG_PutChar+0x106>
         for( j=0;j<font->char_height;j++ )
 8006be6:	9b07      	ldr	r3, [sp, #28]
 8006be8:	9905      	ldr	r1, [sp, #20]
 8006bea:	9a06      	ldr	r2, [sp, #24]
 8006bec:	440b      	add	r3, r1
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	9206      	str	r2, [sp, #24]
             }
           }
           yo++;
 8006bfa:	f10b 0b01 	add.w	fp, fp, #1
         for( j=0;j<font->char_height;j++ )
 8006bfe:	d8bf      	bhi.n	8006b80 <_UG_PutChar+0xf8>
            index += font->char_width - actual_char_width;
            yo++;
         }
      }
   }
}
 8006c00:	b00b      	add	sp, #44	; 0x2c
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   switch ( bt )
 8006c06:	28b0      	cmp	r0, #176	; 0xb0
 8006c08:	bf08      	it	eq
 8006c0a:	24f8      	moveq	r4, #248	; 0xf8
 8006c0c:	f43f af7e 	beq.w	8006b0c <_UG_PutChar+0x84>
   if (bt < font->start_char || bt > font->end_char) return;
 8006c10:	4604      	mov	r4, r0
 8006c12:	e77b      	b.n	8006b0c <_UG_PutChar+0x84>
   switch ( bt )
 8006c14:	24e6      	movs	r4, #230	; 0xe6
 8006c16:	e779      	b.n	8006b0c <_UG_PutChar+0x84>
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c1a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	9906      	ldr	r1, [sp, #24]
 8006c22:	9802      	ldr	r0, [sp, #8]
 8006c24:	9e03      	ldr	r6, [sp, #12]
 8006c26:	440b      	add	r3, r1
 8006c28:	1e42      	subs	r2, r0, #1
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	4432      	add	r2, r6
 8006c2e:	47a8      	blx	r5
      if (font->font_type == FONT_TYPE_1BPP)
 8006c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c32:	791b      	ldrb	r3, [r3, #4]
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006c34:	4605      	mov	r5, r0
      if (font->font_type == FONT_TYPE_1BPP)
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d146      	bne.n	8006cc8 <_UG_PutChar+0x240>
	      index = (bt - font->start_char)* font->char_height * bn;
 8006c3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c3c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006c3e:	6912      	ldr	r2, [r2, #16]
 8006c40:	68c9      	ldr	r1, [r1, #12]
 8006c42:	1aa2      	subs	r2, r4, r2
 8006c44:	fb01 f202 	mul.w	r2, r1, r2
		  for( j=0;j<font->char_height;j++ )
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	d0d9      	beq.n	8006c00 <_UG_PutChar+0x178>
 8006c4c:	9904      	ldr	r1, [sp, #16]
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d0d6      	beq.n	8006c00 <_UG_PutChar+0x178>
 8006c52:	fb02 1801 	mla	r8, r2, r1, r1
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8006c5c:	f8cd 8000 	str.w	r8, [sp]
 8006c60:	004b      	lsls	r3, r1, #1
 8006c62:	9305      	str	r3, [sp, #20]
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	9a04      	ldr	r2, [sp, #16]
 8006c68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	9302      	str	r3, [sp, #8]
			 for( i=0;i<bn;i++ )
 8006c70:	461e      	mov	r6, r3
 8006c72:	465c      	mov	r4, fp
				b = font->p[index++];
 8006c74:	f8d9 2000 	ldr.w	r2, [r9]
 8006c78:	f1a4 0808 	sub.w	r8, r4, #8
 8006c7c:	f812 b006 	ldrb.w	fp, [r2, r6]
 8006c80:	3601      	adds	r6, #1
					  push_pixel(fc);
 8006c82:	4638      	mov	r0, r7
				for( k=0;(k<8) && c;k++ )
 8006c84:	b14c      	cbz	r4, 8006c9a <_UG_PutChar+0x212>
				   if( b & 0x01 )
 8006c86:	f01b 0f01 	tst.w	fp, #1
					  push_pixel(bc);
 8006c8a:	bf08      	it	eq
 8006c8c:	4650      	moveq	r0, sl
				   c--;
 8006c8e:	3c01      	subs	r4, #1
					  push_pixel(bc);
 8006c90:	47a8      	blx	r5
				for( k=0;(k<8) && c;k++ )
 8006c92:	4544      	cmp	r4, r8
				   b >>= 1;
 8006c94:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
				for( k=0;(k<8) && c;k++ )
 8006c98:	d1f3      	bne.n	8006c82 <_UG_PutChar+0x1fa>
			 for( i=0;i<bn;i++ )
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	42b3      	cmp	r3, r6
 8006c9e:	d1e9      	bne.n	8006c74 <_UG_PutChar+0x1ec>
		  for( j=0;j<font->char_height;j++ )
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	9905      	ldr	r1, [sp, #20]
 8006ca4:	9a01      	ldr	r2, [sp, #4]
 8006ca6:	440b      	add	r3, r1
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006cae:	3201      	adds	r2, #1
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	9201      	str	r2, [sp, #4]
 8006cb4:	d8d6      	bhi.n	8006c64 <_UG_PutChar+0x1dc>
 8006cb6:	e7a3      	b.n	8006c00 <_UG_PutChar+0x178>
      case 0xFC: bt = 0x81; break; // �
 8006cb8:	2481      	movs	r4, #129	; 0x81
 8006cba:	e727      	b.n	8006b0c <_UG_PutChar+0x84>
      case 0xDC: bt = 0x9A; break; // �
 8006cbc:	249a      	movs	r4, #154	; 0x9a
 8006cbe:	e725      	b.n	8006b0c <_UG_PutChar+0x84>
      case 0xE4: bt = 0x84; break; // �
 8006cc0:	2484      	movs	r4, #132	; 0x84
 8006cc2:	e723      	b.n	8006b0c <_UG_PutChar+0x84>
 8006cc4:	9203      	str	r2, [sp, #12]
 8006cc6:	e73b      	b.n	8006b40 <_UG_PutChar+0xb8>
	  else if (font->font_type == FONT_TYPE_8BPP)
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d199      	bne.n	8006c00 <_UG_PutChar+0x178>
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8006ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cd0:	e9d3 1303 	ldrd	r1, r3, [r3, #12]
 8006cd4:	6892      	ldr	r2, [r2, #8]
 8006cd6:	1ae3      	subs	r3, r4, r3
 8006cd8:	fb01 f202 	mul.w	r2, r1, r2
 8006cdc:	fb02 f903 	mul.w	r9, r2, r3
		   for( j=0;j<font->char_height;j++ )
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d08d      	beq.n	8006c00 <_UG_PutChar+0x178>
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d08a      	beq.n	8006c00 <_UG_PutChar+0x178>
 8006cea:	2300      	movs	r3, #0
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	f407 037f 	and.w	r3, r7, #16711680	; 0xff0000
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	f40a 037f 	and.w	r3, sl, #16711680	; 0xff0000
 8006cf8:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8006cfc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8006d00:	fa5f f887 	uxtb.w	r8, r7
 8006d04:	fa5f f68a 	uxtb.w	r6, sl
 8006d08:	f407 447f 	and.w	r4, r7, #65280	; 0xff00
 8006d0c:	f40a 4b7f 	and.w	fp, sl, #65280	; 0xff00
			  for( i=0;i<actual_char_width;i++ )
 8006d10:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006d14:	469a      	mov	sl, r3
 8006d16:	18d7      	adds	r7, r2, r3
 8006d18:	4623      	mov	r3, r4
 8006d1a:	4654      	mov	r4, sl
 8006d1c:	46ca      	mov	sl, r9
 8006d1e:	4699      	mov	r9, r3
				 b = font->p[index++];
 8006d20:	f8da 0000 	ldr.w	r0, [sl]
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006d24:	9a01      	ldr	r2, [sp, #4]
 8006d26:	4623      	mov	r3, r4
				 b = font->p[index++];
 8006d28:	3401      	adds	r4, #1
 8006d2a:	f810 e003 	ldrb.w	lr, [r0, r3]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006d2e:	f5ce 7380 	rsb	r3, lr, #256	; 0x100
				         ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 8006d32:	fb0b f003 	mul.w	r0, fp, r3
 8006d36:	fb09 000e 	mla	r0, r9, lr, r0
 8006d3a:	0a00      	lsrs	r0, r0, #8
 8006d3c:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006d40:	fb06 f003 	mul.w	r0, r6, r3
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
 8006d48:	9a00      	ldr	r2, [sp, #0]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006d4a:	fb08 000e 	mla	r0, r8, lr, r0
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006d4e:	fb02 330e 	mla	r3, r2, lr, r3
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006d52:	f3c0 2007 	ubfx	r0, r0, #8, #8
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006d56:	0a1b      	lsrs	r3, r3, #8
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006d58:	ea40 000c 	orr.w	r0, r0, ip
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				 push_pixel(color);
 8006d60:	4318      	orrs	r0, r3
 8006d62:	47a8      	blx	r5
			  for( i=0;i<actual_char_width;i++ )
 8006d64:	42bc      	cmp	r4, r7
 8006d66:	d1db      	bne.n	8006d20 <_UG_PutChar+0x298>
			  index += font->char_width - actual_char_width;
 8006d68:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006d6c:	9902      	ldr	r1, [sp, #8]
		   for( j=0;j<font->char_height;j++ )
 8006d6e:	9a04      	ldr	r2, [sp, #16]
			  index += font->char_width - actual_char_width;
 8006d70:	4419      	add	r1, r3
		   for( j=0;j<font->char_height;j++ )
 8006d72:	f8da 300c 	ldr.w	r3, [sl, #12]
			  index += font->char_width - actual_char_width;
 8006d76:	9102      	str	r1, [sp, #8]
		   for( j=0;j<font->char_height;j++ )
 8006d78:	3201      	adds	r2, #1
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	464c      	mov	r4, r9
 8006d7e:	9204      	str	r2, [sp, #16]
 8006d80:	46d1      	mov	r9, sl
 8006d82:	d8c5      	bhi.n	8006d10 <_UG_PutChar+0x288>
 8006d84:	e73c      	b.n	8006c00 <_UG_PutChar+0x178>
      else if (font->font_type == FONT_TYPE_8BPP)
 8006d86:	2801      	cmp	r0, #1
 8006d88:	f47f af3a 	bne.w	8006c00 <_UG_PutChar+0x178>
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8006d8c:	1ae4      	subs	r4, r4, r3
 8006d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	fb03 f202 	mul.w	r2, r3, r2
 8006d96:	fb04 f202 	mul.w	r2, r4, r2
 8006d9a:	9207      	str	r2, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f43f af2f 	beq.w	8006c00 <_UG_PutChar+0x178>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f43f af2b 	beq.w	8006c00 <_UG_PutChar+0x178>
 8006daa:	9b02      	ldr	r3, [sp, #8]
 8006dac:	9108      	str	r1, [sp, #32]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	9309      	str	r3, [sp, #36]	; 0x24
 8006db2:	f407 037f 	and.w	r3, r7, #16711680	; 0xff0000
 8006db6:	fa5f f887 	uxtb.w	r8, r7
 8006dba:	fa5f f68a 	uxtb.w	r6, sl
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	f40a 4b7f 	and.w	fp, sl, #65280	; 0xff00
 8006dc4:	f40a 037f 	and.w	r3, sl, #16711680	; 0xff0000
 8006dc8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	f407 447f 	and.w	r4, r7, #65280	; 0xff00
 8006dd2:	f8cd 8014 	str.w	r8, [sp, #20]
            for( i=0;i<actual_char_width;i++ )
 8006dd6:	9b06      	ldr	r3, [sp, #24]
 8006dd8:	9a08      	ldr	r2, [sp, #32]
 8006dda:	1899      	adds	r1, r3, r2
 8006ddc:	9b07      	ldr	r3, [sp, #28]
 8006dde:	9a03      	ldr	r2, [sp, #12]
 8006de0:	eb02 0803 	add.w	r8, r2, r3
               gui->pset(xo,yo,color);
 8006de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de6:	1ad7      	subs	r7, r2, r3
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006de8:	461d      	mov	r5, r3
               gui->pset(xo,yo,color);
 8006dea:	9704      	str	r7, [sp, #16]
               b = font->p[index++];
 8006dec:	f8da 2000 	ldr.w	r2, [sl]
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006df0:	9f01      	ldr	r7, [sp, #4]
               gui->pset(xo,yo,color);
 8006df2:	9102      	str	r1, [sp, #8]
 8006df4:	462b      	mov	r3, r5
               b = font->p[index++];
 8006df6:	3501      	adds	r5, #1
 8006df8:	f812 e003 	ldrb.w	lr, [r2, r3]
               gui->pset(xo,yo,color);
 8006dfc:	f8d9 3000 	ldr.w	r3, [r9]
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006e00:	f5ce 7280 	rsb	r2, lr, #256	; 0x100
                       ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 8006e04:	fb0b f002 	mul.w	r0, fp, r2
 8006e08:	fb04 000e 	mla	r0, r4, lr, r0
 8006e0c:	0a00      	lsrs	r0, r0, #8
 8006e0e:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006e12:	fb06 f002 	mul.w	r0, r6, r2
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006e16:	fb07 f202 	mul.w	r2, r7, r2
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006e1a:	9f05      	ldr	r7, [sp, #20]
               gui->pset(xo,yo,color);
 8006e1c:	681b      	ldr	r3, [r3, #0]
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006e1e:	fb07 000e 	mla	r0, r7, lr, r0
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006e22:	9f00      	ldr	r7, [sp, #0]
 8006e24:	fb07 220e 	mla	r2, r7, lr, r2
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006e28:	f3c0 2007 	ubfx	r0, r0, #8, #8
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006e2c:	0a12      	lsrs	r2, r2, #8
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006e2e:	ea40 000c 	orr.w	r0, r0, ip
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006e32:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
               gui->pset(xo,yo,color);
 8006e36:	4302      	orrs	r2, r0
 8006e38:	9804      	ldr	r0, [sp, #16]
 8006e3a:	4428      	add	r0, r5
 8006e3c:	4798      	blx	r3
            for( i=0;i<actual_char_width;i++ )
 8006e3e:	4545      	cmp	r5, r8
 8006e40:	9902      	ldr	r1, [sp, #8]
 8006e42:	d1d3      	bne.n	8006dec <_UG_PutChar+0x364>
            index += font->char_width - actual_char_width;
 8006e44:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006e48:	9907      	ldr	r1, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 8006e4a:	9a08      	ldr	r2, [sp, #32]
            index += font->char_width - actual_char_width;
 8006e4c:	4419      	add	r1, r3
         for( j=0;j<font->char_height;j++ )
 8006e4e:	f8da 300c 	ldr.w	r3, [sl, #12]
            index += font->char_width - actual_char_width;
 8006e52:	9107      	str	r1, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 8006e54:	3201      	adds	r2, #1
 8006e56:	4293      	cmp	r3, r2
 8006e58:	9208      	str	r2, [sp, #32]
 8006e5a:	d8bc      	bhi.n	8006dd6 <_UG_PutChar+0x34e>
 8006e5c:	e6d0      	b.n	8006c00 <_UG_PutChar+0x178>
   switch ( bt )
 8006e5e:	2494      	movs	r4, #148	; 0x94
 8006e60:	e654      	b.n	8006b0c <_UG_PutChar+0x84>
 8006e62:	2499      	movs	r4, #153	; 0x99
 8006e64:	e652      	b.n	8006b0c <_UG_PutChar+0x84>
 8006e66:	bf00      	nop
 8006e68:	2001cbc0 	.word	0x2001cbc0

08006e6c <UG_PutChar>:
{
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	9c04      	ldr	r4, [sp, #16]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8006e72:	9400      	str	r4, [sp, #0]
 8006e74:	4c03      	ldr	r4, [pc, #12]	; (8006e84 <UG_PutChar+0x18>)
 8006e76:	6824      	ldr	r4, [r4, #0]
 8006e78:	3444      	adds	r4, #68	; 0x44
 8006e7a:	9401      	str	r4, [sp, #4]
 8006e7c:	f7ff fe04 	bl	8006a88 <_UG_PutChar>
}
 8006e80:	b002      	add	sp, #8
 8006e82:	bd10      	pop	{r4, pc}
 8006e84:	2001cbc0 	.word	0x2001cbc0

08006e88 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006e88:	2802      	cmp	r0, #2
 8006e8a:	d807      	bhi.n	8006e9c <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <UG_DriverRegister+0x18>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006e94:	2203      	movs	r2, #3
   gui->driver[type].driver = driver;
 8006e96:	6741      	str	r1, [r0, #116]	; 0x74
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006e98:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
}
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2001cbc0 	.word	0x2001cbc0

08006ea4 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006ea4:	2802      	cmp	r0, #2
 8006ea6:	d80b      	bhi.n	8006ec0 <UG_DriverEnable+0x1c>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <UG_DriverEnable+0x20>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006eb0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8006eb4:	07da      	lsls	r2, r3, #31
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 8006eb6:	bf44      	itt	mi
 8006eb8:	f043 0302 	orrmi.w	r3, r3, #2
 8006ebc:	f880 3078 	strbmi.w	r3, [r0, #120]	; 0x78
   }
}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	2001cbc0 	.word	0x2001cbc0

08006ec8 <__errno>:
 8006ec8:	4b01      	ldr	r3, [pc, #4]	; (8006ed0 <__errno+0x8>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000080 	.word	0x20000080

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4d0d      	ldr	r5, [pc, #52]	; (8006f0c <__libc_init_array+0x38>)
 8006ed8:	4c0d      	ldr	r4, [pc, #52]	; (8006f10 <__libc_init_array+0x3c>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	4d0b      	ldr	r5, [pc, #44]	; (8006f14 <__libc_init_array+0x40>)
 8006ee6:	4c0c      	ldr	r4, [pc, #48]	; (8006f18 <__libc_init_array+0x44>)
 8006ee8:	f001 fce6 	bl	80088b8 <_init>
 8006eec:	1b64      	subs	r4, r4, r5
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	08018988 	.word	0x08018988
 8006f10:	08018988 	.word	0x08018988
 8006f14:	08018988 	.word	0x08018988
 8006f18:	0801898c 	.word	0x0801898c

08006f1c <memset>:
 8006f1c:	4402      	add	r2, r0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d100      	bne.n	8006f26 <memset+0xa>
 8006f24:	4770      	bx	lr
 8006f26:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2a:	e7f9      	b.n	8006f20 <memset+0x4>

08006f2c <ldexp>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	ed2d 8b02 	vpush	{d8}
 8006f32:	eeb0 8a40 	vmov.f32	s16, s0
 8006f36:	eef0 8a60 	vmov.f32	s17, s1
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	f000 fcae 	bl	800789c <finite>
 8006f40:	b1f8      	cbz	r0, 8006f82 <ldexp+0x56>
 8006f42:	ec51 0b18 	vmov	r0, r1, d8
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f7f9 fd89 	bl	8000a60 <__aeabi_dcmpeq>
 8006f4e:	b9c0      	cbnz	r0, 8006f82 <ldexp+0x56>
 8006f50:	eeb0 0a48 	vmov.f32	s0, s16
 8006f54:	eef0 0a68 	vmov.f32	s1, s17
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 f819 	bl	8006f90 <scalbn>
 8006f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8006f62:	eef0 8a60 	vmov.f32	s17, s1
 8006f66:	f000 fc99 	bl	800789c <finite>
 8006f6a:	b130      	cbz	r0, 8006f7a <ldexp+0x4e>
 8006f6c:	ec51 0b18 	vmov	r0, r1, d8
 8006f70:	2200      	movs	r2, #0
 8006f72:	2300      	movs	r3, #0
 8006f74:	f7f9 fd74 	bl	8000a60 <__aeabi_dcmpeq>
 8006f78:	b118      	cbz	r0, 8006f82 <ldexp+0x56>
 8006f7a:	f7ff ffa5 	bl	8006ec8 <__errno>
 8006f7e:	2322      	movs	r3, #34	; 0x22
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	eeb0 0a48 	vmov.f32	s0, s16
 8006f86:	eef0 0a68 	vmov.f32	s1, s17
 8006f8a:	ecbd 8b02 	vpop	{d8}
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <scalbn>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	ec55 4b10 	vmov	r4, r5, d0
 8006f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	b99a      	cbnz	r2, 8006fc8 <scalbn+0x38>
 8006fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006fa4:	4323      	orrs	r3, r4
 8006fa6:	d036      	beq.n	8007016 <scalbn+0x86>
 8006fa8:	4b39      	ldr	r3, [pc, #228]	; (8007090 <scalbn+0x100>)
 8006faa:	4629      	mov	r1, r5
 8006fac:	ee10 0a10 	vmov	r0, s0
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f7f9 faed 	bl	8000590 <__aeabi_dmul>
 8006fb6:	4b37      	ldr	r3, [pc, #220]	; (8007094 <scalbn+0x104>)
 8006fb8:	429e      	cmp	r6, r3
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	da10      	bge.n	8006fe2 <scalbn+0x52>
 8006fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8007070 <scalbn+0xe0>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	e03a      	b.n	800703e <scalbn+0xae>
 8006fc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006fcc:	428a      	cmp	r2, r1
 8006fce:	d10c      	bne.n	8006fea <scalbn+0x5a>
 8006fd0:	ee10 2a10 	vmov	r2, s0
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 f924 	bl	8000224 <__adddf3>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	460d      	mov	r5, r1
 8006fe0:	e019      	b.n	8007016 <scalbn+0x86>
 8006fe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	3a36      	subs	r2, #54	; 0x36
 8006fea:	4432      	add	r2, r6
 8006fec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ff0:	428a      	cmp	r2, r1
 8006ff2:	dd08      	ble.n	8007006 <scalbn+0x76>
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	a120      	add	r1, pc, #128	; (adr r1, 8007078 <scalbn+0xe8>)
 8006ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ffc:	da1c      	bge.n	8007038 <scalbn+0xa8>
 8006ffe:	a120      	add	r1, pc, #128	; (adr r1, 8007080 <scalbn+0xf0>)
 8007000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007004:	e018      	b.n	8007038 <scalbn+0xa8>
 8007006:	2a00      	cmp	r2, #0
 8007008:	dd08      	ble.n	800701c <scalbn+0x8c>
 800700a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800700e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007016:	ec45 4b10 	vmov	d0, r4, r5
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007020:	da19      	bge.n	8007056 <scalbn+0xc6>
 8007022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007026:	429e      	cmp	r6, r3
 8007028:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800702c:	dd0a      	ble.n	8007044 <scalbn+0xb4>
 800702e:	a112      	add	r1, pc, #72	; (adr r1, 8007078 <scalbn+0xe8>)
 8007030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e2      	bne.n	8006ffe <scalbn+0x6e>
 8007038:	a30f      	add	r3, pc, #60	; (adr r3, 8007078 <scalbn+0xe8>)
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	f7f9 faa7 	bl	8000590 <__aeabi_dmul>
 8007042:	e7cb      	b.n	8006fdc <scalbn+0x4c>
 8007044:	a10a      	add	r1, pc, #40	; (adr r1, 8007070 <scalbn+0xe0>)
 8007046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0b8      	beq.n	8006fc0 <scalbn+0x30>
 800704e:	a10e      	add	r1, pc, #56	; (adr r1, 8007088 <scalbn+0xf8>)
 8007050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007054:	e7b4      	b.n	8006fc0 <scalbn+0x30>
 8007056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800705a:	3236      	adds	r2, #54	; 0x36
 800705c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007060:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007064:	4620      	mov	r0, r4
 8007066:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <scalbn+0x108>)
 8007068:	2200      	movs	r2, #0
 800706a:	e7e8      	b.n	800703e <scalbn+0xae>
 800706c:	f3af 8000 	nop.w
 8007070:	c2f8f359 	.word	0xc2f8f359
 8007074:	01a56e1f 	.word	0x01a56e1f
 8007078:	8800759c 	.word	0x8800759c
 800707c:	7e37e43c 	.word	0x7e37e43c
 8007080:	8800759c 	.word	0x8800759c
 8007084:	fe37e43c 	.word	0xfe37e43c
 8007088:	c2f8f359 	.word	0xc2f8f359
 800708c:	81a56e1f 	.word	0x81a56e1f
 8007090:	43500000 	.word	0x43500000
 8007094:	ffff3cb0 	.word	0xffff3cb0
 8007098:	3c900000 	.word	0x3c900000

0800709c <setvbuf>:
 800709c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	461d      	mov	r5, r3
 80070a2:	4b5d      	ldr	r3, [pc, #372]	; (8007218 <setvbuf+0x17c>)
 80070a4:	681f      	ldr	r7, [r3, #0]
 80070a6:	4604      	mov	r4, r0
 80070a8:	460e      	mov	r6, r1
 80070aa:	4690      	mov	r8, r2
 80070ac:	b127      	cbz	r7, 80070b8 <setvbuf+0x1c>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	b913      	cbnz	r3, 80070b8 <setvbuf+0x1c>
 80070b2:	4638      	mov	r0, r7
 80070b4:	f000 fa44 	bl	8007540 <__sinit>
 80070b8:	4b58      	ldr	r3, [pc, #352]	; (800721c <setvbuf+0x180>)
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d167      	bne.n	800718e <setvbuf+0xf2>
 80070be:	687c      	ldr	r4, [r7, #4]
 80070c0:	f1b8 0f02 	cmp.w	r8, #2
 80070c4:	d006      	beq.n	80070d4 <setvbuf+0x38>
 80070c6:	f1b8 0f01 	cmp.w	r8, #1
 80070ca:	f200 809f 	bhi.w	800720c <setvbuf+0x170>
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	f2c0 809c 	blt.w	800720c <setvbuf+0x170>
 80070d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070d6:	07db      	lsls	r3, r3, #31
 80070d8:	d405      	bmi.n	80070e6 <setvbuf+0x4a>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	0598      	lsls	r0, r3, #22
 80070de:	d402      	bmi.n	80070e6 <setvbuf+0x4a>
 80070e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070e2:	f000 facb 	bl	800767c <__retarget_lock_acquire_recursive>
 80070e6:	4621      	mov	r1, r4
 80070e8:	4638      	mov	r0, r7
 80070ea:	f000 f995 	bl	8007418 <_fflush_r>
 80070ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070f0:	b141      	cbz	r1, 8007104 <setvbuf+0x68>
 80070f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f6:	4299      	cmp	r1, r3
 80070f8:	d002      	beq.n	8007100 <setvbuf+0x64>
 80070fa:	4638      	mov	r0, r7
 80070fc:	f000 faee 	bl	80076dc <_free_r>
 8007100:	2300      	movs	r3, #0
 8007102:	6363      	str	r3, [r4, #52]	; 0x34
 8007104:	2300      	movs	r3, #0
 8007106:	61a3      	str	r3, [r4, #24]
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	0619      	lsls	r1, r3, #24
 800710e:	d503      	bpl.n	8007118 <setvbuf+0x7c>
 8007110:	6921      	ldr	r1, [r4, #16]
 8007112:	4638      	mov	r0, r7
 8007114:	f000 fae2 	bl	80076dc <_free_r>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	f1b8 0f02 	cmp.w	r8, #2
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	d06c      	beq.n	8007204 <setvbuf+0x168>
 800712a:	ab01      	add	r3, sp, #4
 800712c:	466a      	mov	r2, sp
 800712e:	4621      	mov	r1, r4
 8007130:	4638      	mov	r0, r7
 8007132:	f000 faa5 	bl	8007680 <__swhatbuf_r>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	4318      	orrs	r0, r3
 800713a:	81a0      	strh	r0, [r4, #12]
 800713c:	2d00      	cmp	r5, #0
 800713e:	d130      	bne.n	80071a2 <setvbuf+0x106>
 8007140:	9d00      	ldr	r5, [sp, #0]
 8007142:	4628      	mov	r0, r5
 8007144:	f000 fac2 	bl	80076cc <malloc>
 8007148:	4606      	mov	r6, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	d155      	bne.n	80071fa <setvbuf+0x15e>
 800714e:	f8dd 9000 	ldr.w	r9, [sp]
 8007152:	45a9      	cmp	r9, r5
 8007154:	d14a      	bne.n	80071ec <setvbuf+0x150>
 8007156:	f04f 35ff 	mov.w	r5, #4294967295
 800715a:	2200      	movs	r2, #0
 800715c:	60a2      	str	r2, [r4, #8]
 800715e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007162:	6022      	str	r2, [r4, #0]
 8007164:	6122      	str	r2, [r4, #16]
 8007166:	2201      	movs	r2, #1
 8007168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716c:	6162      	str	r2, [r4, #20]
 800716e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	07d2      	lsls	r2, r2, #31
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	d405      	bmi.n	8007186 <setvbuf+0xea>
 800717a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800717e:	d102      	bne.n	8007186 <setvbuf+0xea>
 8007180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007182:	f000 fa7c 	bl	800767e <__retarget_lock_release_recursive>
 8007186:	4628      	mov	r0, r5
 8007188:	b003      	add	sp, #12
 800718a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <setvbuf+0x184>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d101      	bne.n	8007198 <setvbuf+0xfc>
 8007194:	68bc      	ldr	r4, [r7, #8]
 8007196:	e793      	b.n	80070c0 <setvbuf+0x24>
 8007198:	4b22      	ldr	r3, [pc, #136]	; (8007224 <setvbuf+0x188>)
 800719a:	429c      	cmp	r4, r3
 800719c:	bf08      	it	eq
 800719e:	68fc      	ldreq	r4, [r7, #12]
 80071a0:	e78e      	b.n	80070c0 <setvbuf+0x24>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	d0cd      	beq.n	8007142 <setvbuf+0xa6>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	b913      	cbnz	r3, 80071b0 <setvbuf+0x114>
 80071aa:	4638      	mov	r0, r7
 80071ac:	f000 f9c8 	bl	8007540 <__sinit>
 80071b0:	f1b8 0f01 	cmp.w	r8, #1
 80071b4:	bf08      	it	eq
 80071b6:	89a3      	ldrheq	r3, [r4, #12]
 80071b8:	6026      	str	r6, [r4, #0]
 80071ba:	bf04      	itt	eq
 80071bc:	f043 0301 	orreq.w	r3, r3, #1
 80071c0:	81a3      	strheq	r3, [r4, #12]
 80071c2:	89a2      	ldrh	r2, [r4, #12]
 80071c4:	f012 0308 	ands.w	r3, r2, #8
 80071c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80071cc:	d01c      	beq.n	8007208 <setvbuf+0x16c>
 80071ce:	07d3      	lsls	r3, r2, #31
 80071d0:	bf41      	itttt	mi
 80071d2:	2300      	movmi	r3, #0
 80071d4:	426d      	negmi	r5, r5
 80071d6:	60a3      	strmi	r3, [r4, #8]
 80071d8:	61a5      	strmi	r5, [r4, #24]
 80071da:	bf58      	it	pl
 80071dc:	60a5      	strpl	r5, [r4, #8]
 80071de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80071e0:	f015 0501 	ands.w	r5, r5, #1
 80071e4:	d115      	bne.n	8007212 <setvbuf+0x176>
 80071e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80071ea:	e7c8      	b.n	800717e <setvbuf+0xe2>
 80071ec:	4648      	mov	r0, r9
 80071ee:	f000 fa6d 	bl	80076cc <malloc>
 80071f2:	4606      	mov	r6, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0ae      	beq.n	8007156 <setvbuf+0xba>
 80071f8:	464d      	mov	r5, r9
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	e7d0      	b.n	80071a6 <setvbuf+0x10a>
 8007204:	2500      	movs	r5, #0
 8007206:	e7a8      	b.n	800715a <setvbuf+0xbe>
 8007208:	60a3      	str	r3, [r4, #8]
 800720a:	e7e8      	b.n	80071de <setvbuf+0x142>
 800720c:	f04f 35ff 	mov.w	r5, #4294967295
 8007210:	e7b9      	b.n	8007186 <setvbuf+0xea>
 8007212:	2500      	movs	r5, #0
 8007214:	e7b7      	b.n	8007186 <setvbuf+0xea>
 8007216:	bf00      	nop
 8007218:	20000080 	.word	0x20000080
 800721c:	08018568 	.word	0x08018568
 8007220:	08018588 	.word	0x08018588
 8007224:	08018548 	.word	0x08018548

08007228 <scalbnf>:
 8007228:	ee10 3a10 	vmov	r3, s0
 800722c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007230:	d025      	beq.n	800727e <scalbnf+0x56>
 8007232:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007236:	d302      	bcc.n	800723e <scalbnf+0x16>
 8007238:	ee30 0a00 	vadd.f32	s0, s0, s0
 800723c:	4770      	bx	lr
 800723e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007242:	d122      	bne.n	800728a <scalbnf+0x62>
 8007244:	4b2a      	ldr	r3, [pc, #168]	; (80072f0 <scalbnf+0xc8>)
 8007246:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80072f4 <scalbnf+0xcc>
 800724a:	4298      	cmp	r0, r3
 800724c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007250:	db16      	blt.n	8007280 <scalbnf+0x58>
 8007252:	ee10 3a10 	vmov	r3, s0
 8007256:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800725a:	3a19      	subs	r2, #25
 800725c:	4402      	add	r2, r0
 800725e:	2afe      	cmp	r2, #254	; 0xfe
 8007260:	dd15      	ble.n	800728e <scalbnf+0x66>
 8007262:	ee10 3a10 	vmov	r3, s0
 8007266:	eddf 7a24 	vldr	s15, [pc, #144]	; 80072f8 <scalbnf+0xd0>
 800726a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80072fc <scalbnf+0xd4>
 800726e:	2b00      	cmp	r3, #0
 8007270:	eeb0 7a67 	vmov.f32	s14, s15
 8007274:	bfb8      	it	lt
 8007276:	eef0 7a66 	vmovlt.f32	s15, s13
 800727a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800727e:	4770      	bx	lr
 8007280:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007300 <scalbnf+0xd8>
 8007284:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007288:	4770      	bx	lr
 800728a:	0dd2      	lsrs	r2, r2, #23
 800728c:	e7e6      	b.n	800725c <scalbnf+0x34>
 800728e:	2a00      	cmp	r2, #0
 8007290:	dd06      	ble.n	80072a0 <scalbnf+0x78>
 8007292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007296:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800729a:	ee00 3a10 	vmov	s0, r3
 800729e:	4770      	bx	lr
 80072a0:	f112 0f16 	cmn.w	r2, #22
 80072a4:	da1a      	bge.n	80072dc <scalbnf+0xb4>
 80072a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80072aa:	4298      	cmp	r0, r3
 80072ac:	ee10 3a10 	vmov	r3, s0
 80072b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b4:	dd0a      	ble.n	80072cc <scalbnf+0xa4>
 80072b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80072f8 <scalbnf+0xd0>
 80072ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80072fc <scalbnf+0xd4>
 80072be:	eef0 7a40 	vmov.f32	s15, s0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bf18      	it	ne
 80072c6:	eeb0 0a47 	vmovne.f32	s0, s14
 80072ca:	e7db      	b.n	8007284 <scalbnf+0x5c>
 80072cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007300 <scalbnf+0xd8>
 80072d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007304 <scalbnf+0xdc>
 80072d4:	eef0 7a40 	vmov.f32	s15, s0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	e7f3      	b.n	80072c4 <scalbnf+0x9c>
 80072dc:	3219      	adds	r2, #25
 80072de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80072e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007308 <scalbnf+0xe0>
 80072ea:	ee07 3a10 	vmov	s14, r3
 80072ee:	e7c4      	b.n	800727a <scalbnf+0x52>
 80072f0:	ffff3cb0 	.word	0xffff3cb0
 80072f4:	4c000000 	.word	0x4c000000
 80072f8:	7149f2ca 	.word	0x7149f2ca
 80072fc:	f149f2ca 	.word	0xf149f2ca
 8007300:	0da24260 	.word	0x0da24260
 8007304:	8da24260 	.word	0x8da24260
 8007308:	33000000 	.word	0x33000000

0800730c <__sflush_r>:
 800730c:	898a      	ldrh	r2, [r1, #12]
 800730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007312:	4605      	mov	r5, r0
 8007314:	0710      	lsls	r0, r2, #28
 8007316:	460c      	mov	r4, r1
 8007318:	d458      	bmi.n	80073cc <__sflush_r+0xc0>
 800731a:	684b      	ldr	r3, [r1, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	dc05      	bgt.n	800732c <__sflush_r+0x20>
 8007320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	dc02      	bgt.n	800732c <__sflush_r+0x20>
 8007326:	2000      	movs	r0, #0
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800732e:	2e00      	cmp	r6, #0
 8007330:	d0f9      	beq.n	8007326 <__sflush_r+0x1a>
 8007332:	2300      	movs	r3, #0
 8007334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007338:	682f      	ldr	r7, [r5, #0]
 800733a:	602b      	str	r3, [r5, #0]
 800733c:	d032      	beq.n	80073a4 <__sflush_r+0x98>
 800733e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	075a      	lsls	r2, r3, #29
 8007344:	d505      	bpl.n	8007352 <__sflush_r+0x46>
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	1ac0      	subs	r0, r0, r3
 800734a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800734c:	b10b      	cbz	r3, 8007352 <__sflush_r+0x46>
 800734e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007350:	1ac0      	subs	r0, r0, r3
 8007352:	2300      	movs	r3, #0
 8007354:	4602      	mov	r2, r0
 8007356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007358:	6a21      	ldr	r1, [r4, #32]
 800735a:	4628      	mov	r0, r5
 800735c:	47b0      	blx	r6
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	d106      	bne.n	8007372 <__sflush_r+0x66>
 8007364:	6829      	ldr	r1, [r5, #0]
 8007366:	291d      	cmp	r1, #29
 8007368:	d82c      	bhi.n	80073c4 <__sflush_r+0xb8>
 800736a:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <__sflush_r+0x108>)
 800736c:	40ca      	lsrs	r2, r1
 800736e:	07d6      	lsls	r6, r2, #31
 8007370:	d528      	bpl.n	80073c4 <__sflush_r+0xb8>
 8007372:	2200      	movs	r2, #0
 8007374:	6062      	str	r2, [r4, #4]
 8007376:	04d9      	lsls	r1, r3, #19
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	6022      	str	r2, [r4, #0]
 800737c:	d504      	bpl.n	8007388 <__sflush_r+0x7c>
 800737e:	1c42      	adds	r2, r0, #1
 8007380:	d101      	bne.n	8007386 <__sflush_r+0x7a>
 8007382:	682b      	ldr	r3, [r5, #0]
 8007384:	b903      	cbnz	r3, 8007388 <__sflush_r+0x7c>
 8007386:	6560      	str	r0, [r4, #84]	; 0x54
 8007388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738a:	602f      	str	r7, [r5, #0]
 800738c:	2900      	cmp	r1, #0
 800738e:	d0ca      	beq.n	8007326 <__sflush_r+0x1a>
 8007390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <__sflush_r+0x92>
 8007398:	4628      	mov	r0, r5
 800739a:	f000 f99f 	bl	80076dc <_free_r>
 800739e:	2000      	movs	r0, #0
 80073a0:	6360      	str	r0, [r4, #52]	; 0x34
 80073a2:	e7c1      	b.n	8007328 <__sflush_r+0x1c>
 80073a4:	6a21      	ldr	r1, [r4, #32]
 80073a6:	2301      	movs	r3, #1
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b0      	blx	r6
 80073ac:	1c41      	adds	r1, r0, #1
 80073ae:	d1c7      	bne.n	8007340 <__sflush_r+0x34>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c4      	beq.n	8007340 <__sflush_r+0x34>
 80073b6:	2b1d      	cmp	r3, #29
 80073b8:	d001      	beq.n	80073be <__sflush_r+0xb2>
 80073ba:	2b16      	cmp	r3, #22
 80073bc:	d101      	bne.n	80073c2 <__sflush_r+0xb6>
 80073be:	602f      	str	r7, [r5, #0]
 80073c0:	e7b1      	b.n	8007326 <__sflush_r+0x1a>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	e7ad      	b.n	8007328 <__sflush_r+0x1c>
 80073cc:	690f      	ldr	r7, [r1, #16]
 80073ce:	2f00      	cmp	r7, #0
 80073d0:	d0a9      	beq.n	8007326 <__sflush_r+0x1a>
 80073d2:	0793      	lsls	r3, r2, #30
 80073d4:	680e      	ldr	r6, [r1, #0]
 80073d6:	bf08      	it	eq
 80073d8:	694b      	ldreq	r3, [r1, #20]
 80073da:	600f      	str	r7, [r1, #0]
 80073dc:	bf18      	it	ne
 80073de:	2300      	movne	r3, #0
 80073e0:	eba6 0807 	sub.w	r8, r6, r7
 80073e4:	608b      	str	r3, [r1, #8]
 80073e6:	f1b8 0f00 	cmp.w	r8, #0
 80073ea:	dd9c      	ble.n	8007326 <__sflush_r+0x1a>
 80073ec:	6a21      	ldr	r1, [r4, #32]
 80073ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073f0:	4643      	mov	r3, r8
 80073f2:	463a      	mov	r2, r7
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b0      	blx	r6
 80073f8:	2800      	cmp	r0, #0
 80073fa:	dc06      	bgt.n	800740a <__sflush_r+0xfe>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	e78e      	b.n	8007328 <__sflush_r+0x1c>
 800740a:	4407      	add	r7, r0
 800740c:	eba8 0800 	sub.w	r8, r8, r0
 8007410:	e7e9      	b.n	80073e6 <__sflush_r+0xda>
 8007412:	bf00      	nop
 8007414:	20400001 	.word	0x20400001

08007418 <_fflush_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	690b      	ldr	r3, [r1, #16]
 800741c:	4605      	mov	r5, r0
 800741e:	460c      	mov	r4, r1
 8007420:	b913      	cbnz	r3, 8007428 <_fflush_r+0x10>
 8007422:	2500      	movs	r5, #0
 8007424:	4628      	mov	r0, r5
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	b118      	cbz	r0, 8007432 <_fflush_r+0x1a>
 800742a:	6983      	ldr	r3, [r0, #24]
 800742c:	b90b      	cbnz	r3, 8007432 <_fflush_r+0x1a>
 800742e:	f000 f887 	bl	8007540 <__sinit>
 8007432:	4b14      	ldr	r3, [pc, #80]	; (8007484 <_fflush_r+0x6c>)
 8007434:	429c      	cmp	r4, r3
 8007436:	d11b      	bne.n	8007470 <_fflush_r+0x58>
 8007438:	686c      	ldr	r4, [r5, #4]
 800743a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0ef      	beq.n	8007422 <_fflush_r+0xa>
 8007442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007444:	07d0      	lsls	r0, r2, #31
 8007446:	d404      	bmi.n	8007452 <_fflush_r+0x3a>
 8007448:	0599      	lsls	r1, r3, #22
 800744a:	d402      	bmi.n	8007452 <_fflush_r+0x3a>
 800744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744e:	f000 f915 	bl	800767c <__retarget_lock_acquire_recursive>
 8007452:	4628      	mov	r0, r5
 8007454:	4621      	mov	r1, r4
 8007456:	f7ff ff59 	bl	800730c <__sflush_r>
 800745a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800745c:	07da      	lsls	r2, r3, #31
 800745e:	4605      	mov	r5, r0
 8007460:	d4e0      	bmi.n	8007424 <_fflush_r+0xc>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	059b      	lsls	r3, r3, #22
 8007466:	d4dd      	bmi.n	8007424 <_fflush_r+0xc>
 8007468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800746a:	f000 f908 	bl	800767e <__retarget_lock_release_recursive>
 800746e:	e7d9      	b.n	8007424 <_fflush_r+0xc>
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <_fflush_r+0x70>)
 8007472:	429c      	cmp	r4, r3
 8007474:	d101      	bne.n	800747a <_fflush_r+0x62>
 8007476:	68ac      	ldr	r4, [r5, #8]
 8007478:	e7df      	b.n	800743a <_fflush_r+0x22>
 800747a:	4b04      	ldr	r3, [pc, #16]	; (800748c <_fflush_r+0x74>)
 800747c:	429c      	cmp	r4, r3
 800747e:	bf08      	it	eq
 8007480:	68ec      	ldreq	r4, [r5, #12]
 8007482:	e7da      	b.n	800743a <_fflush_r+0x22>
 8007484:	08018568 	.word	0x08018568
 8007488:	08018588 	.word	0x08018588
 800748c:	08018548 	.word	0x08018548

08007490 <std>:
 8007490:	2300      	movs	r3, #0
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	e9c0 3300 	strd	r3, r3, [r0]
 800749a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800749e:	6083      	str	r3, [r0, #8]
 80074a0:	8181      	strh	r1, [r0, #12]
 80074a2:	6643      	str	r3, [r0, #100]	; 0x64
 80074a4:	81c2      	strh	r2, [r0, #14]
 80074a6:	6183      	str	r3, [r0, #24]
 80074a8:	4619      	mov	r1, r3
 80074aa:	2208      	movs	r2, #8
 80074ac:	305c      	adds	r0, #92	; 0x5c
 80074ae:	f7ff fd35 	bl	8006f1c <memset>
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <std+0x38>)
 80074b4:	6263      	str	r3, [r4, #36]	; 0x24
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <std+0x3c>)
 80074b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <std+0x40>)
 80074bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <std+0x44>)
 80074c0:	6224      	str	r4, [r4, #32]
 80074c2:	6323      	str	r3, [r4, #48]	; 0x30
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	bf00      	nop
 80074c8:	080078d5 	.word	0x080078d5
 80074cc:	080078f7 	.word	0x080078f7
 80074d0:	0800792f 	.word	0x0800792f
 80074d4:	08007953 	.word	0x08007953

080074d8 <_cleanup_r>:
 80074d8:	4901      	ldr	r1, [pc, #4]	; (80074e0 <_cleanup_r+0x8>)
 80074da:	f000 b8af 	b.w	800763c <_fwalk_reent>
 80074de:	bf00      	nop
 80074e0:	08007419 	.word	0x08007419

080074e4 <__sfmoreglue>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	2268      	movs	r2, #104	; 0x68
 80074e8:	1e4d      	subs	r5, r1, #1
 80074ea:	4355      	muls	r5, r2
 80074ec:	460e      	mov	r6, r1
 80074ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074f2:	f000 f95f 	bl	80077b4 <_malloc_r>
 80074f6:	4604      	mov	r4, r0
 80074f8:	b140      	cbz	r0, 800750c <__sfmoreglue+0x28>
 80074fa:	2100      	movs	r1, #0
 80074fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007500:	300c      	adds	r0, #12
 8007502:	60a0      	str	r0, [r4, #8]
 8007504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007508:	f7ff fd08 	bl	8006f1c <memset>
 800750c:	4620      	mov	r0, r4
 800750e:	bd70      	pop	{r4, r5, r6, pc}

08007510 <__sfp_lock_acquire>:
 8007510:	4801      	ldr	r0, [pc, #4]	; (8007518 <__sfp_lock_acquire+0x8>)
 8007512:	f000 b8b3 	b.w	800767c <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	2001cbc5 	.word	0x2001cbc5

0800751c <__sfp_lock_release>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__sfp_lock_release+0x8>)
 800751e:	f000 b8ae 	b.w	800767e <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	2001cbc5 	.word	0x2001cbc5

08007528 <__sinit_lock_acquire>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__sinit_lock_acquire+0x8>)
 800752a:	f000 b8a7 	b.w	800767c <__retarget_lock_acquire_recursive>
 800752e:	bf00      	nop
 8007530:	2001cbc6 	.word	0x2001cbc6

08007534 <__sinit_lock_release>:
 8007534:	4801      	ldr	r0, [pc, #4]	; (800753c <__sinit_lock_release+0x8>)
 8007536:	f000 b8a2 	b.w	800767e <__retarget_lock_release_recursive>
 800753a:	bf00      	nop
 800753c:	2001cbc6 	.word	0x2001cbc6

08007540 <__sinit>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	f7ff fff0 	bl	8007528 <__sinit_lock_acquire>
 8007548:	69a3      	ldr	r3, [r4, #24]
 800754a:	b11b      	cbz	r3, 8007554 <__sinit+0x14>
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007550:	f7ff bff0 	b.w	8007534 <__sinit_lock_release>
 8007554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007558:	6523      	str	r3, [r4, #80]	; 0x50
 800755a:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <__sinit+0x68>)
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <__sinit+0x6c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	62a2      	str	r2, [r4, #40]	; 0x28
 8007562:	42a3      	cmp	r3, r4
 8007564:	bf04      	itt	eq
 8007566:	2301      	moveq	r3, #1
 8007568:	61a3      	streq	r3, [r4, #24]
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f820 	bl	80075b0 <__sfp>
 8007570:	6060      	str	r0, [r4, #4]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f81c 	bl	80075b0 <__sfp>
 8007578:	60a0      	str	r0, [r4, #8]
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f818 	bl	80075b0 <__sfp>
 8007580:	2200      	movs	r2, #0
 8007582:	60e0      	str	r0, [r4, #12]
 8007584:	2104      	movs	r1, #4
 8007586:	6860      	ldr	r0, [r4, #4]
 8007588:	f7ff ff82 	bl	8007490 <std>
 800758c:	68a0      	ldr	r0, [r4, #8]
 800758e:	2201      	movs	r2, #1
 8007590:	2109      	movs	r1, #9
 8007592:	f7ff ff7d 	bl	8007490 <std>
 8007596:	68e0      	ldr	r0, [r4, #12]
 8007598:	2202      	movs	r2, #2
 800759a:	2112      	movs	r1, #18
 800759c:	f7ff ff78 	bl	8007490 <std>
 80075a0:	2301      	movs	r3, #1
 80075a2:	61a3      	str	r3, [r4, #24]
 80075a4:	e7d2      	b.n	800754c <__sinit+0xc>
 80075a6:	bf00      	nop
 80075a8:	08018544 	.word	0x08018544
 80075ac:	080074d9 	.word	0x080074d9

080075b0 <__sfp>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	4607      	mov	r7, r0
 80075b4:	f7ff ffac 	bl	8007510 <__sfp_lock_acquire>
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <__sfp+0x84>)
 80075ba:	681e      	ldr	r6, [r3, #0]
 80075bc:	69b3      	ldr	r3, [r6, #24]
 80075be:	b913      	cbnz	r3, 80075c6 <__sfp+0x16>
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7ff ffbd 	bl	8007540 <__sinit>
 80075c6:	3648      	adds	r6, #72	; 0x48
 80075c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	d503      	bpl.n	80075d8 <__sfp+0x28>
 80075d0:	6833      	ldr	r3, [r6, #0]
 80075d2:	b30b      	cbz	r3, 8007618 <__sfp+0x68>
 80075d4:	6836      	ldr	r6, [r6, #0]
 80075d6:	e7f7      	b.n	80075c8 <__sfp+0x18>
 80075d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075dc:	b9d5      	cbnz	r5, 8007614 <__sfp+0x64>
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <__sfp+0x88>)
 80075e0:	60e3      	str	r3, [r4, #12]
 80075e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075e6:	6665      	str	r5, [r4, #100]	; 0x64
 80075e8:	f000 f847 	bl	800767a <__retarget_lock_init_recursive>
 80075ec:	f7ff ff96 	bl	800751c <__sfp_lock_release>
 80075f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075f8:	6025      	str	r5, [r4, #0]
 80075fa:	61a5      	str	r5, [r4, #24]
 80075fc:	2208      	movs	r2, #8
 80075fe:	4629      	mov	r1, r5
 8007600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007604:	f7ff fc8a 	bl	8006f1c <memset>
 8007608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800760c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007610:	4620      	mov	r0, r4
 8007612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007614:	3468      	adds	r4, #104	; 0x68
 8007616:	e7d9      	b.n	80075cc <__sfp+0x1c>
 8007618:	2104      	movs	r1, #4
 800761a:	4638      	mov	r0, r7
 800761c:	f7ff ff62 	bl	80074e4 <__sfmoreglue>
 8007620:	4604      	mov	r4, r0
 8007622:	6030      	str	r0, [r6, #0]
 8007624:	2800      	cmp	r0, #0
 8007626:	d1d5      	bne.n	80075d4 <__sfp+0x24>
 8007628:	f7ff ff78 	bl	800751c <__sfp_lock_release>
 800762c:	230c      	movs	r3, #12
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	e7ee      	b.n	8007610 <__sfp+0x60>
 8007632:	bf00      	nop
 8007634:	08018544 	.word	0x08018544
 8007638:	ffff0001 	.word	0xffff0001

0800763c <_fwalk_reent>:
 800763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007640:	4606      	mov	r6, r0
 8007642:	4688      	mov	r8, r1
 8007644:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007648:	2700      	movs	r7, #0
 800764a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800764e:	f1b9 0901 	subs.w	r9, r9, #1
 8007652:	d505      	bpl.n	8007660 <_fwalk_reent+0x24>
 8007654:	6824      	ldr	r4, [r4, #0]
 8007656:	2c00      	cmp	r4, #0
 8007658:	d1f7      	bne.n	800764a <_fwalk_reent+0xe>
 800765a:	4638      	mov	r0, r7
 800765c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007660:	89ab      	ldrh	r3, [r5, #12]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d907      	bls.n	8007676 <_fwalk_reent+0x3a>
 8007666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800766a:	3301      	adds	r3, #1
 800766c:	d003      	beq.n	8007676 <_fwalk_reent+0x3a>
 800766e:	4629      	mov	r1, r5
 8007670:	4630      	mov	r0, r6
 8007672:	47c0      	blx	r8
 8007674:	4307      	orrs	r7, r0
 8007676:	3568      	adds	r5, #104	; 0x68
 8007678:	e7e9      	b.n	800764e <_fwalk_reent+0x12>

0800767a <__retarget_lock_init_recursive>:
 800767a:	4770      	bx	lr

0800767c <__retarget_lock_acquire_recursive>:
 800767c:	4770      	bx	lr

0800767e <__retarget_lock_release_recursive>:
 800767e:	4770      	bx	lr

08007680 <__swhatbuf_r>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	460e      	mov	r6, r1
 8007684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007688:	2900      	cmp	r1, #0
 800768a:	b096      	sub	sp, #88	; 0x58
 800768c:	4614      	mov	r4, r2
 800768e:	461d      	mov	r5, r3
 8007690:	da08      	bge.n	80076a4 <__swhatbuf_r+0x24>
 8007692:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	602a      	str	r2, [r5, #0]
 800769a:	061a      	lsls	r2, r3, #24
 800769c:	d410      	bmi.n	80076c0 <__swhatbuf_r+0x40>
 800769e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a2:	e00e      	b.n	80076c2 <__swhatbuf_r+0x42>
 80076a4:	466a      	mov	r2, sp
 80076a6:	f000 f97b 	bl	80079a0 <_fstat_r>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	dbf1      	blt.n	8007692 <__swhatbuf_r+0x12>
 80076ae:	9a01      	ldr	r2, [sp, #4]
 80076b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076b8:	425a      	negs	r2, r3
 80076ba:	415a      	adcs	r2, r3
 80076bc:	602a      	str	r2, [r5, #0]
 80076be:	e7ee      	b.n	800769e <__swhatbuf_r+0x1e>
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	2000      	movs	r0, #0
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	b016      	add	sp, #88	; 0x58
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080076cc <malloc>:
 80076cc:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <malloc+0xc>)
 80076ce:	4601      	mov	r1, r0
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	f000 b86f 	b.w	80077b4 <_malloc_r>
 80076d6:	bf00      	nop
 80076d8:	20000080 	.word	0x20000080

080076dc <_free_r>:
 80076dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076de:	2900      	cmp	r1, #0
 80076e0:	d044      	beq.n	800776c <_free_r+0x90>
 80076e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e6:	9001      	str	r0, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f1a1 0404 	sub.w	r4, r1, #4
 80076ee:	bfb8      	it	lt
 80076f0:	18e4      	addlt	r4, r4, r3
 80076f2:	f000 f979 	bl	80079e8 <__malloc_lock>
 80076f6:	4a1e      	ldr	r2, [pc, #120]	; (8007770 <_free_r+0x94>)
 80076f8:	9801      	ldr	r0, [sp, #4]
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	b933      	cbnz	r3, 800770c <_free_r+0x30>
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	6014      	str	r4, [r2, #0]
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007708:	f000 b974 	b.w	80079f4 <__malloc_unlock>
 800770c:	42a3      	cmp	r3, r4
 800770e:	d908      	bls.n	8007722 <_free_r+0x46>
 8007710:	6825      	ldr	r5, [r4, #0]
 8007712:	1961      	adds	r1, r4, r5
 8007714:	428b      	cmp	r3, r1
 8007716:	bf01      	itttt	eq
 8007718:	6819      	ldreq	r1, [r3, #0]
 800771a:	685b      	ldreq	r3, [r3, #4]
 800771c:	1949      	addeq	r1, r1, r5
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	e7ed      	b.n	80076fe <_free_r+0x22>
 8007722:	461a      	mov	r2, r3
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b10b      	cbz	r3, 800772c <_free_r+0x50>
 8007728:	42a3      	cmp	r3, r4
 800772a:	d9fa      	bls.n	8007722 <_free_r+0x46>
 800772c:	6811      	ldr	r1, [r2, #0]
 800772e:	1855      	adds	r5, r2, r1
 8007730:	42a5      	cmp	r5, r4
 8007732:	d10b      	bne.n	800774c <_free_r+0x70>
 8007734:	6824      	ldr	r4, [r4, #0]
 8007736:	4421      	add	r1, r4
 8007738:	1854      	adds	r4, r2, r1
 800773a:	42a3      	cmp	r3, r4
 800773c:	6011      	str	r1, [r2, #0]
 800773e:	d1e0      	bne.n	8007702 <_free_r+0x26>
 8007740:	681c      	ldr	r4, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	6053      	str	r3, [r2, #4]
 8007746:	4421      	add	r1, r4
 8007748:	6011      	str	r1, [r2, #0]
 800774a:	e7da      	b.n	8007702 <_free_r+0x26>
 800774c:	d902      	bls.n	8007754 <_free_r+0x78>
 800774e:	230c      	movs	r3, #12
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	e7d6      	b.n	8007702 <_free_r+0x26>
 8007754:	6825      	ldr	r5, [r4, #0]
 8007756:	1961      	adds	r1, r4, r5
 8007758:	428b      	cmp	r3, r1
 800775a:	bf04      	itt	eq
 800775c:	6819      	ldreq	r1, [r3, #0]
 800775e:	685b      	ldreq	r3, [r3, #4]
 8007760:	6063      	str	r3, [r4, #4]
 8007762:	bf04      	itt	eq
 8007764:	1949      	addeq	r1, r1, r5
 8007766:	6021      	streq	r1, [r4, #0]
 8007768:	6054      	str	r4, [r2, #4]
 800776a:	e7ca      	b.n	8007702 <_free_r+0x26>
 800776c:	b003      	add	sp, #12
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	2001cbc8 	.word	0x2001cbc8

08007774 <sbrk_aligned>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4e0e      	ldr	r6, [pc, #56]	; (80077b0 <sbrk_aligned+0x3c>)
 8007778:	460c      	mov	r4, r1
 800777a:	6831      	ldr	r1, [r6, #0]
 800777c:	4605      	mov	r5, r0
 800777e:	b911      	cbnz	r1, 8007786 <sbrk_aligned+0x12>
 8007780:	f000 f898 	bl	80078b4 <_sbrk_r>
 8007784:	6030      	str	r0, [r6, #0]
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f000 f893 	bl	80078b4 <_sbrk_r>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d00a      	beq.n	80077a8 <sbrk_aligned+0x34>
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d007      	beq.n	80077ac <sbrk_aligned+0x38>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f888 	bl	80078b4 <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d101      	bne.n	80077ac <sbrk_aligned+0x38>
 80077a8:	f04f 34ff 	mov.w	r4, #4294967295
 80077ac:	4620      	mov	r0, r4
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	2001cbcc 	.word	0x2001cbcc

080077b4 <_malloc_r>:
 80077b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b8:	1ccd      	adds	r5, r1, #3
 80077ba:	f025 0503 	bic.w	r5, r5, #3
 80077be:	3508      	adds	r5, #8
 80077c0:	2d0c      	cmp	r5, #12
 80077c2:	bf38      	it	cc
 80077c4:	250c      	movcc	r5, #12
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	4607      	mov	r7, r0
 80077ca:	db01      	blt.n	80077d0 <_malloc_r+0x1c>
 80077cc:	42a9      	cmp	r1, r5
 80077ce:	d905      	bls.n	80077dc <_malloc_r+0x28>
 80077d0:	230c      	movs	r3, #12
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	2600      	movs	r6, #0
 80077d6:	4630      	mov	r0, r6
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077dc:	4e2e      	ldr	r6, [pc, #184]	; (8007898 <_malloc_r+0xe4>)
 80077de:	f000 f903 	bl	80079e8 <__malloc_lock>
 80077e2:	6833      	ldr	r3, [r6, #0]
 80077e4:	461c      	mov	r4, r3
 80077e6:	bb34      	cbnz	r4, 8007836 <_malloc_r+0x82>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4638      	mov	r0, r7
 80077ec:	f7ff ffc2 	bl	8007774 <sbrk_aligned>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	4604      	mov	r4, r0
 80077f4:	d14d      	bne.n	8007892 <_malloc_r+0xde>
 80077f6:	6834      	ldr	r4, [r6, #0]
 80077f8:	4626      	mov	r6, r4
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	d140      	bne.n	8007880 <_malloc_r+0xcc>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4631      	mov	r1, r6
 8007802:	4638      	mov	r0, r7
 8007804:	eb04 0803 	add.w	r8, r4, r3
 8007808:	f000 f854 	bl	80078b4 <_sbrk_r>
 800780c:	4580      	cmp	r8, r0
 800780e:	d13a      	bne.n	8007886 <_malloc_r+0xd2>
 8007810:	6821      	ldr	r1, [r4, #0]
 8007812:	3503      	adds	r5, #3
 8007814:	1a6d      	subs	r5, r5, r1
 8007816:	f025 0503 	bic.w	r5, r5, #3
 800781a:	3508      	adds	r5, #8
 800781c:	2d0c      	cmp	r5, #12
 800781e:	bf38      	it	cc
 8007820:	250c      	movcc	r5, #12
 8007822:	4629      	mov	r1, r5
 8007824:	4638      	mov	r0, r7
 8007826:	f7ff ffa5 	bl	8007774 <sbrk_aligned>
 800782a:	3001      	adds	r0, #1
 800782c:	d02b      	beq.n	8007886 <_malloc_r+0xd2>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	442b      	add	r3, r5
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	e00e      	b.n	8007854 <_malloc_r+0xa0>
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	1b52      	subs	r2, r2, r5
 800783a:	d41e      	bmi.n	800787a <_malloc_r+0xc6>
 800783c:	2a0b      	cmp	r2, #11
 800783e:	d916      	bls.n	800786e <_malloc_r+0xba>
 8007840:	1961      	adds	r1, r4, r5
 8007842:	42a3      	cmp	r3, r4
 8007844:	6025      	str	r5, [r4, #0]
 8007846:	bf18      	it	ne
 8007848:	6059      	strne	r1, [r3, #4]
 800784a:	6863      	ldr	r3, [r4, #4]
 800784c:	bf08      	it	eq
 800784e:	6031      	streq	r1, [r6, #0]
 8007850:	5162      	str	r2, [r4, r5]
 8007852:	604b      	str	r3, [r1, #4]
 8007854:	4638      	mov	r0, r7
 8007856:	f104 060b 	add.w	r6, r4, #11
 800785a:	f000 f8cb 	bl	80079f4 <__malloc_unlock>
 800785e:	f026 0607 	bic.w	r6, r6, #7
 8007862:	1d23      	adds	r3, r4, #4
 8007864:	1af2      	subs	r2, r6, r3
 8007866:	d0b6      	beq.n	80077d6 <_malloc_r+0x22>
 8007868:	1b9b      	subs	r3, r3, r6
 800786a:	50a3      	str	r3, [r4, r2]
 800786c:	e7b3      	b.n	80077d6 <_malloc_r+0x22>
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	42a3      	cmp	r3, r4
 8007872:	bf0c      	ite	eq
 8007874:	6032      	streq	r2, [r6, #0]
 8007876:	605a      	strne	r2, [r3, #4]
 8007878:	e7ec      	b.n	8007854 <_malloc_r+0xa0>
 800787a:	4623      	mov	r3, r4
 800787c:	6864      	ldr	r4, [r4, #4]
 800787e:	e7b2      	b.n	80077e6 <_malloc_r+0x32>
 8007880:	4634      	mov	r4, r6
 8007882:	6876      	ldr	r6, [r6, #4]
 8007884:	e7b9      	b.n	80077fa <_malloc_r+0x46>
 8007886:	230c      	movs	r3, #12
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	4638      	mov	r0, r7
 800788c:	f000 f8b2 	bl	80079f4 <__malloc_unlock>
 8007890:	e7a1      	b.n	80077d6 <_malloc_r+0x22>
 8007892:	6025      	str	r5, [r4, #0]
 8007894:	e7de      	b.n	8007854 <_malloc_r+0xa0>
 8007896:	bf00      	nop
 8007898:	2001cbc8 	.word	0x2001cbc8

0800789c <finite>:
 800789c:	b082      	sub	sp, #8
 800789e:	ed8d 0b00 	vstr	d0, [sp]
 80078a2:	9801      	ldr	r0, [sp, #4]
 80078a4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80078a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80078ac:	0fc0      	lsrs	r0, r0, #31
 80078ae:	b002      	add	sp, #8
 80078b0:	4770      	bx	lr
	...

080078b4 <_sbrk_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d06      	ldr	r5, [pc, #24]	; (80078d0 <_sbrk_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	f7fb f9d8 	bl	8002c74 <_sbrk>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_sbrk_r+0x1a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_sbrk_r+0x1a>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	2001cbd0 	.word	0x2001cbd0

080078d4 <__sread>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	f000 f890 	bl	8007a00 <_read_r>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	bfab      	itete	ge
 80078e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078e6:	89a3      	ldrhlt	r3, [r4, #12]
 80078e8:	181b      	addge	r3, r3, r0
 80078ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ee:	bfac      	ite	ge
 80078f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80078f2:	81a3      	strhlt	r3, [r4, #12]
 80078f4:	bd10      	pop	{r4, pc}

080078f6 <__swrite>:
 80078f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	461f      	mov	r7, r3
 80078fc:	898b      	ldrh	r3, [r1, #12]
 80078fe:	05db      	lsls	r3, r3, #23
 8007900:	4605      	mov	r5, r0
 8007902:	460c      	mov	r4, r1
 8007904:	4616      	mov	r6, r2
 8007906:	d505      	bpl.n	8007914 <__swrite+0x1e>
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	2302      	movs	r3, #2
 800790e:	2200      	movs	r2, #0
 8007910:	f000 f858 	bl	80079c4 <_lseek_r>
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800791a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	4632      	mov	r2, r6
 8007922:	463b      	mov	r3, r7
 8007924:	4628      	mov	r0, r5
 8007926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	f000 b817 	b.w	800795c <_write_r>

0800792e <__sseek>:
 800792e:	b510      	push	{r4, lr}
 8007930:	460c      	mov	r4, r1
 8007932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007936:	f000 f845 	bl	80079c4 <_lseek_r>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	bf15      	itete	ne
 8007940:	6560      	strne	r0, [r4, #84]	; 0x54
 8007942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800794a:	81a3      	strheq	r3, [r4, #12]
 800794c:	bf18      	it	ne
 800794e:	81a3      	strhne	r3, [r4, #12]
 8007950:	bd10      	pop	{r4, pc}

08007952 <__sclose>:
 8007952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007956:	f000 b813 	b.w	8007980 <_close_r>
	...

0800795c <_write_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	; (800797c <_write_r+0x20>)
 8007960:	4604      	mov	r4, r0
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	2200      	movs	r2, #0
 8007968:	602a      	str	r2, [r5, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	f7fe fa2e 	bl	8005dcc <_write>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_write_r+0x1e>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_write_r+0x1e>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	2001cbd0 	.word	0x2001cbd0

08007980 <_close_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d06      	ldr	r5, [pc, #24]	; (800799c <_close_r+0x1c>)
 8007984:	2300      	movs	r3, #0
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	602b      	str	r3, [r5, #0]
 800798c:	f7fb f966 	bl	8002c5c <_close>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_close_r+0x1a>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_close_r+0x1a>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	2001cbd0 	.word	0x2001cbd0

080079a0 <_fstat_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	; (80079c0 <_fstat_r+0x20>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	f7fb f959 	bl	8002c64 <_fstat>
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	d102      	bne.n	80079bc <_fstat_r+0x1c>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	b103      	cbz	r3, 80079bc <_fstat_r+0x1c>
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	bd38      	pop	{r3, r4, r5, pc}
 80079be:	bf00      	nop
 80079c0:	2001cbd0 	.word	0x2001cbd0

080079c4 <_lseek_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d07      	ldr	r5, [pc, #28]	; (80079e4 <_lseek_r+0x20>)
 80079c8:	4604      	mov	r4, r0
 80079ca:	4608      	mov	r0, r1
 80079cc:	4611      	mov	r1, r2
 80079ce:	2200      	movs	r2, #0
 80079d0:	602a      	str	r2, [r5, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f7fb f94c 	bl	8002c70 <_lseek>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_lseek_r+0x1e>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_lseek_r+0x1e>
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	2001cbd0 	.word	0x2001cbd0

080079e8 <__malloc_lock>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__malloc_lock+0x8>)
 80079ea:	f7ff be47 	b.w	800767c <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	2001cbc4 	.word	0x2001cbc4

080079f4 <__malloc_unlock>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__malloc_unlock+0x8>)
 80079f6:	f7ff be42 	b.w	800767e <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	2001cbc4 	.word	0x2001cbc4

08007a00 <_read_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	; (8007a20 <_read_r+0x20>)
 8007a04:	4604      	mov	r4, r0
 8007a06:	4608      	mov	r0, r1
 8007a08:	4611      	mov	r1, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7fb f916 	bl	8002c40 <_read>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_read_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_read_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	2001cbd0 	.word	0x2001cbd0

08007a24 <roundf>:
 8007a24:	ee10 0a10 	vmov	r0, s0
 8007a28:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007a2c:	3a7f      	subs	r2, #127	; 0x7f
 8007a2e:	2a16      	cmp	r2, #22
 8007a30:	dc15      	bgt.n	8007a5e <roundf+0x3a>
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	da08      	bge.n	8007a48 <roundf+0x24>
 8007a36:	3201      	adds	r2, #1
 8007a38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007a3c:	d101      	bne.n	8007a42 <roundf+0x1e>
 8007a3e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8007a42:	ee00 3a10 	vmov	s0, r3
 8007a46:	4770      	bx	lr
 8007a48:	4907      	ldr	r1, [pc, #28]	; (8007a68 <roundf+0x44>)
 8007a4a:	4111      	asrs	r1, r2
 8007a4c:	4208      	tst	r0, r1
 8007a4e:	d0fa      	beq.n	8007a46 <roundf+0x22>
 8007a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a54:	4113      	asrs	r3, r2
 8007a56:	4403      	add	r3, r0
 8007a58:	ea23 0301 	bic.w	r3, r3, r1
 8007a5c:	e7f1      	b.n	8007a42 <roundf+0x1e>
 8007a5e:	2a80      	cmp	r2, #128	; 0x80
 8007a60:	d1f1      	bne.n	8007a46 <roundf+0x22>
 8007a62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007a66:	4770      	bx	lr
 8007a68:	007fffff 	.word	0x007fffff

08007a6c <tanf>:
 8007a6c:	ee10 3a10 	vmov	r3, s0
 8007a70:	b507      	push	{r0, r1, r2, lr}
 8007a72:	4a12      	ldr	r2, [pc, #72]	; (8007abc <tanf+0x50>)
 8007a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	dc07      	bgt.n	8007a8c <tanf+0x20>
 8007a7c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007ac0 <tanf+0x54>
 8007a80:	2001      	movs	r0, #1
 8007a82:	b003      	add	sp, #12
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	f000 bdec 	b.w	8008664 <__kernel_tanf>
 8007a8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a90:	db04      	blt.n	8007a9c <tanf+0x30>
 8007a92:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007a96:	b003      	add	sp, #12
 8007a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a9c:	4668      	mov	r0, sp
 8007a9e:	f000 fa2f 	bl	8007f00 <__ieee754_rem_pio2f>
 8007aa2:	0040      	lsls	r0, r0, #1
 8007aa4:	f000 0002 	and.w	r0, r0, #2
 8007aa8:	eddd 0a01 	vldr	s1, [sp, #4]
 8007aac:	ed9d 0a00 	vldr	s0, [sp]
 8007ab0:	f1c0 0001 	rsb	r0, r0, #1
 8007ab4:	f000 fdd6 	bl	8008664 <__kernel_tanf>
 8007ab8:	e7ed      	b.n	8007a96 <tanf+0x2a>
 8007aba:	bf00      	nop
 8007abc:	3f490fda 	.word	0x3f490fda
 8007ac0:	00000000 	.word	0x00000000

08007ac4 <fmod>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	ed2d 8b02 	vpush	{d8}
 8007aca:	ec57 6b10 	vmov	r6, r7, d0
 8007ace:	ec55 4b11 	vmov	r4, r5, d1
 8007ad2:	f000 f851 	bl	8007b78 <__ieee754_fmod>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	eeb0 8a40 	vmov.f32	s16, s0
 8007ae2:	eef0 8a60 	vmov.f32	s17, s1
 8007ae6:	f7f8 ffed 	bl	8000ac4 <__aeabi_dcmpun>
 8007aea:	b990      	cbnz	r0, 8007b12 <fmod+0x4e>
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	4620      	mov	r0, r4
 8007af2:	4629      	mov	r1, r5
 8007af4:	f7f8 ffb4 	bl	8000a60 <__aeabi_dcmpeq>
 8007af8:	b158      	cbz	r0, 8007b12 <fmod+0x4e>
 8007afa:	f7ff f9e5 	bl	8006ec8 <__errno>
 8007afe:	2321      	movs	r3, #33	; 0x21
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	2300      	movs	r3, #0
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f7f8 fe6b 	bl	80007e4 <__aeabi_ddiv>
 8007b0e:	ec41 0b18 	vmov	d8, r0, r1
 8007b12:	eeb0 0a48 	vmov.f32	s0, s16
 8007b16:	eef0 0a68 	vmov.f32	s1, s17
 8007b1a:	ecbd 8b02 	vpop	{d8}
 8007b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b20 <sqrt>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	ed2d 8b02 	vpush	{d8}
 8007b26:	ec55 4b10 	vmov	r4, r5, d0
 8007b2a:	f000 f937 	bl	8007d9c <__ieee754_sqrt>
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	eeb0 8a40 	vmov.f32	s16, s0
 8007b3a:	eef0 8a60 	vmov.f32	s17, s1
 8007b3e:	f7f8 ffc1 	bl	8000ac4 <__aeabi_dcmpun>
 8007b42:	b990      	cbnz	r0, 8007b6a <sqrt+0x4a>
 8007b44:	2200      	movs	r2, #0
 8007b46:	2300      	movs	r3, #0
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	f7f8 ff92 	bl	8000a74 <__aeabi_dcmplt>
 8007b50:	b158      	cbz	r0, 8007b6a <sqrt+0x4a>
 8007b52:	f7ff f9b9 	bl	8006ec8 <__errno>
 8007b56:	2321      	movs	r3, #33	; 0x21
 8007b58:	6003      	str	r3, [r0, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4619      	mov	r1, r3
 8007b62:	f7f8 fe3f 	bl	80007e4 <__aeabi_ddiv>
 8007b66:	ec41 0b18 	vmov	d8, r0, r1
 8007b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8007b6e:	eef0 0a68 	vmov.f32	s1, s17
 8007b72:	ecbd 8b02 	vpop	{d8}
 8007b76:	bd38      	pop	{r3, r4, r5, pc}

08007b78 <__ieee754_fmod>:
 8007b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	ec53 2b11 	vmov	r2, r3, d1
 8007b80:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8007b84:	ea5e 0402 	orrs.w	r4, lr, r2
 8007b88:	ec51 0b10 	vmov	r0, r1, d0
 8007b8c:	ee11 7a10 	vmov	r7, s2
 8007b90:	ee11 ca10 	vmov	ip, s2
 8007b94:	461e      	mov	r6, r3
 8007b96:	d00d      	beq.n	8007bb4 <__ieee754_fmod+0x3c>
 8007b98:	4c7a      	ldr	r4, [pc, #488]	; (8007d84 <__ieee754_fmod+0x20c>)
 8007b9a:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8007b9e:	45a0      	cmp	r8, r4
 8007ba0:	4689      	mov	r9, r1
 8007ba2:	dc07      	bgt.n	8007bb4 <__ieee754_fmod+0x3c>
 8007ba4:	4254      	negs	r4, r2
 8007ba6:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8007d90 <__ieee754_fmod+0x218>
 8007baa:	4314      	orrs	r4, r2
 8007bac:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8007bb0:	455c      	cmp	r4, fp
 8007bb2:	d909      	bls.n	8007bc8 <__ieee754_fmod+0x50>
 8007bb4:	f7f8 fcec 	bl	8000590 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	f7f8 fe12 	bl	80007e4 <__aeabi_ddiv>
 8007bc0:	ec41 0b10 	vmov	d0, r0, r1
 8007bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	45f0      	cmp	r8, lr
 8007bca:	ee10 aa10 	vmov	sl, s0
 8007bce:	ee10 4a10 	vmov	r4, s0
 8007bd2:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007bd6:	dc09      	bgt.n	8007bec <__ieee754_fmod+0x74>
 8007bd8:	dbf2      	blt.n	8007bc0 <__ieee754_fmod+0x48>
 8007bda:	4290      	cmp	r0, r2
 8007bdc:	d3f0      	bcc.n	8007bc0 <__ieee754_fmod+0x48>
 8007bde:	d105      	bne.n	8007bec <__ieee754_fmod+0x74>
 8007be0:	4b69      	ldr	r3, [pc, #420]	; (8007d88 <__ieee754_fmod+0x210>)
 8007be2:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 8007be6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007bea:	e7e9      	b.n	8007bc0 <__ieee754_fmod+0x48>
 8007bec:	ea19 0f0b 	tst.w	r9, fp
 8007bf0:	d14a      	bne.n	8007c88 <__ieee754_fmod+0x110>
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	d13f      	bne.n	8007c78 <__ieee754_fmod+0x100>
 8007bf8:	4964      	ldr	r1, [pc, #400]	; (8007d8c <__ieee754_fmod+0x214>)
 8007bfa:	4653      	mov	r3, sl
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dc38      	bgt.n	8007c72 <__ieee754_fmod+0xfa>
 8007c00:	4b63      	ldr	r3, [pc, #396]	; (8007d90 <__ieee754_fmod+0x218>)
 8007c02:	4033      	ands	r3, r6
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d14f      	bne.n	8007ca8 <__ieee754_fmod+0x130>
 8007c08:	f1be 0f00 	cmp.w	lr, #0
 8007c0c:	d144      	bne.n	8007c98 <__ieee754_fmod+0x120>
 8007c0e:	4a5f      	ldr	r2, [pc, #380]	; (8007d8c <__ieee754_fmod+0x214>)
 8007c10:	463b      	mov	r3, r7
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dc3d      	bgt.n	8007c92 <__ieee754_fmod+0x11a>
 8007c16:	4b5f      	ldr	r3, [pc, #380]	; (8007d94 <__ieee754_fmod+0x21c>)
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	db4a      	blt.n	8007cb2 <__ieee754_fmod+0x13a>
 8007c1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c24:	485b      	ldr	r0, [pc, #364]	; (8007d94 <__ieee754_fmod+0x21c>)
 8007c26:	4282      	cmp	r2, r0
 8007c28:	db57      	blt.n	8007cda <__ieee754_fmod+0x162>
 8007c2a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007c2e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8007c32:	1a89      	subs	r1, r1, r2
 8007c34:	1b98      	subs	r0, r3, r6
 8007c36:	eba4 070c 	sub.w	r7, r4, ip
 8007c3a:	2900      	cmp	r1, #0
 8007c3c:	d164      	bne.n	8007d08 <__ieee754_fmod+0x190>
 8007c3e:	4564      	cmp	r4, ip
 8007c40:	bf38      	it	cc
 8007c42:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007c46:	2800      	cmp	r0, #0
 8007c48:	bfa4      	itt	ge
 8007c4a:	463c      	movge	r4, r7
 8007c4c:	4603      	movge	r3, r0
 8007c4e:	ea53 0104 	orrs.w	r1, r3, r4
 8007c52:	d0c5      	beq.n	8007be0 <__ieee754_fmod+0x68>
 8007c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c58:	db6b      	blt.n	8007d32 <__ieee754_fmod+0x1ba>
 8007c5a:	494e      	ldr	r1, [pc, #312]	; (8007d94 <__ieee754_fmod+0x21c>)
 8007c5c:	428a      	cmp	r2, r1
 8007c5e:	db6e      	blt.n	8007d3e <__ieee754_fmod+0x1c6>
 8007c60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c64:	431d      	orrs	r5, r3
 8007c66:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8007c6a:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8007c6e:	4620      	mov	r0, r4
 8007c70:	e7a6      	b.n	8007bc0 <__ieee754_fmod+0x48>
 8007c72:	3901      	subs	r1, #1
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	e7c1      	b.n	8007bfc <__ieee754_fmod+0x84>
 8007c78:	4946      	ldr	r1, [pc, #280]	; (8007d94 <__ieee754_fmod+0x21c>)
 8007c7a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	ddbe      	ble.n	8007c00 <__ieee754_fmod+0x88>
 8007c82:	3901      	subs	r1, #1
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	e7fa      	b.n	8007c7e <__ieee754_fmod+0x106>
 8007c88:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007c8c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007c90:	e7b6      	b.n	8007c00 <__ieee754_fmod+0x88>
 8007c92:	3a01      	subs	r2, #1
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	e7bc      	b.n	8007c12 <__ieee754_fmod+0x9a>
 8007c98:	4a3e      	ldr	r2, [pc, #248]	; (8007d94 <__ieee754_fmod+0x21c>)
 8007c9a:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	ddb9      	ble.n	8007c16 <__ieee754_fmod+0x9e>
 8007ca2:	3a01      	subs	r2, #1
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	e7fa      	b.n	8007c9e <__ieee754_fmod+0x126>
 8007ca8:	ea4f 522e 	mov.w	r2, lr, asr #20
 8007cac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007cb0:	e7b1      	b.n	8007c16 <__ieee754_fmod+0x9e>
 8007cb2:	1a5c      	subs	r4, r3, r1
 8007cb4:	2c1f      	cmp	r4, #31
 8007cb6:	dc0a      	bgt.n	8007cce <__ieee754_fmod+0x156>
 8007cb8:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8007cbc:	fa08 f804 	lsl.w	r8, r8, r4
 8007cc0:	fa2a f303 	lsr.w	r3, sl, r3
 8007cc4:	ea43 0308 	orr.w	r3, r3, r8
 8007cc8:	fa0a f404 	lsl.w	r4, sl, r4
 8007ccc:	e7aa      	b.n	8007c24 <__ieee754_fmod+0xac>
 8007cce:	4b32      	ldr	r3, [pc, #200]	; (8007d98 <__ieee754_fmod+0x220>)
 8007cd0:	1a5b      	subs	r3, r3, r1
 8007cd2:	fa0a f303 	lsl.w	r3, sl, r3
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	e7a4      	b.n	8007c24 <__ieee754_fmod+0xac>
 8007cda:	eba0 0c02 	sub.w	ip, r0, r2
 8007cde:	f1bc 0f1f 	cmp.w	ip, #31
 8007ce2:	dc0a      	bgt.n	8007cfa <__ieee754_fmod+0x182>
 8007ce4:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8007ce8:	fa0e fe0c 	lsl.w	lr, lr, ip
 8007cec:	fa27 f606 	lsr.w	r6, r7, r6
 8007cf0:	ea46 060e 	orr.w	r6, r6, lr
 8007cf4:	fa07 fc0c 	lsl.w	ip, r7, ip
 8007cf8:	e79b      	b.n	8007c32 <__ieee754_fmod+0xba>
 8007cfa:	4e27      	ldr	r6, [pc, #156]	; (8007d98 <__ieee754_fmod+0x220>)
 8007cfc:	1ab6      	subs	r6, r6, r2
 8007cfe:	fa07 f606 	lsl.w	r6, r7, r6
 8007d02:	f04f 0c00 	mov.w	ip, #0
 8007d06:	e794      	b.n	8007c32 <__ieee754_fmod+0xba>
 8007d08:	4564      	cmp	r4, ip
 8007d0a:	bf38      	it	cc
 8007d0c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007d10:	2800      	cmp	r0, #0
 8007d12:	da05      	bge.n	8007d20 <__ieee754_fmod+0x1a8>
 8007d14:	0fe0      	lsrs	r0, r4, #31
 8007d16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007d1a:	0064      	lsls	r4, r4, #1
 8007d1c:	3901      	subs	r1, #1
 8007d1e:	e789      	b.n	8007c34 <__ieee754_fmod+0xbc>
 8007d20:	ea50 0307 	orrs.w	r3, r0, r7
 8007d24:	f43f af5c 	beq.w	8007be0 <__ieee754_fmod+0x68>
 8007d28:	0ffb      	lsrs	r3, r7, #31
 8007d2a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007d2e:	007c      	lsls	r4, r7, #1
 8007d30:	e7f4      	b.n	8007d1c <__ieee754_fmod+0x1a4>
 8007d32:	0fe1      	lsrs	r1, r4, #31
 8007d34:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007d38:	0064      	lsls	r4, r4, #1
 8007d3a:	3a01      	subs	r2, #1
 8007d3c:	e78a      	b.n	8007c54 <__ieee754_fmod+0xdc>
 8007d3e:	1a89      	subs	r1, r1, r2
 8007d40:	2914      	cmp	r1, #20
 8007d42:	dc0a      	bgt.n	8007d5a <__ieee754_fmod+0x1e2>
 8007d44:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8007d48:	fa03 f202 	lsl.w	r2, r3, r2
 8007d4c:	40cc      	lsrs	r4, r1
 8007d4e:	4322      	orrs	r2, r4
 8007d50:	410b      	asrs	r3, r1
 8007d52:	ea43 0105 	orr.w	r1, r3, r5
 8007d56:	4610      	mov	r0, r2
 8007d58:	e732      	b.n	8007bc0 <__ieee754_fmod+0x48>
 8007d5a:	291f      	cmp	r1, #31
 8007d5c:	dc07      	bgt.n	8007d6e <__ieee754_fmod+0x1f6>
 8007d5e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8007d62:	40cc      	lsrs	r4, r1
 8007d64:	fa03 f202 	lsl.w	r2, r3, r2
 8007d68:	4322      	orrs	r2, r4
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	e7f1      	b.n	8007d52 <__ieee754_fmod+0x1da>
 8007d6e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8007d72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d76:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8007d7a:	32e2      	adds	r2, #226	; 0xe2
 8007d7c:	fa43 f202 	asr.w	r2, r3, r2
 8007d80:	e7f3      	b.n	8007d6a <__ieee754_fmod+0x1f2>
 8007d82:	bf00      	nop
 8007d84:	7fefffff 	.word	0x7fefffff
 8007d88:	080185a8 	.word	0x080185a8
 8007d8c:	fffffbed 	.word	0xfffffbed
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	fffffc02 	.word	0xfffffc02
 8007d98:	fffffbe2 	.word	0xfffffbe2

08007d9c <__ieee754_sqrt>:
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	ec55 4b10 	vmov	r4, r5, d0
 8007da4:	4e55      	ldr	r6, [pc, #340]	; (8007efc <__ieee754_sqrt+0x160>)
 8007da6:	43ae      	bics	r6, r5
 8007da8:	ee10 0a10 	vmov	r0, s0
 8007dac:	ee10 3a10 	vmov	r3, s0
 8007db0:	462a      	mov	r2, r5
 8007db2:	4629      	mov	r1, r5
 8007db4:	d110      	bne.n	8007dd8 <__ieee754_sqrt+0x3c>
 8007db6:	ee10 2a10 	vmov	r2, s0
 8007dba:	462b      	mov	r3, r5
 8007dbc:	f7f8 fbe8 	bl	8000590 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa2c 	bl	8000224 <__adddf3>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	ec45 4b10 	vmov	d0, r4, r5
 8007dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	dc10      	bgt.n	8007dfe <__ieee754_sqrt+0x62>
 8007ddc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007de0:	4330      	orrs	r0, r6
 8007de2:	d0f5      	beq.n	8007dd0 <__ieee754_sqrt+0x34>
 8007de4:	b15d      	cbz	r5, 8007dfe <__ieee754_sqrt+0x62>
 8007de6:	ee10 2a10 	vmov	r2, s0
 8007dea:	462b      	mov	r3, r5
 8007dec:	ee10 0a10 	vmov	r0, s0
 8007df0:	f7f8 fa16 	bl	8000220 <__aeabi_dsub>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	f7f8 fcf4 	bl	80007e4 <__aeabi_ddiv>
 8007dfc:	e7e6      	b.n	8007dcc <__ieee754_sqrt+0x30>
 8007dfe:	1512      	asrs	r2, r2, #20
 8007e00:	d074      	beq.n	8007eec <__ieee754_sqrt+0x150>
 8007e02:	07d4      	lsls	r4, r2, #31
 8007e04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007e08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007e10:	bf5e      	ittt	pl
 8007e12:	0fda      	lsrpl	r2, r3, #31
 8007e14:	005b      	lslpl	r3, r3, #1
 8007e16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	0fda      	lsrs	r2, r3, #31
 8007e1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007e22:	107f      	asrs	r7, r7, #1
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	2516      	movs	r5, #22
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007e2e:	1886      	adds	r6, r0, r2
 8007e30:	428e      	cmp	r6, r1
 8007e32:	bfde      	ittt	le
 8007e34:	1b89      	suble	r1, r1, r6
 8007e36:	18b0      	addle	r0, r6, r2
 8007e38:	18a4      	addle	r4, r4, r2
 8007e3a:	0049      	lsls	r1, r1, #1
 8007e3c:	3d01      	subs	r5, #1
 8007e3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007e42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007e46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e4a:	d1f0      	bne.n	8007e2e <__ieee754_sqrt+0x92>
 8007e4c:	462a      	mov	r2, r5
 8007e4e:	f04f 0e20 	mov.w	lr, #32
 8007e52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007e56:	4281      	cmp	r1, r0
 8007e58:	eb06 0c05 	add.w	ip, r6, r5
 8007e5c:	dc02      	bgt.n	8007e64 <__ieee754_sqrt+0xc8>
 8007e5e:	d113      	bne.n	8007e88 <__ieee754_sqrt+0xec>
 8007e60:	459c      	cmp	ip, r3
 8007e62:	d811      	bhi.n	8007e88 <__ieee754_sqrt+0xec>
 8007e64:	f1bc 0f00 	cmp.w	ip, #0
 8007e68:	eb0c 0506 	add.w	r5, ip, r6
 8007e6c:	da43      	bge.n	8007ef6 <__ieee754_sqrt+0x15a>
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	db41      	blt.n	8007ef6 <__ieee754_sqrt+0x15a>
 8007e72:	f100 0801 	add.w	r8, r0, #1
 8007e76:	1a09      	subs	r1, r1, r0
 8007e78:	459c      	cmp	ip, r3
 8007e7a:	bf88      	it	hi
 8007e7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007e80:	eba3 030c 	sub.w	r3, r3, ip
 8007e84:	4432      	add	r2, r6
 8007e86:	4640      	mov	r0, r8
 8007e88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007e8c:	f1be 0e01 	subs.w	lr, lr, #1
 8007e90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007e94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e9c:	d1db      	bne.n	8007e56 <__ieee754_sqrt+0xba>
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	d006      	beq.n	8007eb0 <__ieee754_sqrt+0x114>
 8007ea2:	1c50      	adds	r0, r2, #1
 8007ea4:	bf13      	iteet	ne
 8007ea6:	3201      	addne	r2, #1
 8007ea8:	3401      	addeq	r4, #1
 8007eaa:	4672      	moveq	r2, lr
 8007eac:	f022 0201 	bicne.w	r2, r2, #1
 8007eb0:	1063      	asrs	r3, r4, #1
 8007eb2:	0852      	lsrs	r2, r2, #1
 8007eb4:	07e1      	lsls	r1, r4, #31
 8007eb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007eba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007ebe:	bf48      	it	mi
 8007ec0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007ec4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007ec8:	4614      	mov	r4, r2
 8007eca:	e781      	b.n	8007dd0 <__ieee754_sqrt+0x34>
 8007ecc:	0ad9      	lsrs	r1, r3, #11
 8007ece:	3815      	subs	r0, #21
 8007ed0:	055b      	lsls	r3, r3, #21
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d0fa      	beq.n	8007ecc <__ieee754_sqrt+0x130>
 8007ed6:	02cd      	lsls	r5, r1, #11
 8007ed8:	d50a      	bpl.n	8007ef0 <__ieee754_sqrt+0x154>
 8007eda:	f1c2 0420 	rsb	r4, r2, #32
 8007ede:	fa23 f404 	lsr.w	r4, r3, r4
 8007ee2:	1e55      	subs	r5, r2, #1
 8007ee4:	4093      	lsls	r3, r2
 8007ee6:	4321      	orrs	r1, r4
 8007ee8:	1b42      	subs	r2, r0, r5
 8007eea:	e78a      	b.n	8007e02 <__ieee754_sqrt+0x66>
 8007eec:	4610      	mov	r0, r2
 8007eee:	e7f0      	b.n	8007ed2 <__ieee754_sqrt+0x136>
 8007ef0:	0049      	lsls	r1, r1, #1
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	e7ef      	b.n	8007ed6 <__ieee754_sqrt+0x13a>
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	e7bd      	b.n	8007e76 <__ieee754_sqrt+0xda>
 8007efa:	bf00      	nop
 8007efc:	7ff00000 	.word	0x7ff00000

08007f00 <__ieee754_rem_pio2f>:
 8007f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f02:	ee10 6a10 	vmov	r6, s0
 8007f06:	4b8e      	ldr	r3, [pc, #568]	; (8008140 <__ieee754_rem_pio2f+0x240>)
 8007f08:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007f0c:	429d      	cmp	r5, r3
 8007f0e:	b087      	sub	sp, #28
 8007f10:	eef0 7a40 	vmov.f32	s15, s0
 8007f14:	4604      	mov	r4, r0
 8007f16:	dc05      	bgt.n	8007f24 <__ieee754_rem_pio2f+0x24>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	ed80 0a00 	vstr	s0, [r0]
 8007f1e:	6043      	str	r3, [r0, #4]
 8007f20:	2000      	movs	r0, #0
 8007f22:	e01a      	b.n	8007f5a <__ieee754_rem_pio2f+0x5a>
 8007f24:	4b87      	ldr	r3, [pc, #540]	; (8008144 <__ieee754_rem_pio2f+0x244>)
 8007f26:	429d      	cmp	r5, r3
 8007f28:	dc46      	bgt.n	8007fb8 <__ieee754_rem_pio2f+0xb8>
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008148 <__ieee754_rem_pio2f+0x248>
 8007f30:	4b86      	ldr	r3, [pc, #536]	; (800814c <__ieee754_rem_pio2f+0x24c>)
 8007f32:	f025 050f 	bic.w	r5, r5, #15
 8007f36:	dd1f      	ble.n	8007f78 <__ieee754_rem_pio2f+0x78>
 8007f38:	429d      	cmp	r5, r3
 8007f3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f3e:	d00e      	beq.n	8007f5e <__ieee754_rem_pio2f+0x5e>
 8007f40:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008150 <__ieee754_rem_pio2f+0x250>
 8007f44:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007f48:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f4c:	ed80 0a00 	vstr	s0, [r0]
 8007f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f54:	2001      	movs	r0, #1
 8007f56:	edc4 7a01 	vstr	s15, [r4, #4]
 8007f5a:	b007      	add	sp, #28
 8007f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f5e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008154 <__ieee754_rem_pio2f+0x254>
 8007f62:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008158 <__ieee754_rem_pio2f+0x258>
 8007f66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f6a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007f6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f72:	edc0 6a00 	vstr	s13, [r0]
 8007f76:	e7eb      	b.n	8007f50 <__ieee754_rem_pio2f+0x50>
 8007f78:	429d      	cmp	r5, r3
 8007f7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007f7e:	d00e      	beq.n	8007f9e <__ieee754_rem_pio2f+0x9e>
 8007f80:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008150 <__ieee754_rem_pio2f+0x250>
 8007f84:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007f88:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f8c:	ed80 0a00 	vstr	s0, [r0]
 8007f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	edc4 7a01 	vstr	s15, [r4, #4]
 8007f9c:	e7dd      	b.n	8007f5a <__ieee754_rem_pio2f+0x5a>
 8007f9e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008154 <__ieee754_rem_pio2f+0x254>
 8007fa2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008158 <__ieee754_rem_pio2f+0x258>
 8007fa6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007faa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007fae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fb2:	edc0 6a00 	vstr	s13, [r0]
 8007fb6:	e7eb      	b.n	8007f90 <__ieee754_rem_pio2f+0x90>
 8007fb8:	4b68      	ldr	r3, [pc, #416]	; (800815c <__ieee754_rem_pio2f+0x25c>)
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	dc72      	bgt.n	80080a4 <__ieee754_rem_pio2f+0x1a4>
 8007fbe:	f000 fc31 	bl	8008824 <fabsf>
 8007fc2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008160 <__ieee754_rem_pio2f+0x260>
 8007fc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007fca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fd6:	ee17 0a90 	vmov	r0, s15
 8007fda:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008148 <__ieee754_rem_pio2f+0x248>
 8007fde:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007fe2:	281f      	cmp	r0, #31
 8007fe4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008150 <__ieee754_rem_pio2f+0x250>
 8007fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fec:	eeb1 6a47 	vneg.f32	s12, s14
 8007ff0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007ff4:	ee16 2a90 	vmov	r2, s13
 8007ff8:	dc1c      	bgt.n	8008034 <__ieee754_rem_pio2f+0x134>
 8007ffa:	495a      	ldr	r1, [pc, #360]	; (8008164 <__ieee754_rem_pio2f+0x264>)
 8007ffc:	1e47      	subs	r7, r0, #1
 8007ffe:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008002:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008006:	428b      	cmp	r3, r1
 8008008:	d014      	beq.n	8008034 <__ieee754_rem_pio2f+0x134>
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	ed94 7a00 	vldr	s14, [r4]
 8008010:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008014:	2e00      	cmp	r6, #0
 8008016:	ee30 0a67 	vsub.f32	s0, s0, s15
 800801a:	ed84 0a01 	vstr	s0, [r4, #4]
 800801e:	da9c      	bge.n	8007f5a <__ieee754_rem_pio2f+0x5a>
 8008020:	eeb1 7a47 	vneg.f32	s14, s14
 8008024:	eeb1 0a40 	vneg.f32	s0, s0
 8008028:	ed84 7a00 	vstr	s14, [r4]
 800802c:	ed84 0a01 	vstr	s0, [r4, #4]
 8008030:	4240      	negs	r0, r0
 8008032:	e792      	b.n	8007f5a <__ieee754_rem_pio2f+0x5a>
 8008034:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008038:	15eb      	asrs	r3, r5, #23
 800803a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800803e:	2d08      	cmp	r5, #8
 8008040:	dde3      	ble.n	800800a <__ieee754_rem_pio2f+0x10a>
 8008042:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008154 <__ieee754_rem_pio2f+0x254>
 8008046:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008158 <__ieee754_rem_pio2f+0x258>
 800804a:	eef0 6a40 	vmov.f32	s13, s0
 800804e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008052:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008056:	eea6 0a27 	vfma.f32	s0, s12, s15
 800805a:	eef0 7a40 	vmov.f32	s15, s0
 800805e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008062:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008066:	ee15 2a90 	vmov	r2, s11
 800806a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800806e:	1a5b      	subs	r3, r3, r1
 8008070:	2b19      	cmp	r3, #25
 8008072:	dc04      	bgt.n	800807e <__ieee754_rem_pio2f+0x17e>
 8008074:	edc4 5a00 	vstr	s11, [r4]
 8008078:	eeb0 0a66 	vmov.f32	s0, s13
 800807c:	e7c6      	b.n	800800c <__ieee754_rem_pio2f+0x10c>
 800807e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008168 <__ieee754_rem_pio2f+0x268>
 8008082:	eeb0 0a66 	vmov.f32	s0, s13
 8008086:	eea6 0a25 	vfma.f32	s0, s12, s11
 800808a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800808e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800816c <__ieee754_rem_pio2f+0x26c>
 8008092:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008096:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800809a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800809e:	ed84 7a00 	vstr	s14, [r4]
 80080a2:	e7b3      	b.n	800800c <__ieee754_rem_pio2f+0x10c>
 80080a4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80080a8:	db06      	blt.n	80080b8 <__ieee754_rem_pio2f+0x1b8>
 80080aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80080ae:	edc0 7a01 	vstr	s15, [r0, #4]
 80080b2:	edc0 7a00 	vstr	s15, [r0]
 80080b6:	e733      	b.n	8007f20 <__ieee754_rem_pio2f+0x20>
 80080b8:	15ea      	asrs	r2, r5, #23
 80080ba:	3a86      	subs	r2, #134	; 0x86
 80080bc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080c8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008170 <__ieee754_rem_pio2f+0x270>
 80080cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080d4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80080d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080e8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80080ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f8:	edcd 7a05 	vstr	s15, [sp, #20]
 80080fc:	d11e      	bne.n	800813c <__ieee754_rem_pio2f+0x23c>
 80080fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008106:	bf14      	ite	ne
 8008108:	2302      	movne	r3, #2
 800810a:	2301      	moveq	r3, #1
 800810c:	4919      	ldr	r1, [pc, #100]	; (8008174 <__ieee754_rem_pio2f+0x274>)
 800810e:	9101      	str	r1, [sp, #4]
 8008110:	2102      	movs	r1, #2
 8008112:	9100      	str	r1, [sp, #0]
 8008114:	a803      	add	r0, sp, #12
 8008116:	4621      	mov	r1, r4
 8008118:	f000 f82e 	bl	8008178 <__kernel_rem_pio2f>
 800811c:	2e00      	cmp	r6, #0
 800811e:	f6bf af1c 	bge.w	8007f5a <__ieee754_rem_pio2f+0x5a>
 8008122:	edd4 7a00 	vldr	s15, [r4]
 8008126:	eef1 7a67 	vneg.f32	s15, s15
 800812a:	edc4 7a00 	vstr	s15, [r4]
 800812e:	edd4 7a01 	vldr	s15, [r4, #4]
 8008132:	eef1 7a67 	vneg.f32	s15, s15
 8008136:	edc4 7a01 	vstr	s15, [r4, #4]
 800813a:	e779      	b.n	8008030 <__ieee754_rem_pio2f+0x130>
 800813c:	2303      	movs	r3, #3
 800813e:	e7e5      	b.n	800810c <__ieee754_rem_pio2f+0x20c>
 8008140:	3f490fd8 	.word	0x3f490fd8
 8008144:	4016cbe3 	.word	0x4016cbe3
 8008148:	3fc90f80 	.word	0x3fc90f80
 800814c:	3fc90fd0 	.word	0x3fc90fd0
 8008150:	37354443 	.word	0x37354443
 8008154:	37354400 	.word	0x37354400
 8008158:	2e85a308 	.word	0x2e85a308
 800815c:	43490f80 	.word	0x43490f80
 8008160:	3f22f984 	.word	0x3f22f984
 8008164:	080185b8 	.word	0x080185b8
 8008168:	2e85a300 	.word	0x2e85a300
 800816c:	248d3132 	.word	0x248d3132
 8008170:	43800000 	.word	0x43800000
 8008174:	08018638 	.word	0x08018638

08008178 <__kernel_rem_pio2f>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	ed2d 8b04 	vpush	{d8-d9}
 8008180:	b0d9      	sub	sp, #356	; 0x164
 8008182:	4688      	mov	r8, r1
 8008184:	9002      	str	r0, [sp, #8]
 8008186:	49bb      	ldr	r1, [pc, #748]	; (8008474 <__kernel_rem_pio2f+0x2fc>)
 8008188:	9866      	ldr	r0, [sp, #408]	; 0x198
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008190:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008194:	1e59      	subs	r1, r3, #1
 8008196:	1d13      	adds	r3, r2, #4
 8008198:	db27      	blt.n	80081ea <__kernel_rem_pio2f+0x72>
 800819a:	f1b2 0b03 	subs.w	fp, r2, #3
 800819e:	bf48      	it	mi
 80081a0:	f102 0b04 	addmi.w	fp, r2, #4
 80081a4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80081a8:	1c45      	adds	r5, r0, #1
 80081aa:	00ec      	lsls	r4, r5, #3
 80081ac:	1a47      	subs	r7, r0, r1
 80081ae:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008484 <__kernel_rem_pio2f+0x30c>
 80081b2:	9403      	str	r4, [sp, #12]
 80081b4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80081b8:	eb0a 0c01 	add.w	ip, sl, r1
 80081bc:	ae1c      	add	r6, sp, #112	; 0x70
 80081be:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80081c2:	2400      	movs	r4, #0
 80081c4:	4564      	cmp	r4, ip
 80081c6:	dd12      	ble.n	80081ee <__kernel_rem_pio2f+0x76>
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	ac1c      	add	r4, sp, #112	; 0x70
 80081cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80081d0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80081d4:	f04f 0c00 	mov.w	ip, #0
 80081d8:	45d4      	cmp	ip, sl
 80081da:	dc27      	bgt.n	800822c <__kernel_rem_pio2f+0xb4>
 80081dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80081e0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008484 <__kernel_rem_pio2f+0x30c>
 80081e4:	4627      	mov	r7, r4
 80081e6:	2600      	movs	r6, #0
 80081e8:	e016      	b.n	8008218 <__kernel_rem_pio2f+0xa0>
 80081ea:	2000      	movs	r0, #0
 80081ec:	e7dc      	b.n	80081a8 <__kernel_rem_pio2f+0x30>
 80081ee:	42e7      	cmn	r7, r4
 80081f0:	bf5d      	ittte	pl
 80081f2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80081f6:	ee07 3a90 	vmovpl	s15, r3
 80081fa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80081fe:	eef0 7a47 	vmovmi.f32	s15, s14
 8008202:	ece6 7a01 	vstmia	r6!, {s15}
 8008206:	3401      	adds	r4, #1
 8008208:	e7dc      	b.n	80081c4 <__kernel_rem_pio2f+0x4c>
 800820a:	ecf9 6a01 	vldmia	r9!, {s13}
 800820e:	ed97 7a00 	vldr	s14, [r7]
 8008212:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008216:	3601      	adds	r6, #1
 8008218:	428e      	cmp	r6, r1
 800821a:	f1a7 0704 	sub.w	r7, r7, #4
 800821e:	ddf4      	ble.n	800820a <__kernel_rem_pio2f+0x92>
 8008220:	eceb 7a01 	vstmia	fp!, {s15}
 8008224:	f10c 0c01 	add.w	ip, ip, #1
 8008228:	3404      	adds	r4, #4
 800822a:	e7d5      	b.n	80081d8 <__kernel_rem_pio2f+0x60>
 800822c:	ab08      	add	r3, sp, #32
 800822e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008232:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008480 <__kernel_rem_pio2f+0x308>
 8008236:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800847c <__kernel_rem_pio2f+0x304>
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008240:	4656      	mov	r6, sl
 8008242:	00b3      	lsls	r3, r6, #2
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	ab58      	add	r3, sp, #352	; 0x160
 8008248:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800824c:	ac08      	add	r4, sp, #32
 800824e:	ab44      	add	r3, sp, #272	; 0x110
 8008250:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008254:	46a4      	mov	ip, r4
 8008256:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800825a:	4637      	mov	r7, r6
 800825c:	2f00      	cmp	r7, #0
 800825e:	f1a0 0004 	sub.w	r0, r0, #4
 8008262:	dc4f      	bgt.n	8008304 <__kernel_rem_pio2f+0x18c>
 8008264:	4628      	mov	r0, r5
 8008266:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800826a:	f7fe ffdd 	bl	8007228 <scalbnf>
 800826e:	eeb0 8a40 	vmov.f32	s16, s0
 8008272:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008276:	ee28 0a00 	vmul.f32	s0, s16, s0
 800827a:	f000 fadb 	bl	8008834 <floorf>
 800827e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008282:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008286:	2d00      	cmp	r5, #0
 8008288:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800828c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008290:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008294:	ee17 9a90 	vmov	r9, s15
 8008298:	ee38 8a40 	vsub.f32	s16, s16, s0
 800829c:	dd44      	ble.n	8008328 <__kernel_rem_pio2f+0x1b0>
 800829e:	f106 3cff 	add.w	ip, r6, #4294967295
 80082a2:	ab08      	add	r3, sp, #32
 80082a4:	f1c5 0e08 	rsb	lr, r5, #8
 80082a8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80082ac:	fa47 f00e 	asr.w	r0, r7, lr
 80082b0:	4481      	add	r9, r0
 80082b2:	fa00 f00e 	lsl.w	r0, r0, lr
 80082b6:	1a3f      	subs	r7, r7, r0
 80082b8:	f1c5 0007 	rsb	r0, r5, #7
 80082bc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80082c0:	4107      	asrs	r7, r0
 80082c2:	2f00      	cmp	r7, #0
 80082c4:	dd3f      	ble.n	8008346 <__kernel_rem_pio2f+0x1ce>
 80082c6:	f04f 0e00 	mov.w	lr, #0
 80082ca:	f109 0901 	add.w	r9, r9, #1
 80082ce:	4673      	mov	r3, lr
 80082d0:	4576      	cmp	r6, lr
 80082d2:	dc6b      	bgt.n	80083ac <__kernel_rem_pio2f+0x234>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	dd04      	ble.n	80082e2 <__kernel_rem_pio2f+0x16a>
 80082d8:	2d01      	cmp	r5, #1
 80082da:	d078      	beq.n	80083ce <__kernel_rem_pio2f+0x256>
 80082dc:	2d02      	cmp	r5, #2
 80082de:	f000 8081 	beq.w	80083e4 <__kernel_rem_pio2f+0x26c>
 80082e2:	2f02      	cmp	r7, #2
 80082e4:	d12f      	bne.n	8008346 <__kernel_rem_pio2f+0x1ce>
 80082e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082ea:	ee30 8a48 	vsub.f32	s16, s0, s16
 80082ee:	b353      	cbz	r3, 8008346 <__kernel_rem_pio2f+0x1ce>
 80082f0:	4628      	mov	r0, r5
 80082f2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80082f6:	f7fe ff97 	bl	8007228 <scalbnf>
 80082fa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80082fe:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008302:	e020      	b.n	8008346 <__kernel_rem_pio2f+0x1ce>
 8008304:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008308:	3f01      	subs	r7, #1
 800830a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800830e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008312:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008316:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800831a:	ecac 0a01 	vstmia	ip!, {s0}
 800831e:	ed90 0a00 	vldr	s0, [r0]
 8008322:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008326:	e799      	b.n	800825c <__kernel_rem_pio2f+0xe4>
 8008328:	d105      	bne.n	8008336 <__kernel_rem_pio2f+0x1be>
 800832a:	1e70      	subs	r0, r6, #1
 800832c:	ab08      	add	r3, sp, #32
 800832e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008332:	11ff      	asrs	r7, r7, #7
 8008334:	e7c5      	b.n	80082c2 <__kernel_rem_pio2f+0x14a>
 8008336:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800833a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800833e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008342:	da31      	bge.n	80083a8 <__kernel_rem_pio2f+0x230>
 8008344:	2700      	movs	r7, #0
 8008346:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	f040 809b 	bne.w	8008488 <__kernel_rem_pio2f+0x310>
 8008352:	1e74      	subs	r4, r6, #1
 8008354:	46a4      	mov	ip, r4
 8008356:	2000      	movs	r0, #0
 8008358:	45d4      	cmp	ip, sl
 800835a:	da4a      	bge.n	80083f2 <__kernel_rem_pio2f+0x27a>
 800835c:	2800      	cmp	r0, #0
 800835e:	d07a      	beq.n	8008456 <__kernel_rem_pio2f+0x2de>
 8008360:	ab08      	add	r3, sp, #32
 8008362:	3d08      	subs	r5, #8
 8008364:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 8081 	beq.w	8008470 <__kernel_rem_pio2f+0x2f8>
 800836e:	4628      	mov	r0, r5
 8008370:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008374:	00a5      	lsls	r5, r4, #2
 8008376:	f7fe ff57 	bl	8007228 <scalbnf>
 800837a:	aa44      	add	r2, sp, #272	; 0x110
 800837c:	1d2b      	adds	r3, r5, #4
 800837e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008480 <__kernel_rem_pio2f+0x308>
 8008382:	18d1      	adds	r1, r2, r3
 8008384:	4622      	mov	r2, r4
 8008386:	2a00      	cmp	r2, #0
 8008388:	f280 80ae 	bge.w	80084e8 <__kernel_rem_pio2f+0x370>
 800838c:	4622      	mov	r2, r4
 800838e:	2a00      	cmp	r2, #0
 8008390:	f2c0 80cc 	blt.w	800852c <__kernel_rem_pio2f+0x3b4>
 8008394:	a944      	add	r1, sp, #272	; 0x110
 8008396:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800839a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008478 <__kernel_rem_pio2f+0x300>
 800839e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008484 <__kernel_rem_pio2f+0x30c>
 80083a2:	2000      	movs	r0, #0
 80083a4:	1aa1      	subs	r1, r4, r2
 80083a6:	e0b6      	b.n	8008516 <__kernel_rem_pio2f+0x39e>
 80083a8:	2702      	movs	r7, #2
 80083aa:	e78c      	b.n	80082c6 <__kernel_rem_pio2f+0x14e>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	b94b      	cbnz	r3, 80083c4 <__kernel_rem_pio2f+0x24c>
 80083b0:	b118      	cbz	r0, 80083ba <__kernel_rem_pio2f+0x242>
 80083b2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80083b6:	6020      	str	r0, [r4, #0]
 80083b8:	2001      	movs	r0, #1
 80083ba:	f10e 0e01 	add.w	lr, lr, #1
 80083be:	3404      	adds	r4, #4
 80083c0:	4603      	mov	r3, r0
 80083c2:	e785      	b.n	80082d0 <__kernel_rem_pio2f+0x158>
 80083c4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80083c8:	6020      	str	r0, [r4, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	e7f5      	b.n	80083ba <__kernel_rem_pio2f+0x242>
 80083ce:	1e74      	subs	r4, r6, #1
 80083d0:	a808      	add	r0, sp, #32
 80083d2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80083d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083da:	f10d 0c20 	add.w	ip, sp, #32
 80083de:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80083e2:	e77e      	b.n	80082e2 <__kernel_rem_pio2f+0x16a>
 80083e4:	1e74      	subs	r4, r6, #1
 80083e6:	a808      	add	r0, sp, #32
 80083e8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80083ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80083f0:	e7f3      	b.n	80083da <__kernel_rem_pio2f+0x262>
 80083f2:	ab08      	add	r3, sp, #32
 80083f4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80083f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083fc:	4318      	orrs	r0, r3
 80083fe:	e7ab      	b.n	8008358 <__kernel_rem_pio2f+0x1e0>
 8008400:	f10c 0c01 	add.w	ip, ip, #1
 8008404:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008408:	2c00      	cmp	r4, #0
 800840a:	d0f9      	beq.n	8008400 <__kernel_rem_pio2f+0x288>
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008412:	eb0d 0003 	add.w	r0, sp, r3
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	18f4      	adds	r4, r6, r3
 800841a:	ab1c      	add	r3, sp, #112	; 0x70
 800841c:	1c77      	adds	r7, r6, #1
 800841e:	384c      	subs	r0, #76	; 0x4c
 8008420:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008424:	4466      	add	r6, ip
 8008426:	42be      	cmp	r6, r7
 8008428:	f6ff af0b 	blt.w	8008242 <__kernel_rem_pio2f+0xca>
 800842c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008430:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800843c:	f04f 0c00 	mov.w	ip, #0
 8008440:	ece4 7a01 	vstmia	r4!, {s15}
 8008444:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008484 <__kernel_rem_pio2f+0x30c>
 8008448:	46a1      	mov	r9, r4
 800844a:	458c      	cmp	ip, r1
 800844c:	dd07      	ble.n	800845e <__kernel_rem_pio2f+0x2e6>
 800844e:	ece0 7a01 	vstmia	r0!, {s15}
 8008452:	3701      	adds	r7, #1
 8008454:	e7e7      	b.n	8008426 <__kernel_rem_pio2f+0x2ae>
 8008456:	9804      	ldr	r0, [sp, #16]
 8008458:	f04f 0c01 	mov.w	ip, #1
 800845c:	e7d2      	b.n	8008404 <__kernel_rem_pio2f+0x28c>
 800845e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008462:	ed39 7a01 	vldmdb	r9!, {s14}
 8008466:	f10c 0c01 	add.w	ip, ip, #1
 800846a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800846e:	e7ec      	b.n	800844a <__kernel_rem_pio2f+0x2d2>
 8008470:	3c01      	subs	r4, #1
 8008472:	e775      	b.n	8008360 <__kernel_rem_pio2f+0x1e8>
 8008474:	0801897c 	.word	0x0801897c
 8008478:	08018950 	.word	0x08018950
 800847c:	43800000 	.word	0x43800000
 8008480:	3b800000 	.word	0x3b800000
 8008484:	00000000 	.word	0x00000000
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	eeb0 0a48 	vmov.f32	s0, s16
 800848e:	1a98      	subs	r0, r3, r2
 8008490:	f7fe feca 	bl	8007228 <scalbnf>
 8008494:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800847c <__kernel_rem_pio2f+0x304>
 8008498:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800849c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a0:	db19      	blt.n	80084d6 <__kernel_rem_pio2f+0x35e>
 80084a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008480 <__kernel_rem_pio2f+0x308>
 80084a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80084aa:	aa08      	add	r2, sp, #32
 80084ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b0:	1c74      	adds	r4, r6, #1
 80084b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084b6:	3508      	adds	r5, #8
 80084b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80084bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80084c4:	ee10 3a10 	vmov	r3, s0
 80084c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80084cc:	ee17 3a90 	vmov	r3, s15
 80084d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80084d4:	e74b      	b.n	800836e <__kernel_rem_pio2f+0x1f6>
 80084d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80084da:	aa08      	add	r2, sp, #32
 80084dc:	ee10 3a10 	vmov	r3, s0
 80084e0:	4634      	mov	r4, r6
 80084e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80084e6:	e742      	b.n	800836e <__kernel_rem_pio2f+0x1f6>
 80084e8:	a808      	add	r0, sp, #32
 80084ea:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	ee07 0a90 	vmov	s15, r0
 80084f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084f8:	3a01      	subs	r2, #1
 80084fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80084fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008502:	ed61 7a01 	vstmdb	r1!, {s15}
 8008506:	e73e      	b.n	8008386 <__kernel_rem_pio2f+0x20e>
 8008508:	ecfc 6a01 	vldmia	ip!, {s13}
 800850c:	ecb6 7a01 	vldmia	r6!, {s14}
 8008510:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008514:	3001      	adds	r0, #1
 8008516:	4550      	cmp	r0, sl
 8008518:	dc01      	bgt.n	800851e <__kernel_rem_pio2f+0x3a6>
 800851a:	4288      	cmp	r0, r1
 800851c:	ddf4      	ble.n	8008508 <__kernel_rem_pio2f+0x390>
 800851e:	a858      	add	r0, sp, #352	; 0x160
 8008520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008524:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008528:	3a01      	subs	r2, #1
 800852a:	e730      	b.n	800838e <__kernel_rem_pio2f+0x216>
 800852c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800852e:	2a02      	cmp	r2, #2
 8008530:	dc09      	bgt.n	8008546 <__kernel_rem_pio2f+0x3ce>
 8008532:	2a00      	cmp	r2, #0
 8008534:	dc2a      	bgt.n	800858c <__kernel_rem_pio2f+0x414>
 8008536:	d043      	beq.n	80085c0 <__kernel_rem_pio2f+0x448>
 8008538:	f009 0007 	and.w	r0, r9, #7
 800853c:	b059      	add	sp, #356	; 0x164
 800853e:	ecbd 8b04 	vpop	{d8-d9}
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008548:	2b03      	cmp	r3, #3
 800854a:	d1f5      	bne.n	8008538 <__kernel_rem_pio2f+0x3c0>
 800854c:	ab30      	add	r3, sp, #192	; 0xc0
 800854e:	442b      	add	r3, r5
 8008550:	461a      	mov	r2, r3
 8008552:	4619      	mov	r1, r3
 8008554:	4620      	mov	r0, r4
 8008556:	2800      	cmp	r0, #0
 8008558:	f1a1 0104 	sub.w	r1, r1, #4
 800855c:	dc51      	bgt.n	8008602 <__kernel_rem_pio2f+0x48a>
 800855e:	4621      	mov	r1, r4
 8008560:	2901      	cmp	r1, #1
 8008562:	f1a2 0204 	sub.w	r2, r2, #4
 8008566:	dc5c      	bgt.n	8008622 <__kernel_rem_pio2f+0x4aa>
 8008568:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008484 <__kernel_rem_pio2f+0x30c>
 800856c:	3304      	adds	r3, #4
 800856e:	2c01      	cmp	r4, #1
 8008570:	dc67      	bgt.n	8008642 <__kernel_rem_pio2f+0x4ca>
 8008572:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008576:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800857a:	2f00      	cmp	r7, #0
 800857c:	d167      	bne.n	800864e <__kernel_rem_pio2f+0x4d6>
 800857e:	edc8 6a00 	vstr	s13, [r8]
 8008582:	ed88 7a01 	vstr	s14, [r8, #4]
 8008586:	edc8 7a02 	vstr	s15, [r8, #8]
 800858a:	e7d5      	b.n	8008538 <__kernel_rem_pio2f+0x3c0>
 800858c:	aa30      	add	r2, sp, #192	; 0xc0
 800858e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008484 <__kernel_rem_pio2f+0x30c>
 8008592:	4413      	add	r3, r2
 8008594:	4622      	mov	r2, r4
 8008596:	2a00      	cmp	r2, #0
 8008598:	da24      	bge.n	80085e4 <__kernel_rem_pio2f+0x46c>
 800859a:	b34f      	cbz	r7, 80085f0 <__kernel_rem_pio2f+0x478>
 800859c:	eef1 7a47 	vneg.f32	s15, s14
 80085a0:	edc8 7a00 	vstr	s15, [r8]
 80085a4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80085a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085ac:	aa31      	add	r2, sp, #196	; 0xc4
 80085ae:	2301      	movs	r3, #1
 80085b0:	429c      	cmp	r4, r3
 80085b2:	da20      	bge.n	80085f6 <__kernel_rem_pio2f+0x47e>
 80085b4:	b10f      	cbz	r7, 80085ba <__kernel_rem_pio2f+0x442>
 80085b6:	eef1 7a67 	vneg.f32	s15, s15
 80085ba:	edc8 7a01 	vstr	s15, [r8, #4]
 80085be:	e7bb      	b.n	8008538 <__kernel_rem_pio2f+0x3c0>
 80085c0:	aa30      	add	r2, sp, #192	; 0xc0
 80085c2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008484 <__kernel_rem_pio2f+0x30c>
 80085c6:	4413      	add	r3, r2
 80085c8:	2c00      	cmp	r4, #0
 80085ca:	da05      	bge.n	80085d8 <__kernel_rem_pio2f+0x460>
 80085cc:	b10f      	cbz	r7, 80085d2 <__kernel_rem_pio2f+0x45a>
 80085ce:	eef1 7a67 	vneg.f32	s15, s15
 80085d2:	edc8 7a00 	vstr	s15, [r8]
 80085d6:	e7af      	b.n	8008538 <__kernel_rem_pio2f+0x3c0>
 80085d8:	ed33 7a01 	vldmdb	r3!, {s14}
 80085dc:	3c01      	subs	r4, #1
 80085de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085e2:	e7f1      	b.n	80085c8 <__kernel_rem_pio2f+0x450>
 80085e4:	ed73 7a01 	vldmdb	r3!, {s15}
 80085e8:	3a01      	subs	r2, #1
 80085ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085ee:	e7d2      	b.n	8008596 <__kernel_rem_pio2f+0x41e>
 80085f0:	eef0 7a47 	vmov.f32	s15, s14
 80085f4:	e7d4      	b.n	80085a0 <__kernel_rem_pio2f+0x428>
 80085f6:	ecb2 7a01 	vldmia	r2!, {s14}
 80085fa:	3301      	adds	r3, #1
 80085fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008600:	e7d6      	b.n	80085b0 <__kernel_rem_pio2f+0x438>
 8008602:	edd1 7a00 	vldr	s15, [r1]
 8008606:	edd1 6a01 	vldr	s13, [r1, #4]
 800860a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800860e:	3801      	subs	r0, #1
 8008610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008614:	ed81 7a00 	vstr	s14, [r1]
 8008618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861c:	edc1 7a01 	vstr	s15, [r1, #4]
 8008620:	e799      	b.n	8008556 <__kernel_rem_pio2f+0x3de>
 8008622:	edd2 7a00 	vldr	s15, [r2]
 8008626:	edd2 6a01 	vldr	s13, [r2, #4]
 800862a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800862e:	3901      	subs	r1, #1
 8008630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008634:	ed82 7a00 	vstr	s14, [r2]
 8008638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863c:	edc2 7a01 	vstr	s15, [r2, #4]
 8008640:	e78e      	b.n	8008560 <__kernel_rem_pio2f+0x3e8>
 8008642:	ed33 7a01 	vldmdb	r3!, {s14}
 8008646:	3c01      	subs	r4, #1
 8008648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800864c:	e78f      	b.n	800856e <__kernel_rem_pio2f+0x3f6>
 800864e:	eef1 6a66 	vneg.f32	s13, s13
 8008652:	eeb1 7a47 	vneg.f32	s14, s14
 8008656:	edc8 6a00 	vstr	s13, [r8]
 800865a:	ed88 7a01 	vstr	s14, [r8, #4]
 800865e:	eef1 7a67 	vneg.f32	s15, s15
 8008662:	e790      	b.n	8008586 <__kernel_rem_pio2f+0x40e>

08008664 <__kernel_tanf>:
 8008664:	b508      	push	{r3, lr}
 8008666:	ee10 3a10 	vmov	r3, s0
 800866a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800866e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8008672:	eef0 7a40 	vmov.f32	s15, s0
 8008676:	da17      	bge.n	80086a8 <__kernel_tanf+0x44>
 8008678:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800867c:	ee17 1a10 	vmov	r1, s14
 8008680:	bb41      	cbnz	r1, 80086d4 <__kernel_tanf+0x70>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	4313      	orrs	r3, r2
 8008686:	d108      	bne.n	800869a <__kernel_tanf+0x36>
 8008688:	f000 f8cc 	bl	8008824 <fabsf>
 800868c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008690:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008694:	eeb0 0a67 	vmov.f32	s0, s15
 8008698:	bd08      	pop	{r3, pc}
 800869a:	2801      	cmp	r0, #1
 800869c:	d0fa      	beq.n	8008694 <__kernel_tanf+0x30>
 800869e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80086a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80086a6:	e7f5      	b.n	8008694 <__kernel_tanf+0x30>
 80086a8:	494c      	ldr	r1, [pc, #304]	; (80087dc <__kernel_tanf+0x178>)
 80086aa:	428a      	cmp	r2, r1
 80086ac:	db12      	blt.n	80086d4 <__kernel_tanf+0x70>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	bfb8      	it	lt
 80086b2:	eef1 7a40 	vneglt.f32	s15, s0
 80086b6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80087e0 <__kernel_tanf+0x17c>
 80086ba:	ee70 7a67 	vsub.f32	s15, s0, s15
 80086be:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80087e4 <__kernel_tanf+0x180>
 80086c2:	bfb8      	it	lt
 80086c4:	eef1 0a60 	vneglt.f32	s1, s1
 80086c8:	ee70 0a60 	vsub.f32	s1, s0, s1
 80086cc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80086d0:	eddf 0a45 	vldr	s1, [pc, #276]	; 80087e8 <__kernel_tanf+0x184>
 80086d4:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087ec <__kernel_tanf+0x188>
 80086d8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80087f0 <__kernel_tanf+0x18c>
 80086dc:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80087f4 <__kernel_tanf+0x190>
 80086e0:	493e      	ldr	r1, [pc, #248]	; (80087dc <__kernel_tanf+0x178>)
 80086e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80086e6:	428a      	cmp	r2, r1
 80086e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80086ec:	eea7 6a25 	vfma.f32	s12, s14, s11
 80086f0:	eddf 5a41 	vldr	s11, [pc, #260]	; 80087f8 <__kernel_tanf+0x194>
 80086f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80086f8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80087fc <__kernel_tanf+0x198>
 80086fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008700:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008800 <__kernel_tanf+0x19c>
 8008704:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008708:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8008804 <__kernel_tanf+0x1a0>
 800870c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008710:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8008808 <__kernel_tanf+0x1a4>
 8008714:	eee7 5a05 	vfma.f32	s11, s14, s10
 8008718:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800880c <__kernel_tanf+0x1a8>
 800871c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008720:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8008810 <__kernel_tanf+0x1ac>
 8008724:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008728:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008814 <__kernel_tanf+0x1b0>
 800872c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008730:	eddf 5a39 	vldr	s11, [pc, #228]	; 8008818 <__kernel_tanf+0x1b4>
 8008734:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008738:	eeb0 7a46 	vmov.f32	s14, s12
 800873c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008740:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8008744:	eeb0 6a60 	vmov.f32	s12, s1
 8008748:	eea7 6a05 	vfma.f32	s12, s14, s10
 800874c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800881c <__kernel_tanf+0x1b8>
 8008750:	eee6 0a26 	vfma.f32	s1, s12, s13
 8008754:	eee5 0a07 	vfma.f32	s1, s10, s14
 8008758:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800875c:	db1d      	blt.n	800879a <__kernel_tanf+0x136>
 800875e:	ee06 0a90 	vmov	s13, r0
 8008762:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8008766:	ee27 6a07 	vmul.f32	s12, s14, s14
 800876a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800876e:	179b      	asrs	r3, r3, #30
 8008770:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	f1c3 0301 	rsb	r3, r3, #1
 800877c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008780:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8008784:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008788:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008794:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008798:	e77c      	b.n	8008694 <__kernel_tanf+0x30>
 800879a:	2801      	cmp	r0, #1
 800879c:	d01b      	beq.n	80087d6 <__kernel_tanf+0x172>
 800879e:	4b20      	ldr	r3, [pc, #128]	; (8008820 <__kernel_tanf+0x1bc>)
 80087a0:	ee17 2a10 	vmov	r2, s14
 80087a4:	401a      	ands	r2, r3
 80087a6:	ee06 2a10 	vmov	s12, r2
 80087aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80087ae:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80087b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80087b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087be:	ee16 2a90 	vmov	r2, s13
 80087c2:	4013      	ands	r3, r2
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80087cc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80087d0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80087d4:	e75e      	b.n	8008694 <__kernel_tanf+0x30>
 80087d6:	eef0 7a47 	vmov.f32	s15, s14
 80087da:	e75b      	b.n	8008694 <__kernel_tanf+0x30>
 80087dc:	3f2ca140 	.word	0x3f2ca140
 80087e0:	3f490fda 	.word	0x3f490fda
 80087e4:	33222168 	.word	0x33222168
 80087e8:	00000000 	.word	0x00000000
 80087ec:	b79bae5f 	.word	0xb79bae5f
 80087f0:	38a3f445 	.word	0x38a3f445
 80087f4:	37d95384 	.word	0x37d95384
 80087f8:	3a1a26c8 	.word	0x3a1a26c8
 80087fc:	3b6b6916 	.word	0x3b6b6916
 8008800:	3cb327a4 	.word	0x3cb327a4
 8008804:	3e088889 	.word	0x3e088889
 8008808:	3895c07a 	.word	0x3895c07a
 800880c:	398137b9 	.word	0x398137b9
 8008810:	3abede48 	.word	0x3abede48
 8008814:	3c11371f 	.word	0x3c11371f
 8008818:	3d5d0dd1 	.word	0x3d5d0dd1
 800881c:	3eaaaaab 	.word	0x3eaaaaab
 8008820:	fffff000 	.word	0xfffff000

08008824 <fabsf>:
 8008824:	ee10 3a10 	vmov	r3, s0
 8008828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800882c:	ee00 3a10 	vmov	s0, r3
 8008830:	4770      	bx	lr
	...

08008834 <floorf>:
 8008834:	ee10 3a10 	vmov	r3, s0
 8008838:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800883c:	3a7f      	subs	r2, #127	; 0x7f
 800883e:	2a16      	cmp	r2, #22
 8008840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008844:	dc2a      	bgt.n	800889c <floorf+0x68>
 8008846:	2a00      	cmp	r2, #0
 8008848:	da11      	bge.n	800886e <floorf+0x3a>
 800884a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80088ac <floorf+0x78>
 800884e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008852:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885a:	dd05      	ble.n	8008868 <floorf+0x34>
 800885c:	2b00      	cmp	r3, #0
 800885e:	da23      	bge.n	80088a8 <floorf+0x74>
 8008860:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <floorf+0x7c>)
 8008862:	2900      	cmp	r1, #0
 8008864:	bf18      	it	ne
 8008866:	4613      	movne	r3, r2
 8008868:	ee00 3a10 	vmov	s0, r3
 800886c:	4770      	bx	lr
 800886e:	4911      	ldr	r1, [pc, #68]	; (80088b4 <floorf+0x80>)
 8008870:	4111      	asrs	r1, r2
 8008872:	420b      	tst	r3, r1
 8008874:	d0fa      	beq.n	800886c <floorf+0x38>
 8008876:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80088ac <floorf+0x78>
 800887a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800887e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008886:	ddef      	ble.n	8008868 <floorf+0x34>
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfbe      	ittt	lt
 800888c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008890:	fa40 f202 	asrlt.w	r2, r0, r2
 8008894:	189b      	addlt	r3, r3, r2
 8008896:	ea23 0301 	bic.w	r3, r3, r1
 800889a:	e7e5      	b.n	8008868 <floorf+0x34>
 800889c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80088a0:	d3e4      	bcc.n	800886c <floorf+0x38>
 80088a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088a6:	4770      	bx	lr
 80088a8:	2300      	movs	r3, #0
 80088aa:	e7dd      	b.n	8008868 <floorf+0x34>
 80088ac:	7149f2ca 	.word	0x7149f2ca
 80088b0:	bf800000 	.word	0xbf800000
 80088b4:	007fffff 	.word	0x007fffff

080088b8 <_init>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	bf00      	nop
 80088bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088be:	bc08      	pop	{r3}
 80088c0:	469e      	mov	lr, r3
 80088c2:	4770      	bx	lr

080088c4 <_fini>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	bf00      	nop
 80088c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ca:	bc08      	pop	{r3}
 80088cc:	469e      	mov	lr, r3
 80088ce:	4770      	bx	lr
